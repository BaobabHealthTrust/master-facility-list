import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import React, { Component } from 'react';
import PropTypes from 'prop-types';

var Ticks =
/*#__PURE__*/
function (_Component) {
  _inherits(Ticks, _Component);

  function Ticks() {
    _classCallCheck(this, Ticks);

    return _possibleConstructorReturn(this, _getPrototypeOf(Ticks).apply(this, arguments));
  }

  _createClass(Ticks, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          values = _this$props.values,
          scale = _this$props.scale,
          count = _this$props.count,
          getEventData = _this$props.getEventData,
          activeHandleID = _this$props.activeHandleID;
      var ticks = (values ? values : scale.getTicks(count)).map(function (value) {
        return {
          id: "$$-".concat(value),
          value: value,
          percent: scale.getValue(value)
        };
      });
      var renderedChildren = children({
        getEventData: getEventData,
        activeHandleID: activeHandleID,
        ticks: ticks
      });
      return renderedChildren && React.Children.only(renderedChildren);
    }
  }]);

  return Ticks;
}(Component);

Ticks.propTypes = process.env.NODE_ENV !== "production" ? {
  /** @ignore */
  scale: PropTypes.object,

  /**
   * Approximate number of ticks you want to render.
   * If you supply your own ticks using the values prop this prop has no effect.
   */
  count: PropTypes.number,

  /**
   * The values prop should be an array of unique numbers.
   * Use this prop if you want to specify your own tick values instead of ticks generated by the slider.
   * The numbers should be valid numbers in the domain and correspond to the step value.
   * Invalid values will be coerced to the closet matching value in the domain.
   */
  values: PropTypes.array,

  /** @ignore */
  getEventData: PropTypes.func,

  /** @ignore */
  activeHandleID: PropTypes.string,

  /** @ignore */
  emitMouse: PropTypes.func,

  /** @ignore */
  emitTouch: PropTypes.func,

  /**
   * A function to render the ticks.
   * The function receives an object with an array of ticks. Note: `getEventData` can be called with an event and get the value and percent at that location (used for tooltips etc). `activeHandleID` will be a string or null.  Function signature:
   * `({ getEventData, activeHandleID, ticks  }): element`
   */
  children: PropTypes.func.isRequired
} : {};
Ticks.defaultProps = {
  count: 10
};
export default Ticks;