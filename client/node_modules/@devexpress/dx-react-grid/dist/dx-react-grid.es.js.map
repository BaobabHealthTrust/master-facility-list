{"version":3,"file":"dx-react-grid.es.js","sources":["../src/plugins/grid-core.tsx","../src/grid.tsx","../src/plugins/column-chooser.tsx","../src/plugins/filtering-state.tsx","../src/plugins/integrated-filtering.tsx","../src/plugins/editing-state.tsx","../src/plugins/paging-state.tsx","../src/plugins/integrated-paging.tsx","../src/plugins/custom-paging.tsx","../src/plugins/grouping-state.tsx","../src/plugins/integrated-grouping.tsx","../src/plugins/custom-grouping.tsx","../src/plugins/selection-state.tsx","../src/plugins/integrated-selection.tsx","../src/plugins/sorting-state.tsx","../src/plugins/integrated-sorting.tsx","../src/plugins/drag-drop-provider.tsx","../src/plugins/table-column-reordering.tsx","../src/plugins/table.tsx","../src/plugins/table-selection.tsx","../src/plugins/row-detail-state.tsx","../src/plugins/table-row-detail.tsx","../src/plugins/table-group-row.tsx","../src/plugins/table-header-row.tsx","../src/plugins/table-band-header.tsx","../src/plugins/table-filter-row.tsx","../src/plugins/table-edit-row.tsx","../src/plugins/table-edit-column.tsx","../src/plugins/table-column-resizing.tsx","../src/plugins/paging-panel.tsx","../src/components/group-panel-layout/item-layout.tsx","../src/components/group-panel-layout.tsx","../src/plugins/grouping-panel.tsx","../src/plugins/data-type-provider.tsx","../src/plugins/table-column-visibility.tsx","../src/plugins/toolbar.tsx","../src/plugins/tree-data-state.tsx","../src/plugins/custom-tree-data.tsx","../src/plugins/table-tree-column.tsx","../src/plugins/search-state.tsx","../src/plugins/search-panel.tsx","../src/plugins/table-fixed-columns.tsx","../src/plugins/summary-state.tsx","../src/plugins/integrated-summary.tsx","../src/plugins/custom-summary.tsx","../src/plugins/table-summary-row.tsx","../src/plugins/virtual-table/virtual-table-state.tsx","../src/components/table-layout.tsx","../src/components/table-layout/column-group.tsx","../src/utils/helpers.ts","../src/components/table-layout/virtual-row-layout.tsx","../src/components/table-layout/virtual-table-layout-block.tsx","../src/components/table-layout/virtual-table-layout.tsx","../src/components/table-layout/row-layout.tsx","../src/components/table-layout/rows-block-layout.tsx","../src/components/table-layout/static-table-layout.tsx","../src/plugins/virtual-table/remote-data-loader.tsx","../src/plugins/virtual-table/virtual-table.tsx","../src/utils/row-cache.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { rowIdGetter, cellValueGetter } from '@devexpress/dx-grid-core';\nimport { GridProps } from '../types';\n\nexport class GridCore extends React.PureComponent<GridProps> {\n  render() {\n    const {\n      rows,\n      columns,\n      getRowId,\n      getCellValue,\n      rootComponent: Root,\n    } = this.props;\n\n    return (\n      <Plugin>\n        <Getter name=\"skip\" value={0} />\n        <Getter name=\"loadedRowsStart\" value={0} />\n        <Getter name=\"rows\" value={rows} />\n        <Getter name=\"getRowId\" value={rowIdGetter(getRowId!, rows)} />\n        <Getter name=\"columns\" value={columns} />\n        <Getter name=\"getCellValue\" value={cellValueGetter(getCellValue!, columns)} />\n        <Template name=\"root\">\n          <Root>\n            <TemplatePlaceholder name=\"header\" />\n            <TemplatePlaceholder name=\"body\" />\n            <TemplatePlaceholder name=\"footer\" />\n          </Root>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n","import * as React from 'react';\nimport { PluginHost } from '@devexpress/dx-react-core';\nimport { GridCore } from './plugins/grid-core';\nimport { GridProps } from './types';\n\nconst GridBase: React.SFC<GridProps> = ({\n  rows,\n  columns,\n  getRowId,\n  getCellValue,\n  rootComponent,\n  children,\n}) => (\n  <PluginHost>\n    <GridCore\n      rows={rows}\n      columns={columns}\n      getRowId={getRowId}\n      getCellValue={getCellValue}\n      rootComponent={rootComponent}\n    />\n    {children}\n  </PluginHost>\n);\n\n/***\n * The Grid is a root container component designed to process and display data specified via\n * the `rows` property. You can configure columns using the `columns` property. The Grid's\n * functionality  is implemented in several plugins specified as child components.\n * See the plugins concept for details.\n * */\nexport const Grid: React.ComponentType<GridProps> = GridBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { columnChooserItems } from '@devexpress/dx-grid-core';\nimport { ColumnChooserState, ColumnChooserProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'TableColumnVisibility' },\n  { name: 'Toolbar' },\n];\n\nclass ColumnChooserBase extends React.PureComponent<ColumnChooserProps, ColumnChooserState> {\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    overlayComponent: 'Overlay',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    toggleButtonComponent: 'ToggleButton',\n  };\n  button!: React.ReactInstance;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visible: false,\n    };\n\n    this.handleToggle = this.handleToggle.bind(this);\n    this.handleHide = this.handleHide.bind(this);\n    this.setButtonRef = this.setButtonRef.bind(this);\n  }\n\n  setButtonRef(button) {\n    this.button = button;\n  }\n\n  handleToggle() {\n    const { visible } = this.state;\n    this.setState({ visible: !visible });\n  }\n\n  handleHide() {\n    this.setState({ visible: false });\n  }\n\n  render() {\n    const {\n      overlayComponent: Overlay,\n      containerComponent: Container,\n      itemComponent: Item,\n      toggleButtonComponent: ToggleButton,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n    const { visible } = this.state;\n\n    return (\n      <Plugin\n        name=\"ColumnChooser\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {(\n              { columns, hiddenColumnNames, isColumnTogglingEnabled },\n              { toggleColumnVisibility },\n            ) => (\n              <React.Fragment>\n                <ToggleButton\n                  buttonRef={this.setButtonRef}\n                  onToggle={this.handleToggle}\n                  getMessage={getMessage}\n                  active={visible}\n                />\n                <Overlay\n                  visible={visible}\n                  target={this.button}\n                  onHide={this.handleHide}\n                >\n                  <Container>\n                    {columnChooserItems(columns, hiddenColumnNames)\n                      .map((item) => {\n                        const { name: columnName } = item.column;\n                        const togglingEnabled = isColumnTogglingEnabled(columnName);\n                        return (\n                          <Item\n                            key={columnName}\n                            item={item}\n                            disabled={!togglingEnabled}\n                            onToggle={() => toggleColumnVisibility(columnName)}\n                          />\n                        );\n                      })}\n                  </Container>\n                </Overlay>\n              </React.Fragment>\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * The ColumnChooser plugin allows a user to toggle grid columns' visibility at runtime.\n * The column chooser lists columns with checkboxes that control a corresponding\n * column's visibility.\n * */\nexport const ColumnChooser: React.ComponentType<ColumnChooserProps> = ColumnChooserBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnFilter,\n  getColumnExtensionValueGetter,\n  filterExpression,\n  ChangeFilterPayload,\n} from '@devexpress/dx-grid-core';\nimport { FilteringStateProps, FilteringStateState } from '../types';\n\nconst columnExtensionValueGetter = (columnExtensions, defaultValue) => (\n  getColumnExtensionValueGetter(columnExtensions, 'filteringEnabled', defaultValue)\n);\nconst filterExpressionComputed = (\n  { filters, filterExpression: filterExpressionValue }: Getters,\n) => filterExpression(filters, filterExpressionValue);\n\nclass FilteringStateBase extends React.PureComponent<FilteringStateProps, FilteringStateState> {\n  static defaultProps = {\n    defaultFilters: [],\n    columnFilteringEnabled: true,\n  };\n  changeColumnFilter: (payload: ChangeFilterPayload) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filters: props.filters || props.defaultFilters,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        filters: () => {\n          const { onFiltersChange } = this.props;\n          return onFiltersChange;\n        },\n      },\n    );\n\n    this.changeColumnFilter = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'filters', changeColumnFilter);\n  }\n\n  // tslint:disable-next-line:member-ordering\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      filters = prevState.filters,\n    } = nextProps;\n\n    return {\n      filters,\n    };\n  }\n\n  render() {\n    const { filters } = this.state;\n    const { columnExtensions, columnFilteringEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"FilteringState\"\n      >\n        <Getter name=\"filters\" value={filters} />\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter\n          name=\"isColumnFilteringEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnFilteringEnabled)}\n        />\n        <Action name=\"changeColumnFilter\" action={this.changeColumnFilter} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the filtering state. */\nexport const FilteringState: React.ComponentType<FilteringStateProps> = FilteringStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  filteredRows,\n  filteredCollapsedRowsGetter,\n  unwrappedFilteredRows,\n  getColumnExtension,\n  defaultFilterPredicate,\n  FilterPredicate,\n} from '@devexpress/dx-grid-core';\nimport { PureComputed } from '@devexpress/dx-core';\nimport { IntegratedFilteringProps, DefaultPredicateFn } from '../types';\n\nconst pluginDependencies = [\n  { name: 'FilteringState', optional: true },\n  { name: 'SearchState', optional: true },\n];\n\nconst getCollapsedRowsComputed = ({ rows }: Getters) => filteredCollapsedRowsGetter(rows);\nconst unwrappedRowsComputed = ({ rows }: Getters) => unwrappedFilteredRows(rows);\n\nclass IntegratedFilteringBase extends React.PureComponent<IntegratedFilteringProps> {\n  static defaultPredicate: DefaultPredicateFn;\n\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnPredicate: PureComputed<\n      [string], FilterPredicate\n    > = columnName => getColumnExtension(\n      columnExtensions, columnName,\n    ).predicate!;\n\n    const rowsComputed = ({\n      rows,\n      filterExpression,\n      getCellValue,\n      getRowLevelKey,\n      getCollapsedRows,\n    }: Getters) => filteredRows(\n      rows,\n      filterExpression,\n      getCellValue,\n      getColumnPredicate,\n      getRowLevelKey,\n      getCollapsedRows,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedFiltering\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={unwrappedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\nIntegratedFilteringBase.defaultPredicate = defaultFilterPredicate;\n\nexport const IntegratedFiltering: React.ComponentType<IntegratedFilteringProps> & {\n  /***\n   * The built-in filter predicate.\n   * The `filter` parameter accepts an object containing the 'value' field.\n   **/\n  defaultPredicate: DefaultPredicateFn;\n} = IntegratedFilteringBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, StateHelper,\n} from '@devexpress/dx-react-core';\nimport {\n  createRowChangeGetter,\n  startEditRows,\n  stopEditRows,\n  addRow,\n  changeAddedRow,\n  cancelAddedRows,\n  addedRowsByIds,\n  changeRow,\n  cancelChanges,\n  changedRowsByIds,\n  deleteRows,\n  cancelDeletedRows,\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\nimport { EditingStateProps, EditingStateState } from '../types';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'editingEnabled', defaultValue);\n\nclass EditingStateBase extends React.PureComponent<EditingStateProps, EditingStateState> {\n  static defaultProps = {\n    columnEditingEnabled: true,\n    defaultEditingRowIds: [],\n    defaultRowChanges: {},\n    defaultAddedRows: [],\n    defaultDeletedRowIds: [],\n  };\n  startEditRows: (payload: any) => void;\n  stopEditRows: (payload: any) => void;\n  changeRow: (payload: any) => void;\n  cancelChangedRows: (payload: any) => void;\n  commitChangedRows: ({ rowIds }: { rowIds: any; }) => void;\n  addRow: (payload: any) => void;\n  changeAddedRow: (payload: any) => void;\n  cancelAddedRows: (payload: any) => void;\n  commitAddedRows: ({ rowIds }: { rowIds: any; }) => void;\n  deleteRows: (payload: any) => void;\n  cancelDeletedRows: (payload: any) => void;\n  commitDeletedRows: ({ rowIds }: { rowIds: any; }) => void;\n\n  constructor(props) {\n    super(props);\n    const rowChanges = props.rowChanges || props.defaultRowChanges;\n    const addedRows = props.addedRows || props.defaultAddedRows;\n    const getRowChanges = () => {\n      const { rowChanges: stateRowChanges } = this.state;\n      return stateRowChanges;\n    };\n    const getAddedRows = () => {\n      const { addedRows: stateAddedRows } = this.state;\n      return stateAddedRows;\n    };\n\n    this.state = {\n      addedRows,\n      rowChanges,\n      editingRowIds: props.editingRowIds || props.defaultEditingRowIds,\n      deletedRowIds: props.deletedRowIds || props.defaultDeletedRowIds,\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        editingRowIds: () => {\n          const { onEditingRowIdsChange } = this.props;\n          return onEditingRowIdsChange;\n        },\n        addedRows: () => {\n          const { onAddedRowsChange } = this.props;\n          return onAddedRowsChange;\n        },\n        rowChanges: () => {\n          const { onRowChangesChange } = this.props;\n          return onRowChangesChange;\n        },\n        deletedRowIds: () => {\n          const { onDeletedRowIdsChange } = this.props;\n          return onDeletedRowIdsChange;\n        },\n      },\n    );\n\n    this.startEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', startEditRows);\n    this.stopEditRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'editingRowIds', stopEditRows);\n\n    this.changeRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', changeRow);\n    this.cancelChangedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'rowChanges', cancelChanges);\n    this.commitChangedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({\n        changed: changedRowsByIds(getRowChanges(), rowIds),\n      });\n      this.cancelChangedRows({ rowIds });\n    };\n\n    this.addRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', addRow);\n    this.changeAddedRow = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', changeAddedRow);\n    this.cancelAddedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'addedRows', cancelAddedRows);\n    this.commitAddedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({\n        added: addedRowsByIds(getAddedRows(), rowIds),\n      });\n      this.cancelAddedRows({ rowIds });\n    };\n\n    this.deleteRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', deleteRows);\n    this.cancelDeletedRows = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'deletedRowIds', cancelDeletedRows);\n    this.commitDeletedRows = ({ rowIds }) => {\n      const { onCommitChanges } = this.props;\n      onCommitChanges({ deleted: rowIds });\n      this.cancelDeletedRows({ rowIds });\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      editingRowIds = prevState.editingRowIds,\n      rowChanges = prevState.rowChanges,\n      addedRows = prevState.addedRows,\n      deletedRowIds = prevState.deletedRowIds,\n    } = nextProps;\n\n    return {\n      editingRowIds,\n      rowChanges,\n      addedRows,\n      deletedRowIds,\n    };\n  }\n\n  render() {\n    const { createRowChange, columnExtensions, columnEditingEnabled } = this.props;\n    const {\n      editingRowIds, rowChanges, addedRows, deletedRowIds,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"EditingState\"\n      >\n        <Getter\n          name=\"createRowChange\"\n          value={createRowChangeGetter(createRowChange, columnExtensions)}\n        />\n\n        <Getter name=\"editingRowIds\" value={editingRowIds} />\n        <Action name=\"startEditRows\" action={this.startEditRows} />\n        <Action name=\"stopEditRows\" action={this.stopEditRows} />\n\n        <Getter name=\"rowChanges\" value={rowChanges} />\n        <Action name=\"changeRow\" action={this.changeRow} />\n        <Action name=\"cancelChangedRows\" action={this.cancelChangedRows} />\n        <Action name=\"commitChangedRows\" action={this.commitChangedRows} />\n\n        <Getter name=\"addedRows\" value={addedRows} />\n        <Action name=\"addRow\" action={this.addRow} />\n        <Action name=\"changeAddedRow\" action={this.changeAddedRow} />\n        <Action name=\"cancelAddedRows\" action={this.cancelAddedRows} />\n        <Action name=\"commitAddedRows\" action={this.commitAddedRows} />\n\n        <Getter name=\"deletedRowIds\" value={deletedRowIds} />\n        <Action name=\"deleteRows\" action={this.deleteRows} />\n        <Action name=\"cancelDeletedRows\" action={this.cancelDeletedRows} />\n        <Action name=\"commitDeletedRows\" action={this.commitDeletedRows} />\n\n        <Getter\n          name=\"isColumnEditingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnEditingEnabled)}\n        />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages grid rows' editing state. It arranges grid rows\n * by different lists depending on a row's state.\n * */\nexport const EditingState: React.ComponentType<EditingStateProps> = EditingStateBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper,\n} from '@devexpress/dx-react-core';\nimport { setCurrentPage, setPageSize } from '@devexpress/dx-grid-core';\nimport { PagingStateProps, PagingStateState } from '../types';\n\nclass PagingStateBase extends React.PureComponent<PagingStateProps, PagingStateState> {\n  static defaultProps = {\n    defaultPageSize: 10,\n    defaultCurrentPage: 0,\n  };\n  setCurrentPage: (payload: any) => void;\n  setPageSize: (payload: any) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentPage: props.currentPage || props.defaultCurrentPage,\n      pageSize: props.pageSize !== undefined ? props.pageSize : props.defaultPageSize,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        currentPage: () => {\n          const { onCurrentPageChange } = this.props;\n          return onCurrentPageChange;\n        },\n        pageSize: () => {\n          const { onPageSizeChange } = this.props;\n          return onPageSizeChange;\n        },\n      },\n    );\n\n    this.setCurrentPage = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'currentPage', setCurrentPage);\n    this.setPageSize = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'pageSize', setPageSize);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      currentPage = prevState.currentPage,\n      pageSize = prevState.pageSize,\n    } = nextProps;\n\n    return {\n      currentPage,\n      pageSize,\n    };\n  }\n\n  render() {\n    const { pageSize, currentPage } = this.state;\n\n    return (\n      <Plugin\n        name=\"PagingState\"\n      >\n        <Getter name=\"currentPage\" value={currentPage} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Action name=\"setCurrentPage\" action={this.setCurrentPage} />\n        <Action name=\"setPageSize\" action={this.setPageSize} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages the paging state. It controls the total page count depending on the\n * total row count and the specified page size, controls the currently selected page number\n * and changes it in response to the corresponding actions.\n * */\nexport const PagingState: React.ComponentType<PagingStateProps> = PagingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  paginatedRows, rowsWithPageHeaders, rowCount, currentPage,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedPagingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst rowsWithHeadersComputed = (\n  { rows, pageSize, getRowLevelKey }: Getters,\n) => rowsWithPageHeaders(rows, pageSize, getRowLevelKey);\nconst totalCountComputed = ({ rows }: Getters) => rowCount(rows);\nconst paginatedRowsComputed = (\n  { rows, pageSize, currentPage: page }: Getters,\n) => paginatedRows(rows, pageSize, page);\nconst currentPageComputed = (\n  { currentPage: page, totalCount, pageSize }: Getters, { setCurrentPage }: Actions,\n) => currentPage(page, totalCount, pageSize, setCurrentPage);\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IntegratedPagingBase extends React.PureComponent<IntegratedPagingProps> {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithHeadersComputed} />\n        <Getter name=\"totalCount\" computed={totalCountComputed} />\n        <Getter name=\"currentPage\" computed={currentPageComputed} />\n        <Getter name=\"rows\" computed={paginatedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that performs built-in data paging. It also changes the current page if the provided\n * one cannot be applied due to fewer available pages.\n * */\nexport const IntegratedPaging: React.ComponentType<IntegratedPagingProps> = IntegratedPagingBase;\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { CustomPagingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nclass CustomPagingBase extends React.PureComponent<CustomPagingProps> {\n  static defaultProps = {\n    totalCount: 0,\n  };\n\n  render() {\n    const { totalCount } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomPaging\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalCount\" value={totalCount} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows implementing a custom totalCount calculation logic. */\nexport const CustomPaging: React.ComponentType<CustomPagingProps> = CustomPagingBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, StateHelper, ActionFn, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnGrouping,\n  toggleExpandedGroups,\n  draftColumnGrouping,\n  cancelColumnGroupingDraft,\n  getColumnExtensionValueGetter,\n  adjustSortIndex,\n  ChangeGroupingPayload,\n  ToggleGroupPayload,\n  ChangeSortingPayload,\n} from '@devexpress/dx-grid-core';\nimport { GroupingStateProps, GroupingStateState } from '../types';\n\nconst dependencies = [\n  { name: 'SortingState', optional: true },\n];\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'groupingEnabled', defaultValue);\n\nclass GroupingStateBase extends React.PureComponent<GroupingStateProps, GroupingStateState> {\n  static defaultProps = {\n    defaultGrouping: [],\n    defaultExpandedGroups: [],\n    columnGroupingEnabled: true,\n  };\n  stateHelper: StateHelper;\n  draftColumnGrouping: ActionFn<ChangeGroupingPayload>;\n  toggleGroupExpanded: ActionFn<ToggleGroupPayload>;\n  cancelColumnGroupingDraft: ActionFn<void>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      grouping: props.grouping || props.defaultGrouping,\n      draftGrouping: null,\n      expandedGroups: props.expandedGroups || props.defaultExpandedGroups,\n    };\n\n    this.stateHelper = createStateHelper(\n      this,\n      {\n        grouping: () => {\n          const { onGroupingChange } = this.props;\n          return onGroupingChange;\n        },\n        expandedGroups: () => {\n          const { onExpandedGroupsChange } = this.props;\n          return onExpandedGroupsChange;\n        },\n      },\n    );\n\n    this.changeColumnGrouping = this.changeColumnGrouping.bind(this);\n    this.toggleGroupExpanded = this.stateHelper.applyReducer\n      .bind(this.stateHelper, toggleExpandedGroups);\n    this.draftColumnGrouping = this.stateHelper.applyReducer\n      .bind(this.stateHelper, draftColumnGrouping);\n    this.cancelColumnGroupingDraft = this.stateHelper.applyReducer\n      .bind(this.stateHelper, cancelColumnGroupingDraft);\n    this.changeColumnSorting = this.changeColumnSorting.bind(this);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      grouping = prevState.grouping,\n      expandedGroups = prevState.expandedGroups,\n    } = nextProps;\n\n    return {\n      grouping,\n      expandedGroups,\n    };\n  }\n\n  changeColumnSorting(\n    { columnName, keepOther, ...restParams }: ChangeSortingPayload,\n    { sorting }: Getters,\n    { changeColumnSorting }: Actions,\n  ) {\n    const { grouping } = this.state;\n    const groupingIndex = grouping\n      .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n    if (groupingIndex === -1) {\n      changeColumnSorting({\n        columnName,\n        keepOther: keepOther || grouping.map(columnGrouping => columnGrouping.columnName),\n        ...restParams,\n      });\n      return false;\n    }\n\n    const sortIndex = adjustSortIndex(groupingIndex, grouping, sorting);\n    changeColumnSorting({\n      columnName,\n      sortIndex,\n      keepOther: true,\n      ...restParams,\n    });\n    return false;\n  }\n\n  changeColumnGrouping(\n    { columnName, groupIndex }: ChangeGroupingPayload,\n    getters?: Getters,\n    actions?: Actions,\n  ) {\n    this.stateHelper.applyReducer(\n      changeColumnGrouping,\n      { columnName, groupIndex },\n      (nextState, state) => {\n        const { grouping } = nextState;\n        const { grouping: prevGrouping } = state;\n        const { sorting } = getters!;\n        const { changeColumnSorting } = actions!;\n\n        if (!sorting) return;\n\n        const columnSortingIndex = sorting\n          .findIndex(columnSorting => columnSorting.columnName === columnName);\n        const prevGroupingIndex = prevGrouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n        const groupingIndex = grouping\n          .findIndex(columnGrouping => columnGrouping.columnName === columnName);\n\n        if (columnSortingIndex === -1\n          || (prevGroupingIndex === prevGrouping.length - 1 && groupingIndex === -1)) return;\n\n        const sortIndex = adjustSortIndex(\n          groupingIndex === -1 ? grouping.length : groupingIndex,\n          grouping,\n          sorting,\n        );\n\n        if (columnSortingIndex === sortIndex) return;\n\n        changeColumnSorting({\n          sortIndex,\n          keepOther: true,\n          ...sorting[columnSortingIndex],\n        });\n      },\n    );\n  }\n\n  render() {\n    const { grouping, draftGrouping, expandedGroups } = this.state;\n    const { columnExtensions, columnGroupingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"GroupingState\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"grouping\" value={grouping} />\n        <Getter name=\"draftGrouping\" value={draftGrouping || grouping} />\n        <Getter\n          name=\"isColumnGroupingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnGroupingEnabled)}\n        />\n        <Action name=\"changeColumnGrouping\" action={this.changeColumnGrouping} />\n        <Action name=\"draftColumnGrouping\" action={this.draftColumnGrouping} />\n        <Action name=\"cancelColumnGroupingDraft\" action={this.cancelColumnGroupingDraft} />\n\n        <Getter name=\"expandedGroups\" value={expandedGroups} />\n        <Action name=\"toggleGroupExpanded\" action={this.toggleGroupExpanded} />\n\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that manages the grouping state. It lists columns used for grouping and stores\n * information about expanded/collapsed groups.\n * */\nexport const GroupingState: React.ComponentType<GroupingStateProps> = GroupingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  groupedRows,\n  expandedGroupRows,\n  getColumnExtension,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows }: Getters,\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups }: Getters,\n) => expandedGroupRows(rows, grouping, expandedGroups);\n\nclass IntegratedGroupingBase extends React.PureComponent<IntegratedGroupingProps> {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCriteria = columnName => (getColumnExtension(\n      columnExtensions, columnName,\n    ) as any).criteria;\n\n    const groupedRowsComputed = (\n      { rows, grouping, getCellValue }: Getters,\n    ) => groupedRows(rows, grouping, getCellValue, getColumnCriteria);\n\n    return (\n      <Plugin\n        name=\"IntegratedGrouping\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in grouping and group expanding/collapsing. */\nexport const IntegratedGrouping: React.ComponentType<IntegratedGroupingProps> = IntegratedGroupingBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  groupRowChecker,\n  groupRowLevelKeyGetter,\n  groupCollapsedRowsGetter,\n  customGroupingRowIdGetter,\n  customGroupedRows,\n  expandedGroupRows,\n} from '@devexpress/dx-grid-core';\nimport { CustomGroupingProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n];\n\nconst getCollapsedRowsComputed = (\n  { getCollapsedRows }: Getters,\n) => groupCollapsedRowsGetter(getCollapsedRows);\nconst expandedGroupedRowsComputed = (\n  { rows, grouping, expandedGroups }: Getters,\n) => expandedGroupRows(rows, grouping, expandedGroups);\nconst getRowIdComputed = ({ getRowId, rows }: Getters) => customGroupingRowIdGetter(getRowId, rows);\n\nclass CustomGroupingBase extends React.PureComponent<CustomGroupingProps> {\n  render() {\n    const {\n      getChildGroups,\n      grouping: appliedGrouping,\n      expandedGroups: appliedExpandedGroups,\n    } = this.props;\n    const groupedRowsComputed = (\n      { rows, grouping }: Getters,\n    ) => customGroupedRows(rows, grouping, getChildGroups);\n\n    return (\n      <Plugin\n        name=\"CustomGrouping\"\n        dependencies={pluginDependencies}\n      >\n        {appliedGrouping && (\n          <Getter name=\"grouping\" value={appliedGrouping} />\n        )}\n        {appliedExpandedGroups && (\n          <Getter name=\"expandedGroups\" value={appliedExpandedGroups} />\n        )}\n        <Getter name=\"isGroupRow\" value={groupRowChecker} />\n        <Getter name=\"getRowLevelKey\" value={groupRowLevelKeyGetter} />\n        <Getter name=\"getCollapsedRows\" computed={getCollapsedRowsComputed} />\n        <Getter name=\"rows\" computed={groupedRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"rows\" computed={expandedGroupedRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that converts custom formatted grouped data to a supported format and performs local group expanding/collapsing. */\nexport const CustomGrouping: React.ComponentType<CustomGroupingProps> = CustomGroupingBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleSelection } from '@devexpress/dx-grid-core';\nimport { SelectionStateProps, SelectionStateState } from '../types';\n\nclass SelectionStateBase extends React.PureComponent<SelectionStateProps, SelectionStateState> {\n  static defaultProps = {\n    defaultSelection: [],\n  };\n  toggleSelection: ActionFn<any>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selection: props.selection || props.defaultSelection,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        selection: () => {\n          const { onSelectionChange } = this.props;\n          return onSelectionChange;\n        },\n      },\n    );\n\n    this.toggleSelection = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'selection', toggleSelection);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      selection = prevState.selection,\n    } = nextProps;\n\n    return {\n      selection,\n    };\n  }\n\n  render() {\n    const { selection } = this.state;\n\n    return (\n      <Plugin\n        name=\"SelectionState\"\n      >\n        <Getter name=\"selection\" value={selection} />\n        <Action name=\"toggleSelection\" action={this.toggleSelection} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the selection state. */\nexport const SelectionState: React.ComponentType<SelectionStateProps> = SelectionStateBase;\n","import * as React from 'react';\nimport { Getter, Action, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  rowsWithAvailableToSelect,\n  someSelected,\n  allSelected,\n  unwrapSelectedRows,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedSelectionProps } from '../types';\n\nconst rowsWithAvailableToSelectComputed = (\n  { rows, getRowId, isGroupRow }: Getters,\n) => rowsWithAvailableToSelect(rows, getRowId, isGroupRow);\nconst allSelectedComputed = ({ rows, selection }: Getters) => allSelected(rows, selection);\nconst someSelectedComputed = ({ rows, selection }: Getters) => someSelected(rows, selection);\nconst selectAllAvailableComputed = (\n  { rows: { availableToSelect } }: Getters,\n) => !!availableToSelect.length;\n\nconst toggleSelectAll = (\n  state, { rows: { availableToSelect } }: Getters, { toggleSelection }: Actions,\n) => {\n  toggleSelection({ state, rowIds: availableToSelect });\n};\nconst unwrapRowsComputed = ({ rows }: Getters) => unwrapSelectedRows(rows);\n\nconst pluginDependencies = [\n  { name: 'SelectionState' },\n];\n\n// eslint-disable-next-line react/prefer-stateless-function\nclass IntegratedSelectionBase extends React.PureComponent<IntegratedSelectionProps> {\n  render() {\n    return (\n      <Plugin\n        name=\"IntegratedSelection\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsWithAvailableToSelectComputed} />\n        <Getter name=\"allSelected\" computed={allSelectedComputed} />\n        <Getter name=\"someSelected\" computed={someSelectedComputed} />\n        <Getter name=\"selectAllAvailable\" computed={selectAllAvailableComputed} />\n        <Action name=\"toggleSelectAll\" action={toggleSelectAll} />\n        <Getter name=\"rows\" computed={unwrapRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that performs built-in selection. */\nexport const IntegratedSelection: React.ComponentType<IntegratedSelectionProps> = IntegratedSelectionBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport {\n  changeColumnSorting,\n  getColumnExtensionValueGetter,\n  getPersistentSortedColumns,\n  calculateKeepOther,\n  ChangeSortingPayload,\n} from '@devexpress/dx-grid-core';\nimport { SortingStateProps, SortingStateState } from '../types';\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'sortingEnabled', defaultValue);\n\nclass SortingStateBase extends React.PureComponent<SortingStateProps, SortingStateState> {\n  static defaultProps = {\n    defaultSorting: [],\n    columnSortingEnabled: true,\n  };\n  changeColumnSorting: ActionFn<ChangeSortingPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sorting: props.sorting || props.defaultSorting,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        sorting: () => {\n          const { onSortingChange } = this.props;\n          return onSortingChange;\n        },\n      },\n    );\n\n    this.changeColumnSorting = stateHelper.applyReducer\n      .bind(stateHelper, (prevState, payload) => {\n        const { sorting = prevState.sorting } = this.props;\n        const persistentSortedColumns = getPersistentSortedColumns(sorting, props.columnExtensions);\n        const keepOther = calculateKeepOther(\n          prevState.sorting, payload.keepOther, persistentSortedColumns,\n        );\n        return changeColumnSorting(prevState, { ...payload, keepOther });\n      });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      sorting = prevState.sorting,\n    } = nextProps;\n\n    return {\n      sorting,\n    };\n  }\n\n  render() {\n    const { sorting } = this.state;\n    const { columnExtensions, columnSortingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"SortingState\"\n      >\n        <Getter name=\"sorting\" value={sorting} />\n        <Getter\n          name=\"isColumnSortingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnSortingEnabled)}\n        />\n        <Action name=\"changeColumnSorting\" action={this.changeColumnSorting} />\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that manages the sorting state. It controls the list of columns that participate in sorting. */\nexport const SortingState: React.ComponentType<SortingStateProps> = SortingStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport { sortedRows, getColumnExtension } from '@devexpress/dx-grid-core';\nimport { IntegratedSortingProps, IntegratedSorting as IntegratedSortingNs } from '../types';\n\nconst pluginDependencies = [\n  { name: 'SortingState' },\n];\n\nclass IntegratedSortingBase extends React.PureComponent<IntegratedSortingProps> {\n  render() {\n    const { columnExtensions } = this.props;\n    const getColumnCompare = columnName => (\n      getColumnExtension(columnExtensions, columnName) as IntegratedSortingNs.ColumnExtension\n    ).compare!;\n\n    const rowsComputed = (\n      { rows, sorting, getCellValue, isGroupRow, getRowLevelKey }: Getters,\n    ) => sortedRows(rows, sorting, getCellValue, getColumnCompare, isGroupRow, getRowLevelKey);\n\n    return (\n      <Plugin\n        name=\"IntegratedSorting\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={rowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that performs built-in data sorting. */\nexport const IntegratedSorting: React.ComponentType<IntegratedSortingProps> = IntegratedSortingBase;\n","import * as React from 'react';\nimport {\n  Plugin, Getter, Template, TemplatePlaceholder,\n  TemplateConnector,\n  DragDropProvider as DragDropProviderCore,\n} from '@devexpress/dx-react-core';\nimport { DragDropProviderProps, DragDropProviderState } from '../types';\n\nconst getTargetColumns = (payload, columns) => payload\n  .filter(item => item.type === 'column')\n  .map(item => columns.find(column => column.name === item.columnName));\n\n// tslint:disable-next-line: max-line-length\nclass DragDropProviderBase extends React.PureComponent<DragDropProviderProps, DragDropProviderState> {\n  static components = {\n    containerComponent: 'Container',\n    columnComponent: 'Column',\n  };\n  change: (object) => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      payload: null,\n      clientOffset: null,\n    };\n\n    this.change = ({ payload, clientOffset }) => this.setState({ payload, clientOffset });\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      columnComponent: Column,\n    } = this.props;\n    const {\n      payload,\n      clientOffset,\n    } = this.state;\n\n    return (\n      <Plugin\n        name=\"DragDropProvider\"\n      >\n        <Getter name=\"draggingEnabled\" value />\n        <Template name=\"root\">\n          <DragDropProviderCore\n            onChange={this.change}\n          >\n            <TemplatePlaceholder />\n          </DragDropProviderCore>\n          {payload && (\n            <TemplateConnector>\n              {({ columns }) => (\n                <Container\n                  clientOffset={clientOffset!}\n                >\n                  {getTargetColumns(payload, columns)\n                    .map(column => (\n                      <Column\n                        key={column.name}\n                        column={column}\n                      />\n                    ))\n                  }\n                </Container>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that implements the drag-and-drop functionality and visualizes columns that are being dragged. */\nexport const DragDropProvider: React.ComponentType<DragDropProviderProps> = DragDropProviderBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Plugin,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  DropTarget,\n  withComponents,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_DATA_TYPE,\n  TABLE_REORDERING_TYPE,\n  orderedColumns,\n  changeColumnOrder,\n  getTableTargetColumnIndex,\n  tableHeaderRowsWithReordering,\n  draftOrder as draftOrderComputed,\n  TargetColumnGeometry,\n  TableColumn,\n} from '@devexpress/dx-grid-core';\nimport {\n  Table as TableNS, CellDimensionsGetter, TableColumnReorderingProps,\n  DragOverArgs, TableColumnReorderingState,\n} from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n  { name: 'DragDropProvider', optional: true },\n];\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableHeaderRowsWithReordering(tableHeaderRows);\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnReorderingRaw extends React.PureComponent<TableColumnReorderingProps, TableColumnReorderingState> {\n  static defaultProps = {\n    defaultOrder: [],\n  };\n  static components = {\n    tableContainerComponent: 'TableContainer',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n  cellDimensionGetters: { [colName: string]: CellDimensionsGetter } = {};\n  cellDimensions: TargetColumnGeometry[] = [];\n  onOver: (arg: DragOverArgs) => void;\n  onLeave: () => void;\n  onDrop: () => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      order: props.defaultOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    };\n\n    this.onOver = this.handleOver.bind(this);\n    this.onLeave = this.handleLeave.bind(this);\n    this.onDrop = this.handleDrop.bind(this);\n  }\n\n  getState() {\n    const { order: orderState } = this.state;\n    const {\n      order = orderState,\n    } = this.props;\n    return {\n      ...this.state,\n      order,\n    };\n  }\n\n  getDraftOrder() {\n    const { order, sourceColumnIndex, targetColumnIndex } = this.getState();\n    return draftOrderComputed(order, sourceColumnIndex, targetColumnIndex);\n  }\n\n  getAvailableColumns() {\n    return this.getDraftOrder()\n      .filter(columnName => !!this.cellDimensionGetters[columnName]);\n  }\n\n  cacheCellDimensions() {\n    this.cellDimensions = (this.cellDimensions && this.cellDimensions.length)\n      ? this.cellDimensions\n      : this.getAvailableColumns()\n        .map(columnName => this.cellDimensionGetters[columnName]());\n  }\n\n  resetCellDimensions() {\n    this.cellDimensions = [];\n  }\n\n  ensureCellDimensionGetters(tableColumns: ReadonlyArray<TableColumn>) {\n    Object.keys(this.cellDimensionGetters)\n      .forEach((columnName) => {\n        const columnIndex = tableColumns\n          .findIndex(({ type, column }) => type === TABLE_DATA_TYPE && column!.name === columnName);\n        if (columnIndex === -1) {\n          delete this.cellDimensionGetters[columnName];\n        }\n      });\n  }\n\n// tslint:disable-next-line: max-line-length\n  storeCellDimensionsGetter(tableColumn: Readonly<TableColumn>, getter: CellDimensionsGetter, tableColumns: ReadonlyArray<TableColumn>) {\n    if (tableColumn.type === TABLE_DATA_TYPE) {\n      this.cellDimensionGetters[tableColumn.column!.name] = getter;\n    }\n    this.ensureCellDimensionGetters(tableColumns);\n  }\n\n  handleOver({ payload, clientOffset: { x } }: DragOverArgs) {\n    const sourceColumnName = payload[0].columnName;\n    const availableColumns = this.getAvailableColumns();\n    const relativeSourceColumnIndex = availableColumns.indexOf(sourceColumnName);\n\n    if (relativeSourceColumnIndex === -1) return;\n\n    this.cacheCellDimensions();\n    const cellDimensions = this.cellDimensions;\n\n    const overlappedColumns = cellDimensions\n      .filter(({ left, right }) => left <= x && x <= right);\n\n    if (overlappedColumns.length > 1) return;\n\n    const relativeTargetIndex = getTableTargetColumnIndex(\n      cellDimensions,\n      relativeSourceColumnIndex,\n      x,\n    );\n\n    if (relativeTargetIndex === -1) return;\n\n    const {\n      sourceColumnIndex: prevSourceColumnIndex,\n      targetColumnIndex: prevTargetColumnIndex,\n    } = this.getState();\n    const draftOrder = this.getDraftOrder();\n    const targetColumnIndex = draftOrder.indexOf(availableColumns[relativeTargetIndex]);\n\n    if (targetColumnIndex === prevTargetColumnIndex) return;\n\n    const sourceColumnIndex = prevSourceColumnIndex === -1\n      ? draftOrder.indexOf(sourceColumnName)\n      : prevSourceColumnIndex;\n\n    this.setState({\n      sourceColumnIndex,\n      targetColumnIndex,\n    });\n  }\n\n  handleLeave() {\n    this.setState({\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    this.resetCellDimensions();\n  }\n\n  handleDrop() {\n    const { sourceColumnIndex, targetColumnIndex, order } = this.getState();\n    const { onOrderChange } = this.props;\n\n    if (sourceColumnIndex === -1 && targetColumnIndex === -1) return;\n\n    const nextOrder = changeColumnOrder(order, {\n      sourceColumnName: order[sourceColumnIndex],\n      targetColumnName: order[targetColumnIndex],\n    }) as string[];\n\n    this.setState({\n      order: nextOrder,\n      sourceColumnIndex: -1,\n      targetColumnIndex: -1,\n    });\n\n    if (onOrderChange) {\n      onOrderChange(nextOrder);\n    }\n\n    this.resetCellDimensions();\n  }\n\n  render() {\n    const {\n      tableContainerComponent: Container,\n      rowComponent: Row,\n      cellComponent: Cell,\n    } = this.props;\n\n    const columnsComputed = (\n      { tableColumns }: Getters,\n    ) => orderedColumns(tableColumns, this.getDraftOrder());\n\n    this.cellDimensionGetters = {};\n\n    return (\n      <Plugin\n        name=\"TableColumnReordering\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={columnsComputed} />\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ draggingEnabled }) => (\n                <Container\n                  {...params}\n                  onOver={this.onOver}\n                  onLeave={this.onLeave}\n                  onDrop={this.onDrop}\n                  draggingEnabled={draggingEnabled}\n                >\n                  <TemplatePlaceholder />\n                </Container>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: Getters) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {params => (\n            <Row {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: Getters) => tableRow.type === TABLE_REORDERING_TYPE}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }: Getters) => (\n                <Cell\n                  {...params}\n                  getCellDimensions={getter => this.storeCellDimensionsGetter(\n                    params.tableColumn, getter, tableColumns,\n                  )}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nconst TableContainer = ({\n  onOver, onLeave, onDrop, children, draggingEnabled,\n}) => (\n  draggingEnabled ? (\n    <DropTarget\n      onOver={onOver}\n      onLeave={onLeave}\n      onDrop={onDrop}\n    >\n      {children}\n    </DropTarget>\n  ) : children\n);\n\n/** A plugin that manages the displayed columns' order. */\nexport const TableColumnReordering: React.ComponentType<TableColumnReorderingProps>\n  = withComponents({ TableContainer })(TableColumnReorderingRaw);\n","import * as React from 'react';\nimport { memoize, getMessagesFormatter, MemoizedComputed } from '@devexpress/dx-core';\nimport {\n  Getter,\n  Template,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Plugin,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithDataRows,\n  tableRowsWithDataRows,\n  tableCellColSpanGetter,\n  isNoDataTableRow,\n  isNoDataTableCell,\n  isDataTableCell,\n  isHeaderStubTableCell,\n  isDataTableRow,\n  TABLE_DATA_TYPE,\n  TABLE_NODATA_TYPE,\n  GridColumnExtension,\n} from '@devexpress/dx-grid-core';\nimport { TableProps, Table as TableNS, TableLayoutProps } from '../types';\n\nconst RowPlaceholder = props => <TemplatePlaceholder name=\"tableRow\" params={props} />;\nconst CellPlaceholder = props => <TemplatePlaceholder name=\"tableCell\" params={props} />;\n\nconst tableHeaderRows = [];\nconst tableBodyRowsComputed = ({ rows, getRowId, isDataLoading }: Getters) => (\n  tableRowsWithDataRows(rows, getRowId, isDataLoading)\n);\nconst tableFooterRows = [];\n\nconst defaultMessages = {\n  noData: 'No data',\n};\n\nclass TableBase extends React.PureComponent<TableProps> {\n  static COLUMN_TYPE = TABLE_DATA_TYPE;\n  static ROW_TYPE = TABLE_DATA_TYPE;\n  static NODATA_ROW_TYPE = TABLE_NODATA_TYPE;\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    tableComponent: 'Table',\n    headComponent: 'TableHead',\n    bodyComponent: 'TableBody',\n    footerComponent: 'TableFooter',\n    containerComponent: 'Container',\n    layoutComponent: 'Layout',\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    noDataRowComponent: 'NoDataRow',\n    noDataCellComponent: 'NoDataCell',\n    stubRowComponent: 'StubRow',\n    stubCellComponent: 'StubCell',\n    stubHeaderCellComponent: 'StubHeaderCell',\n  };\n\n  tableColumnsComputed: MemoizedComputed<GridColumnExtension[], typeof tableColumnsWithDataRows>;\n\n  constructor(props) {\n    super(props);\n\n    this.tableColumnsComputed = memoize(\n      (columnExtensions: GridColumnExtension[]) => ({\n        columns,\n      }) => tableColumnsWithDataRows(columns, columnExtensions),\n    );\n  }\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      cellComponent: Cell,\n      rowComponent: Row,\n      noDataRowComponent: NoDataRow,\n      noDataCellComponent: NoDataCell,\n      stubRowComponent: StubRow,\n      stubCellComponent: StubCell,\n      stubHeaderCellComponent: StubHeaderCell,\n      columnExtensions,\n      messages,\n      containerComponent,\n      tableComponent,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const tableColumnsComputed = this.tableColumnsComputed(columnExtensions!);\n\n    return (\n      <Plugin\n        name=\"Table\"\n      >\n        <Getter name=\"tableHeaderRows\" value={tableHeaderRows} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" value={tableFooterRows} />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"getTableCellColSpan\" value={tableCellColSpanGetter} />\n        <Getter name=\"visibleBoundaries\" value={[]} />\n\n        <Template name=\"body\">\n          <TemplatePlaceholder name=\"table\" />\n        </Template>\n        <Template name=\"table\">\n          <TemplateConnector>\n            {({\n              tableHeaderRows: headerRows,\n              tableBodyRows: bodyRows,\n              tableFooterRows: footerRows,\n              tableColumns: columns,\n              getTableCellColSpan,\n            }) => (\n              <TemplatePlaceholder\n                name=\"tableLayout\"\n                params={{\n                  tableComponent,\n                  headComponent,\n                  bodyComponent,\n                  footerComponent,\n                  containerComponent,\n                  headerRows,\n                  bodyRows,\n                  footerRows,\n                  columns,\n                  rowComponent: RowPlaceholder,\n                  cellComponent: CellPlaceholder,\n                  getCellColSpan: getTableCellColSpan,\n                }}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n        <Template name=\"tableLayout\">\n          {(params: TableLayoutProps) => (\n            <Layout {...params} />\n          )}\n        </Template>\n        <Template name=\"tableCell\">\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {(\n                { tableHeaderRows: headerRows },\n              ) => (isHeaderStubTableCell(params.tableRow, headerRows)\n                ? <StubHeaderCell {...params} />\n                : <StubCell {...params} />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isDataTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ getCellValue }) => {\n                const columnName = params.tableColumn.column!.name;\n                const value = getCellValue(params.tableRow.row, columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      value,\n                      row: params.tableRow.row,\n                      column: params.tableColumn.column,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column!}\n                        value={value}\n                      >\n                        {content}\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isNoDataTableRow(tableRow)}\n        >\n          {(params: TableNS.CellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isNoDataTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <NoDataCell\n                      {...params}\n                      getMessage={getMessage}\n                    />\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template name=\"tableRow\">\n          {(params: TableNS.RowProps) => (\n            <StubRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n        >\n          {(params: TableNS.RowProps) => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isNoDataTableRow(tableRow)}\n        >\n          {(params: TableNS.RowProps) => <NoDataRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders Grid data as a table. This plugin enables you to customize\n * table rows and columns, and contains the Table Row and Table Cell components\n * that can be extended by other plugins\n * */\nexport const Table: React.ComponentType<TableProps> & {\n  /** The data column type's indentifier. */\n  COLUMN_TYPE: symbol;\n  /** The data row type's indentifier. */\n  ROW_TYPE: symbol;\n  /** The nodata row type's indentifier. */\n  NODATA_ROW_TYPE: symbol;\n} = TableBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_SELECT_TYPE,\n  tableColumnsWithSelection,\n  isSelectTableCell,\n  isSelectAllTableCell,\n  isDataTableRow,\n} from '@devexpress/dx-grid-core';\nimport { TableSelectionProps, TableCellProps, TableRowProps } from '../types';\n\nclass TableSelectionBase extends React.PureComponent<TableSelectionProps> {\n  static defaultProps = {\n    highlightRow: false,\n    selectByRowClick: false,\n    showSelectAll: false,\n    showSelectionColumn: true,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n  };\n  static COLUMN_TYPE = TABLE_SELECT_TYPE;\n\n  render() {\n    const {\n      highlightRow,\n      selectByRowClick,\n      showSelectionColumn,\n      showSelectAll,\n      headerCellComponent: HeaderCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      selectionColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithSelection(tableColumns, selectionColumnWidth);\n\n    return (\n      <Plugin\n        name=\"TableSelection\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SelectionState' },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n        ]}\n      >\n        {showSelectionColumn && (\n          <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        )}\n\n        {(showSelectionColumn && showSelectAll) && (\n          <Template\n            name=\"tableCell\"\n            predicate={({\n              tableRow, tableColumn,\n            }: any) => isSelectAllTableCell(tableRow, tableColumn)}\n          >\n            {(params: TableCellProps) => (\n              <TemplateConnector>\n                {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                  <HeaderCell\n                    {...params}\n                    disabled={!selectAllAvailable}\n                    allSelected={allSelected}\n                    someSelected={someSelected}\n                    onToggle={select => toggleSelectAll(select)}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {showSelectionColumn && (\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow, tableColumn }: any) => isSelectTableCell(tableRow, tableColumn)}\n          >\n            {(params: TableCellProps) => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                    selected={selection.indexOf(params.tableRow.rowId) !== -1}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n        {(highlightRow || selectByRowClick) && (\n          <Template\n            name=\"tableRow\"\n            predicate={({ tableRow }: any) => !!isDataTableRow(tableRow)}\n          >\n            {(params: TableRowProps) => (\n              <TemplateConnector>\n                {({ selection }, { toggleSelection }) => (\n                  <Row\n                    {...params}\n                    selectByRowClick={selectByRowClick}\n                    selected={highlightRow && selection.indexOf(params.tableRow.rowId) !== -1}\n                    onToggle={() => toggleSelection({ rowIds: [params.tableRow.rowId] })}\n                  />\n                )}\n              </TemplateConnector>\n            )}\n          </Template>\n        )}\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that visualizes table rows' selection state by rendering selection checkboxes\n * and highlighting the selected rows.\n * */\nexport const TableSelection: React.ComponentType<TableSelectionProps> & {\n  /** The selection column type's indentifier. */\n  COLUMN_TYPE: symbol;\n} = TableSelectionBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleDetailRowExpanded, ToggleRowPayload } from '@devexpress/dx-grid-core';\nimport { RowDetailStateProps, RowDetailStateState } from '../types';\n\n// tslint:disable-next-line: max-line-length\nclass RowDetailStateBase extends React.PureComponent<RowDetailStateProps, RowDetailStateState> {\n  static defaultProps = {\n    defaultExpandedRowIds: [],\n  };\n  toggleDetailRowExpanded: ActionFn<ToggleRowPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => {\n          const { onExpandedRowIdsChange } = this.props;\n          return onExpandedRowIdsChange;\n        },\n      },\n    );\n\n    this.toggleDetailRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleDetailRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"RowDetailState\"\n      >\n        <Getter name=\"expandedDetailRowIds\" value={expandedRowIds} />\n        <Action name=\"toggleDetailRowExpanded\" action={this.toggleDetailRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the expanded state for table row details. */\nexport const RowDetailState: React.ComponentType<RowDetailStateProps> = RowDetailStateBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithExpandedDetail,\n  tableDetailCellColSpanGetter,\n  isDetailRowExpanded,\n  tableColumnsWithDetail,\n  isDetailToggleTableCell,\n  isDetailTableRow,\n  isDetailTableCell,\n  TABLE_DETAIL_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableRowDetailProps, TableCellProps, TableRowProps } from '../types';\n\nconst getCellColSpanComputed = (\n  { getTableCellColSpan }: Getters,\n) => tableDetailCellColSpanGetter(getTableCellColSpan);\n\nconst pluginDependencies = [\n  { name: 'RowDetailState' },\n  { name: 'Table' },\n];\n\nclass TableRowDetailBase extends React.PureComponent<TableRowDetailProps> {\n  static ROW_TYPE = TABLE_DETAIL_TYPE;\n  static COLUMN_TYPE = TABLE_DETAIL_TYPE;\n  static defaultProps = {\n    contentComponent: () => null,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    toggleCellComponent: 'ToggleCell',\n  };\n\n  render() {\n    const {\n      rowHeight,\n      contentComponent: Content,\n      toggleCellComponent: ToggleCell,\n      cellComponent: Cell,\n      rowComponent: Row,\n      toggleColumnWidth,\n    } = this.props;\n\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithDetail(tableColumns, toggleColumnWidth);\n    const tableBodyRowsComputed = (\n      { tableBodyRows, expandedDetailRowIds }: Getters,\n    ) => tableRowsWithExpandedDetail(tableBodyRows, expandedDetailRowIds, rowHeight!);\n\n    return (\n      <Plugin\n        name=\"TableRowDetail\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isDetailToggleTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ expandedDetailRowIds }, { toggleDetailRowExpanded }) => (\n                <ToggleCell\n                  {...params}\n                  row={params.tableRow.row}\n                  expanded={isDetailRowExpanded(expandedDetailRowIds, params.tableRow.rowId!)}\n                  onToggle={() => toggleDetailRowExpanded({ rowId: params.tableRow.rowId })}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isDetailTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ tableColumns }) => {\n                if (isDetailTableCell(params.tableColumn, tableColumns)) {\n                  return (\n                    <Cell\n                      {...params}\n                      row={params.tableRow.row}\n                    >\n                      {Content && <Content row={params.tableRow.row} />}\n                    </Cell>\n                  );\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isDetailTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <Row\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders detail rows. */\nexport const TableRowDetail: React.ComponentType<TableRowDetailProps> & {\n  /** The detail column type's identifier. */\n  COLUMN_TYPE: symbol;\n  /** The detail row type's indentifier. */\n  ROW_TYPE: symbol;\n} = TableRowDetailBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplatePlaceholder, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithGrouping,\n  tableRowsWithGrouping,\n  tableGroupCellColSpanGetter,\n  isGroupTableCell,\n  isGroupIndentTableCell,\n  isGroupTableRow,\n  TABLE_GROUP_TYPE,\n} from '@devexpress/dx-grid-core';\nimport {\n  TableGroupRowProps, ShowColumnWhenGroupedGetterFn, TableCellProps, TableRowProps,\n} from '../types';\n\nconst pluginDependencies = [\n  { name: 'GroupingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'TableSelection', optional: true },\n];\n\nconst tableBodyRowsComputed = (\n  { tableBodyRows, isGroupRow }: Getters,\n) => tableRowsWithGrouping(tableBodyRows, isGroupRow);\nconst getCellColSpanComputed = (\n  { getTableCellColSpan }: Getters,\n) => tableGroupCellColSpanGetter(getTableCellColSpan);\n\nconst showColumnWhenGroupedGetter: ShowColumnWhenGroupedGetterFn = (\n  showColumnsWhenGrouped, columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    acc[columnExtension.columnName] = columnExtension.showWhenGrouped;\n    return acc;\n  }, {});\n\n  return columnName => map[columnName] || showColumnsWhenGrouped;\n};\n\nclass TableGroupRowBase extends React.PureComponent<TableGroupRowProps> {\n  static ROW_TYPE = TABLE_GROUP_TYPE;\n  static COLUMN_TYPE = TABLE_GROUP_TYPE;\n  static defaultProps = {\n    showColumnsWhenGrouped: false,\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    iconComponent: 'Icon',\n  };\n\n  render() {\n    const {\n      cellComponent: GroupCell,\n      contentComponent: Content,\n      iconComponent: Icon,\n      rowComponent: GroupRow,\n      indentCellComponent: GroupIndentCell,\n      indentColumnWidth,\n      showColumnsWhenGrouped,\n      columnExtensions,\n    } = this.props;\n\n    const tableColumnsComputed = ({\n      columns, tableColumns, grouping, draftGrouping,\n    }: Getters) => tableColumnsWithGrouping(\n      columns,\n      tableColumns,\n      grouping,\n      draftGrouping,\n      indentColumnWidth,\n      showColumnWhenGroupedGetter(showColumnsWhenGrouped!, columnExtensions),\n    );\n\n    return (\n      <Plugin\n        name=\"TableGroupRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"getTableCellColSpan\" computed={getCellColSpanComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => isGroupTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ grouping, expandedGroups }, { toggleGroupExpanded }) => {\n                if (isGroupTableCell(params.tableRow, params.tableColumn)) {\n                  return (\n                    <TemplatePlaceholder\n                      name=\"valueFormatter\"\n                      params={{\n                        column: params.tableColumn.column,\n                        value: params.tableRow.row.value,\n                      }}\n                    >\n                      {content => (\n                        <GroupCell\n                          {...params}\n                          contentComponent={Content}\n                          iconComponent={Icon}\n                          row={params.tableRow.row}\n                          column={params.tableColumn.column!}\n                          expanded={expandedGroups.indexOf(params.tableRow.row.compoundKey) !== -1}\n                          onToggle={() => toggleGroupExpanded(\n                            { groupKey: params.tableRow.row.compoundKey },\n                          )}\n                        >\n                          {content}\n                        </GroupCell>\n                      )}\n                    </TemplatePlaceholder>\n                  );\n                }\n                if (isGroupIndentTableCell(params.tableRow, params.tableColumn, grouping)) {\n                  if (GroupIndentCell) {\n                    return (\n                      <GroupIndentCell\n                        {...params}\n                        row={params.tableRow.row}\n                        column={params.tableColumn.column!}\n                      />\n                    );\n                  }\n                  return <TemplatePlaceholder />;\n                }\n                return null;\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => isGroupTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <GroupRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders group rows and enables them to expand and collapse. */\nexport const TableGroupRow: React.ComponentType<TableGroupRowProps> & {\n  /** The group column type's identifier. */\n  COLUMN_TYPE: symbol;\n  /** The group row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableGroupRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin, TemplateConnector, TemplatePlaceholder, Getters,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  getColumnSortingDirection,\n  tableRowsWithHeading,\n  isHeadingTableCell,\n  isHeadingTableRow,\n  TABLE_DATA_TYPE,\n  TABLE_HEADING_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableHeaderRowProps, TableCellProps, TableRowProps } from '../types';\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableRowsWithHeading(tableHeaderRows || []);\n\nclass TableHeaderRowBase extends React.PureComponent<TableHeaderRowProps> {\n  static ROW_TYPE = TABLE_HEADING_TYPE;\n  static defaultProps = {\n    showSortingControls: false,\n    showGroupingControls: false,\n    messages: {},\n  };\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    contentComponent: 'Content',\n    sortLabelComponent: 'SortLabel',\n    titleComponent: 'Title',\n    groupButtonComponent: 'GroupButton',\n  };\n\n  render() {\n    const {\n      showSortingControls,\n      showGroupingControls,\n      cellComponent: HeaderCell,\n      rowComponent: HeaderRow,\n      contentComponent: Content,\n      sortLabelComponent: SortLabel,\n      groupButtonComponent: GroupButton,\n      titleComponent: Title,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter(messages);\n\n    return (\n      <Plugin\n        name=\"TableHeaderRow\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'SortingState', optional: !showSortingControls },\n          { name: 'GroupingState', optional: !showGroupingControls },\n          { name: 'DragDropProvider', optional: true },\n          { name: 'TableColumnResizing', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                sorting, tableColumns, draggingEnabled, tableColumnResizingEnabled,\n                isColumnSortingEnabled, isColumnGroupingEnabled,\n              }, {\n                changeColumnSorting, changeColumnGrouping,\n                changeTableColumnWidth, draftTableColumnWidth, cancelTableColumnWidthDraft,\n              }) => {\n                const { name: columnName, title: columnTitle } = params.tableColumn.column!;\n                const atLeastOneDataColumn = tableColumns\n                  .filter(({ type }) => type === TABLE_DATA_TYPE).length > 1;\n                const sortingEnabled = isColumnSortingEnabled\n                  && isColumnSortingEnabled(columnName);\n                const groupingEnabled = isColumnGroupingEnabled\n                  && isColumnGroupingEnabled(columnName)\n                  && atLeastOneDataColumn;\n\n                return (\n                  <HeaderCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                    draggingEnabled={draggingEnabled && atLeastOneDataColumn}\n                    resizingEnabled={tableColumnResizingEnabled}\n                    onWidthChange={({ shift }) => changeTableColumnWidth({ columnName, shift })}\n                    onWidthDraft={({ shift }) => draftTableColumnWidth({ columnName, shift })}\n                    onWidthDraftCancel={() => cancelTableColumnWidthDraft()}\n                    // @deprecated\n                    sortingEnabled={sortingEnabled}\n                    // @deprecated\n                    groupingEnabled={groupingEnabled}\n                    // @deprecated\n                    showSortingControls={showSortingControls!}\n                    // @deprecated\n                    showGroupingControls={showGroupingControls!}\n                    // @deprecated\n                    sortingDirection={showSortingControls && sorting !== undefined\n                      ? getColumnSortingDirection(sorting, columnName)! : undefined}\n                    // @deprecated\n                    onSort={\n                      ({ direction, keepOther }) => changeColumnSorting({\n                        columnName, direction, keepOther,\n                      })}\n                    // @deprecated\n                    onGroup={() => changeColumnGrouping({ columnName })}\n                    // @deprecated\n                    before={(\n                      <TemplatePlaceholder\n                        name=\"tableHeaderCellBefore\"\n                        params={{\n                          column: params.tableColumn.column,\n                        }}\n                      />\n                    )}\n                  >\n                    <TemplatePlaceholder\n                      name=\"tableHeaderCellBefore\"\n                      params={{\n                        column: params.tableColumn.column,\n                      }}\n                    />\n                    <Content\n                      column={params.tableColumn.column!}\n                      align={params.tableColumn.align!}\n                    >\n                      {showSortingControls ? (\n                        <SortLabel\n                          column={params.tableColumn.column!}\n                          align={params.tableColumn.align!}\n                          direction={getColumnSortingDirection(sorting, columnName) || null}\n                          disabled={!sortingEnabled}\n                          onSort={({ direction, keepOther }) => {\n                            changeColumnSorting({ columnName, direction, keepOther });\n                          }}\n                          getMessage={getMessage}\n                        >\n                          <Title>\n                            {columnTitle || columnName}\n                          </Title>\n                        </SortLabel>\n                      ) : (\n                        <Title>\n                          {columnTitle || columnName}\n                        </Title>\n                      )}\n                    </Content>\n                    {showGroupingControls ? (\n                      <GroupButton\n                        disabled={!groupingEnabled}\n                        onGroup={() => changeColumnGrouping({ columnName })}\n                      />\n                    ) : null}\n                  </HeaderCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isHeadingTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <HeaderRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableHeaderRowBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  contentComponent: 'Content',\n  sortLabelComponent: 'SortLabel',\n  titleComponent: 'Title',\n  groupButtonComponent: 'GroupButton',\n};\n\n/***\n * A plugin that renders the table's header row. The Column's `title` field specifies the\n * column's title in the header row.The plugin also allows you to manage a column's sorting\n * and grouping state and initiate column dragging.\n * */\nexport const TableHeaderRow: React.ComponentType<TableHeaderRowProps> & {\n  /** The header row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableHeaderRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, Plugin,\n  TemplateConnector, TemplatePlaceholder, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getBandComponent, tableHeaderColumnChainsWithBands,\n  isBandedTableRow, isBandedOrHeaderRow,\n  tableRowsWithBands, isHeadingTableCell,\n  BAND_GROUP_CELL, BAND_HEADER_CELL,\n  BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER,\n  TABLE_BAND_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableBandHeaderProps, TableCellProps, TableRowProps } from '../types';\n\nconst CellPlaceholder = (props: TableCellProps) => <TemplatePlaceholder params={props} />;\n\nclass TableBandHeaderBase extends React.PureComponent<TableBandHeaderProps> {\n  static ROW_TYPE = TABLE_BAND_TYPE;\n  static components = {\n    cellComponent: 'Cell',\n    rowComponent: 'Row',\n    bandedHeaderCellComponent: 'BandedHeaderCell',\n    invisibleCellComponent: 'InvisibleCell',\n  };\n\n  render() {\n    const {\n      cellComponent: Cell,\n      rowComponent: Row,\n      bandedHeaderCellComponent: HeaderCell,\n      invisibleCellComponent: InvisibleCell,\n      columnBands,\n    } = this.props;\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows, tableColumns }: Getters,\n    ) => tableRowsWithBands(\n      tableHeaderRows, columnBands, tableColumns,\n    );\n    const tableHeaderColumnChainsComputed = (\n      { tableHeaderRows, tableColumns }: Getters,\n    ) => tableHeaderColumnChainsWithBands(\n      tableHeaderRows, tableColumns, columnBands,\n    );\n\n    return (\n      <Plugin\n        name=\"TableBandHeader\"\n        dependencies={[\n          { name: 'Table' },\n          { name: 'TableHeaderRow' },\n          { name: 'TableSelection', optional: true },\n          { name: 'TableEditColumn', optional: true },\n        ]}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Getter name=\"tableHeaderColumnChains\" computed={tableHeaderColumnChainsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isBandedOrHeaderRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                tableColumns,\n                tableHeaderRows,\n                tableHeaderColumnChains,\n              }) => {\n                const bandComponent = getBandComponent(\n                  params,\n                  tableHeaderRows, tableColumns,\n                  columnBands, tableHeaderColumnChains,\n                );\n                switch (bandComponent.type) {\n                  case BAND_DUPLICATE_RENDER:\n                    return <TemplatePlaceholder />;\n                  case BAND_EMPTY_CELL:\n                    return <InvisibleCell />;\n                  case BAND_GROUP_CELL: {\n                    const { value, ...payload } = bandComponent.payload!;\n                    return (\n                      <Cell {...params} {...payload}>\n                        {value}\n                      </Cell>\n                    );\n                  }\n                  case BAND_HEADER_CELL:\n                    return (\n                      <TemplatePlaceholder\n                        name=\"tableCell\"\n                        params={{ ...params, ...bandComponent.payload }}\n                      />\n                    );\n                  default:\n                    return null;\n                }\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isHeadingTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => <HeaderCell component={CellPlaceholder} {...params} />}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isBandedTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <Row {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableBandHeaderBase.components = {\n  cellComponent: 'Cell',\n  rowComponent: 'Row',\n  bandedHeaderCellComponent: 'BandedHeaderCell',\n  invisibleCellComponent: 'InvisibleCell',\n};\n\n/** A plugin that renders the banded cells. */\nexport const TableBandHeader: React.ComponentType<TableBandHeaderProps> & {\n  /** The band row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableBandHeaderBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin, Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  getColumnFilterConfig,\n  tableHeaderRowsWithFilter,\n  isFilterTableCell,\n  isFilterTableRow,\n  getColumnFilterOperations,\n  isFilterValueEmpty,\n  getSelectedFilterOperation,\n  TABLE_FILTER_TYPE,\n  FilterConfig,\n} from '@devexpress/dx-grid-core';\nimport { TableFilterRowProps, TableFilterRowState, TableCellProps, TableRowProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'FilteringState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nconst defaultMessages = {\n  filterPlaceholder: 'Filter...',\n  contains: 'Contains',\n  notContains: 'Does not contain',\n  startsWith: 'Starts with',\n  endsWith: 'Ends with',\n  equal: 'Equals',\n  notEqual: 'Does not equal',\n  greaterThan: 'Greater than',\n  greaterThanOrEqual: 'Greater than or equal to',\n  lessThan: 'Less than',\n  lessThanOrEqual: 'Less than or equal to',\n};\n\nclass TableFilterRowBase extends React.PureComponent<TableFilterRowProps, TableFilterRowState> {\n  static ROW_TYPE = TABLE_FILTER_TYPE;\n  static defaultProps = {\n    showFilterSelector: false,\n    messages: {},\n  };\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n    filterSelectorComponent: 'FilterSelector',\n    iconComponent: 'Icon',\n    editorComponent: 'Editor',\n    toggleButtonComponent: 'ToggleButton',\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      filterOperations: {},\n    };\n  }\n\n  render() {\n    const {\n      rowHeight,\n      showFilterSelector,\n      cellComponent: FilterCell,\n      rowComponent: FilterRow,\n      filterSelectorComponent: FilterSelector,\n      iconComponent,\n      toggleButtonComponent,\n      editorComponent: EditorComponent,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    const tableHeaderRowsComputed = (\n      { tableHeaderRows }: Getters,\n    ) => tableHeaderRowsWithFilter(tableHeaderRows, rowHeight!);\n\n    return (\n      <Plugin\n        name=\"TableFilterRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isFilterTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(\n                { filters, isColumnFilteringEnabled, getAvailableFilterOperations },\n                { changeColumnFilter }: Actions,\n              ) => {\n                const { filterOperations } = this.state;\n                const { name: columnName } = params.tableColumn.column!;\n                const filter = getColumnFilterConfig(filters, columnName)!;\n                const onFilter = (\n                  config: FilterConfig | null,\n                ) => changeColumnFilter({ columnName, config });\n                const columnFilterOperations = getColumnFilterOperations(\n                  getAvailableFilterOperations, columnName,\n                );\n                const selectedFilterOperation = getSelectedFilterOperation(\n                  filterOperations, columnName, filter, columnFilterOperations,\n                );\n                const handleFilterOperationChange = (value: string) => {\n                  this.setState({\n                    filterOperations: {\n                      ...filterOperations,\n                      [columnName]: value,\n                    },\n                  });\n                  if (filter && !isFilterValueEmpty(filter.value)) {\n                    onFilter({ value: filter.value, operation: value });\n                  }\n                };\n                const handleFilterValueChange = (value: any) => onFilter(!isFilterValueEmpty(value)\n                  ? { value, operation: selectedFilterOperation }\n                  : null);\n                const filteringEnabled = isColumnFilteringEnabled(columnName);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column: params.tableColumn.column,\n                      value: filter ? filter.value : undefined,\n                      onValueChange: handleFilterValueChange,\n                    }}\n                  >\n                    {content => (\n                      <FilterCell\n                        {...params}\n                        getMessage={getMessage}\n                        column={params.tableColumn.column!}\n                        filter={filter}\n                        filteringEnabled={filteringEnabled}\n                        onFilter={onFilter}\n                      >\n                        {showFilterSelector\n                          ? (\n                            <FilterSelector\n                              toggleButtonComponent={toggleButtonComponent}\n                              iconComponent={iconComponent}\n                              value={selectedFilterOperation}\n                              availableValues={columnFilterOperations as string[]}\n                              onChange={handleFilterOperationChange}\n                              disabled={!filteringEnabled}\n                              getMessage={getMessage}\n                            />\n                          ) : null\n                        }\n                        {content || (\n                          <EditorComponent\n                            value={filter ? filter.value : undefined}\n                            disabled={!filteringEnabled}\n                            getMessage={getMessage}\n                            onChange={handleFilterValueChange}\n                          />\n                        )}\n                      </FilterCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isFilterTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => <FilterRow {...params} />}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a filter row. */\nexport const TableFilterRow: React.ComponentType<TableFilterRowProps> & {\n  /** The filter row type's identifier. */\n  ROW_TYPE: symbol;\n} = TableFilterRowBase;\n","import * as React from 'react';\nimport {\n  Getter, Template, TemplatePlaceholder, TemplateConnector, Plugin, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  getRowChange,\n  tableRowsWithEditing,\n  isEditTableRow,\n  isAddedTableRow,\n  isEditTableCell,\n  TABLE_EDIT_TYPE,\n  TABLE_ADDED_TYPE,\n} from '@devexpress/dx-grid-core';\nimport { TableEditRowProps, TableCellProps, TableRowProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n  { name: 'DataTypeProvider', optional: true },\n];\n\nclass TableEditRowBase extends React.PureComponent<TableEditRowProps> {\n  static ADDED_ROW_TYPE = TABLE_ADDED_TYPE;\n  static EDIT_ROW_TYPE = TABLE_EDIT_TYPE;\n  static components = {\n    rowComponent: 'Row',\n    cellComponent: 'Cell',\n  };\n\n  render() {\n    const {\n      cellComponent: EditCell,\n      rowComponent: EditRow,\n      rowHeight,\n    } = this.props;\n\n    const tableBodyRowsComputed = (\n      { tableBodyRows, editingRowIds, addedRows }: Getters,\n    ) => tableRowsWithEditing(tableBodyRows, editingRowIds, addedRows, rowHeight);\n\n    return (\n      <Plugin\n        name=\"TableEditRow\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow, tableColumn }: any) => isEditTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                getCellValue,\n                createRowChange,\n                rowChanges,\n                isColumnEditingEnabled,\n              }, {\n                changeAddedRow,\n                changeRow,\n              }) => {\n                const { rowId, row } = params.tableRow;\n                const { column } = params.tableColumn;\n                const { name: columnName } = column!;\n\n                const isNew = isAddedTableRow(params.tableRow);\n                const changedRow = isNew\n                  ? row\n                  : { ...row, ...getRowChange(rowChanges, rowId!) };\n\n                const value = getCellValue(changedRow, columnName);\n                const onValueChange = (newValue: any) => {\n                  const changeArgs = {\n                    rowId,\n                    change: createRowChange(changedRow, newValue, columnName),\n                  };\n                  if (isNew) {\n                    changeAddedRow(changeArgs);\n                  } else {\n                    changeRow(changeArgs);\n                  }\n                };\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueEditor\"\n                    params={{\n                      column,\n                      row,\n                      value,\n                      onValueChange,\n                    }}\n                  >\n                    {content => (\n                      <EditCell\n                        {...params}\n                        row={row}\n                        column={column!}\n                        value={value}\n                        editingEnabled={isColumnEditingEnabled(columnName)}\n                        onValueChange={onValueChange}\n                      >\n                        {content}\n                      </EditCell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={(\n            { tableRow }: any,\n          ) => !!(isEditTableRow(tableRow) || isAddedTableRow(tableRow))}\n        >\n          {(params: TableRowProps) => (\n            <EditRow\n              {...params}\n              row={params.tableRow.row}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a row being edited. */\nexport const TableEditRow: React.ComponentType<TableEditRowProps> & {\n  /** The added row type's identifier. */\n  ADDED_ROW_TYPE: symbol;\n  /** The edit row type's identifier. */\n  EDIT_ROW_TYPE: symbol;\n} = TableEditRowBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter, Template, Plugin, TemplateConnector, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  TABLE_EDIT_COMMAND_TYPE,\n  tableColumnsWithEditing,\n  isHeadingEditCommandsTableCell,\n  isEditCommandsTableCell,\n  isAddedTableRow,\n  isEditTableRow,\n} from '@devexpress/dx-grid-core';\nimport { TableEditColumnProps, TableCellProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'EditingState' },\n  { name: 'Table' },\n];\n\nconst defaultMessages = {\n  addCommand: 'New',\n  editCommand: 'Edit',\n  deleteCommand: 'Delete',\n  commitCommand: 'Save',\n  cancelCommand: 'Cancel',\n};\n\nclass TableEditColumnBase extends React.PureComponent<TableEditColumnProps> {\n  static COLUMN_TYPE = TABLE_EDIT_COMMAND_TYPE;\n  static defaultProps = {\n    showAddCommand: false,\n    showEditCommand: false,\n    showDeleteCommand: false,\n    width: 140,\n    messages: {},\n  };\n  static components = {\n    cellComponent: 'Cell',\n    headerCellComponent: 'HeaderCell',\n    commandComponent: 'Command',\n  };\n\n  render() {\n    const {\n      cellComponent: Cell,\n      headerCellComponent: HeaderCell,\n      commandComponent: Command,\n      showAddCommand,\n      showEditCommand,\n      showDeleteCommand,\n      width,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const tableColumnsComputed = (\n      { tableColumns }: Getters,\n    ) => tableColumnsWithEditing(tableColumns, width as number);\n\n    return (\n      <Plugin\n        name=\"TableEditColumn\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isHeadingEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(getters, actions) => (\n                <HeaderCell {...params}>\n                  {showAddCommand && (\n                    <Command\n                      id=\"add\"\n                      text={getMessage('addCommand')}\n                      onExecute={() => actions.addRow()}\n                    />\n                  )}\n                </HeaderCell>\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isEditCommandsTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {(getters, actions) => {\n                const isEdit = isEditTableRow(params.tableRow);\n                const isNew = isAddedTableRow(params.tableRow);\n                const isEditing = isEdit || isNew;\n                const rowIds = [params.tableRow.rowId];\n                return (\n                  <Cell\n                    {...params}\n                    row={params.tableRow.row}\n                  >\n                    {showEditCommand && !isEditing && (\n                      <Command\n                        id=\"edit\"\n                        text={getMessage('editCommand')}\n                        onExecute={() => actions.startEditRows({ rowIds })}\n                      />\n                    )}\n                    {showDeleteCommand && !isEditing && (\n                      <Command\n                        id=\"delete\"\n                        text={getMessage('deleteCommand')}\n                        onExecute={() => {\n                          actions.deleteRows({ rowIds });\n                          actions.commitDeletedRows({ rowIds });\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"commit\"\n                        text={getMessage('commitCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.commitAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.commitChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                    {isEditing && (\n                      <Command\n                        id=\"cancel\"\n                        text={getMessage('cancelCommand')}\n                        onExecute={() => {\n                          if (isNew) {\n                            actions.cancelAddedRows({ rowIds });\n                          } else {\n                            actions.stopEditRows({ rowIds });\n                            actions.cancelChangedRows({ rowIds });\n                          }\n                        }}\n                      />\n                    )}\n                  </Cell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders a command column. This column contains controls used for row editing,\n * creating, or deleting and committing/canceling changes.\n * */\nexport const TableEditColumn: React.ComponentType<TableEditColumnProps> & {\n  /** The edit column type's identifier. */\n  COLUMN_TYPE: symbol;\n} = TableEditColumnBase;\n","import * as React from 'react';\nimport { memoize, MemoizedComputed } from '@devexpress/dx-core';\nimport {\n  Plugin, Getter, Action, createStateHelper, StateHelper, ActionFn, Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableColumnsWithWidths,\n  tableColumnsWithDraftWidths,\n  changeTableColumnWidth,\n  draftTableColumnWidth,\n  cancelTableColumnWidthDraft,\n  ColumnWidthPayload,\n  TableColumnWidthInfo,\n} from '@devexpress/dx-grid-core';\nimport { TableColumnResizingProps, TableColumnResizingState } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnResizingBase extends React.PureComponent<TableColumnResizingProps, TableColumnResizingState> {\n  static defaultProps = {\n    defaultColumnWidths: [],\n  };\n  changeTableColumnWidth: ActionFn<ColumnWidthPayload>;\n  draftTableColumnWidth: ActionFn<ColumnWidthPayload>;\n  cancelTableColumnWidthDraft: ActionFn<any>;\n  tableColumnsComputed: MemoizedComputed<TableColumnWidthInfo[], typeof tableColumnsWithWidths>;\n  // tslint:disable-next-line: max-line-length\n  tableColumnsDraftComputed: MemoizedComputed<TableColumnWidthInfo[], typeof tableColumnsWithDraftWidths>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnWidths: props.columnWidths || props.defaultColumnWidths,\n      draftColumnWidths: [],\n    };\n\n    const stateHelper: StateHelper = createStateHelper(\n      this,\n      {\n        columnWidths: () => {\n          const { onColumnWidthsChange } = this.props;\n          return onColumnWidthsChange;\n        },\n      },\n    );\n\n    this.tableColumnsComputed = memoize(\n      columnWidths => (\n        { tableColumns }: Getters,\n      ) => tableColumnsWithWidths(tableColumns, columnWidths),\n    );\n    this.tableColumnsDraftComputed = memoize(\n      draftColumnWidths => (\n        { tableColumns }: Getters,\n      ) => tableColumnsWithDraftWidths(tableColumns, draftColumnWidths),\n    );\n\n    this.changeTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => {\n        const { minColumnWidth } = this.props;\n        return changeTableColumnWidth(\n          prevState,\n          { ...payload, minColumnWidth },\n        );\n      },\n    );\n    this.draftTableColumnWidth = stateHelper.applyReducer.bind(\n      stateHelper, (prevState, payload) => {\n        const { minColumnWidth } = this.props;\n        return draftTableColumnWidth(\n          prevState,\n          { ...payload, minColumnWidth },\n        );\n      },\n    );\n    this.cancelTableColumnWidthDraft = stateHelper.applyReducer.bind(\n      stateHelper, cancelTableColumnWidthDraft,\n    );\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      columnWidths = prevState.columnWidths,\n    } = nextProps;\n\n    return {\n      columnWidths,\n    };\n  }\n\n  render() {\n    const { columnWidths, draftColumnWidths } = this.state;\n\n    const tableColumnsComputed = this.tableColumnsComputed(columnWidths);\n    const tableColumnsDraftComputed = this.tableColumnsDraftComputed(draftColumnWidths);\n\n    return (\n      <Plugin\n        name=\"TableColumnResizing\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableColumnResizingEnabled\" value />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsDraftComputed} />\n        <Action name=\"changeTableColumnWidth\" action={this.changeTableColumnWidth} />\n        <Action name=\"draftTableColumnWidth\" action={this.draftTableColumnWidth} />\n        <Action name=\"cancelTableColumnWidthDraft\" action={this.cancelTableColumnWidthDraft} />\n      </Plugin>\n    );\n  }\n}\n\n/* tslint:disable: max-line-length */\n/** A plugin that manages table column widths. */\nexport const TableColumnResizing: React.ComponentType<TableColumnResizingProps> = TableColumnResizingBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { pageCount } from '@devexpress/dx-grid-core';\nimport { PagingPanelProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'PagingState' },\n];\n\nconst defaultMessages = {\n  showAll: 'All',\n  info: ({ from, to, count }) => `${from}${from < to ? `-${to}` : ''} of ${count}`,\n};\n\nclass PagingPanelBase extends React.PureComponent<PagingPanelProps> {\n  static defaultProps = {\n    pageSizes: [],\n    messages: {},\n  };\n  static components = {\n    containerComponent: 'Container',\n  };\n\n  render() {\n    const {\n      containerComponent: Pager,\n      pageSizes,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"PagingPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"footer\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ currentPage, pageSize, totalCount }, { setCurrentPage, setPageSize }) => (\n              <Pager\n                currentPage={currentPage}\n                pageSize={pageSize}\n                totalCount={totalCount}\n                totalPages={pageCount(totalCount, pageSize)}\n                pageSizes={pageSizes!}\n                getMessage={getMessage}\n                onCurrentPageChange={setCurrentPage}\n                onPageSizeChange={setPageSize}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the paging panel used for navigation through data pages. */\nexport const PagingPanel: React.ComponentType<PagingPanelProps> = PagingPanelBase;\n","import * as React from 'react';\nimport { DragSource } from '@devexpress/dx-react-core';\nimport { GroupingPanel as GP } from '../../types';\n\nconst defaultProps = {\n  draggingEnabled: false,\n  onDragStart: () => {},\n  onDragEnd: () => {},\n};\ntype GPItemLayoutProps = GP.GroupingItemLayoutProps & typeof defaultProps;\n\n// tslint:disable-next-line: max-line-length\nexport class ItemLayout extends React.PureComponent<GPItemLayoutProps, GP.GroupingItemLayoutState> {\n  static defaultProps = defaultProps;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dragging: false,\n    };\n  }\n\n  render() {\n    const {\n      item,\n      itemComponent: Item,\n      draggingEnabled,\n      onDragStart,\n      onDragEnd,\n    } = this.props;\n    const { dragging } = this.state;\n\n    const itemElement = <Item item={{ ...item, draft: dragging || item.draft }} />;\n\n    return (draggingEnabled ? (\n      <DragSource\n        payload={[{ type: 'column', columnName: item.column.name }]}\n        onStart={() => {\n          this.setState({ dragging: true });\n          onDragStart();\n        }}\n        onEnd={() => {\n          this.setState({ dragging: false });\n          onDragEnd();\n        }}\n      >\n        {itemElement}\n      </DragSource>\n    ) : (\n      itemElement\n    ));\n  }\n}\n","import * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { DropTarget } from '@devexpress/dx-react-core';\nimport { getGroupCellTargetIndex } from '@devexpress/dx-grid-core';\nimport { ItemLayout } from './group-panel-layout/item-layout';\nimport { GroupingPanel as GP } from '../types';\n\nconst defaultProps = {\n  onGroup: () => {},\n  draggingEnabled: false,\n  isColumnGroupingEnabled: () => false,\n  onGroupDraft: () => {},\n  onGroupDraftCancel: () => {},\n};\ntype GPLayoutProps = GP.LayoutProps & typeof defaultProps;\n\n// tslint:disable-next-line: max-line-length\nclass GroupPanelLayoutBase extends React.PureComponent<GPLayoutProps, GP.GroupingItemLayoutState> {\n  static defaultProps = defaultProps;\n  handleDragEvent: (...args: any) => void;\n  onEnter: (any) => void;\n  onOver: (any) => void;\n  itemRefs: ItemLayout[] = [];\n  draggingColumnName: string | null = null;\n  onLeave: () => void;\n  onDrop: () => void;\n  onDragStart: (columnName: any) => void;\n  onDragEnd: () => void;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    };\n    this.handleDragEvent = (eventHandler, { payload, ...restArgs }) => {\n      const { isColumnGroupingEnabled } = this.props;\n      const { columnName } = payload[0];\n\n      if (isColumnGroupingEnabled(columnName)) {\n        eventHandler({ payload, ...restArgs });\n      }\n    };\n    this.onEnter = ({ payload }) => {\n      this.setState({\n        sourceColumnName: payload[0].columnName,\n      });\n    };\n    this.onOver = ({ clientOffset }) => {\n      const { onGroupDraft, items } = this.props;\n      const { sourceColumnName, targetItemIndex: prevTargetItemIndex } = this.state;\n      // eslint-disable-next-line react/no-find-dom-node\n      const itemGeometries = this.itemRefs\n        .map(ref => (findDOMNode(ref) as HTMLElement).getBoundingClientRect());\n      const sourceItemIndex = items.findIndex(({ column }) => column.name === sourceColumnName);\n      const targetItemIndex = getGroupCellTargetIndex(\n        itemGeometries,\n        sourceItemIndex,\n        clientOffset,\n      );\n\n      if (prevTargetItemIndex === targetItemIndex) return;\n\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n      this.setState({ targetItemIndex });\n    };\n    this.onLeave = () => {\n      const { onGroupDraft } = this.props;\n      const { sourceColumnName } = this.state;\n      if (!this.draggingColumnName) {\n        this.resetState();\n        return;\n      }\n      onGroupDraft({\n        columnName: sourceColumnName,\n        groupIndex: -1,\n      });\n      this.setState({\n        targetItemIndex: -1,\n      });\n    };\n    this.onDrop = () => {\n      const { onGroup } = this.props;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      this.resetState();\n      onGroup({\n        columnName: sourceColumnName,\n        groupIndex: targetItemIndex,\n      });\n    };\n    this.onDragStart = (columnName) => {\n      this.draggingColumnName = columnName;\n    };\n    this.onDragEnd = () => {\n      this.draggingColumnName = null;\n      const { sourceColumnName, targetItemIndex } = this.state;\n      const { onGroup } = this.props;\n      if (sourceColumnName && targetItemIndex === -1) {\n        onGroup({\n          columnName: sourceColumnName,\n        });\n      }\n      this.resetState();\n    };\n  }\n\n  resetState() {\n    const { onGroupDraftCancel } = this.props;\n    onGroupDraftCancel();\n    this.setState({\n      sourceColumnName: null,\n      targetItemIndex: -1,\n    });\n  }\n\n  render() {\n    const {\n      items,\n      emptyMessageComponent: EmptyMessage,\n      containerComponent: Container,\n      itemComponent: Item,\n      draggingEnabled,\n      isColumnGroupingEnabled,\n    } = this.props;\n\n    this.itemRefs = [];\n\n    const groupPanel = (items.length ? (\n      <Container>\n        {items.map((item) => {\n          const { name: columnName } = item.column;\n          return (\n            <ItemLayout\n              key={columnName}\n              ref={element => element && this.itemRefs.push(element)}\n              item={item}\n              itemComponent={Item}\n              draggingEnabled={draggingEnabled && isColumnGroupingEnabled(columnName)}\n              onDragStart={() => this.onDragStart(columnName)}\n              onDragEnd={this.onDragEnd}\n            />\n          );\n        })}\n      </Container>\n    ) : (\n      <EmptyMessage />\n    ));\n\n    return draggingEnabled\n      ? (\n        <DropTarget\n          onEnter={args => this.handleDragEvent(this.onEnter, args)}\n          onOver={args => this.handleDragEvent(this.onOver, args)}\n          onLeave={args => this.handleDragEvent(this.onLeave, args)}\n          onDrop={args => this.handleDragEvent(this.onDrop, args)}\n        >\n          {groupPanel}\n        </DropTarget>\n      )\n      : groupPanel;\n  }\n}\n\n/** @internal */\nexport const GroupPanelLayout: React.ComponentType<GP.LayoutProps> = GroupPanelLayoutBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template, TemplatePlaceholder, Plugin, TemplateConnector, withComponents,\n  Getters, Actions,\n} from '@devexpress/dx-react-core';\nimport {\n  groupingPanelItems,\n  getColumnSortingDirection,\n} from '@devexpress/dx-grid-core';\nimport { GroupPanelLayout as Layout } from '../components/group-panel-layout';\nimport { GroupingPanelProps } from '../types';\n\nconst defaultMessages = {\n  groupByColumn: 'Drag a column header here to group by that column',\n};\n\nconst defaultProps = {\n  showSortingControls: false,\n  showGroupingControls: false,\n  messages: {},\n};\n\nclass GroupingPanelRaw extends React.PureComponent<GroupingPanelProps & typeof defaultProps> {\n  static defaultProps = defaultProps;\n  static components = {\n    layoutComponent: 'Layout',\n    containerComponent: 'Container',\n    itemComponent: 'Item',\n    emptyMessageComponent: 'EmptyMessage',\n  };\n\n  render() {\n    const {\n      layoutComponent: LayoutComponent,\n      containerComponent: Container,\n      itemComponent: Item,\n      emptyMessageComponent: EmptyMessage,\n      showSortingControls,\n      showGroupingControls,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    const EmptyMessagePlaceholder = () => (\n      <EmptyMessage\n        getMessage={getMessage}\n      />\n    );\n\n    const ItemPlaceholder = ({ item }) => {\n      const { name: columnName } = item.column;\n\n      return (\n        <TemplateConnector>\n          {(\n            { sorting, isColumnSortingEnabled, isColumnGroupingEnabled },\n            { changeColumnGrouping, changeColumnSorting },\n          ) => {\n            const sortingEnabled = isColumnSortingEnabled && isColumnSortingEnabled(columnName);\n            const groupingEnabled = isColumnGroupingEnabled && isColumnGroupingEnabled(columnName);\n\n            return (\n              <Item\n                item={item}\n                sortingEnabled={sortingEnabled}\n                groupingEnabled={groupingEnabled}\n                showSortingControls={showSortingControls}\n                sortingDirection={showSortingControls\n                  ? getColumnSortingDirection(sorting, columnName)! : undefined}\n                showGroupingControls={showGroupingControls}\n                onGroup={() => changeColumnGrouping({ columnName })}\n                onSort={(\n                  { direction, keepOther },\n                ) => changeColumnSorting({ columnName, direction, keepOther })}\n              />\n            );\n          }}\n        </TemplateConnector>\n      );\n    };\n\n    return (\n      <Plugin\n        name=\"GroupingPanel\"\n        dependencies={[\n          { name: 'GroupingState' },\n          { name: 'Toolbar' },\n          { name: 'SortingState', optional: !showSortingControls },\n        ]}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplateConnector>\n            {({\n              columns, grouping, draftGrouping, draggingEnabled, isColumnGroupingEnabled,\n            }: Getters, {\n              changeColumnGrouping, draftColumnGrouping, cancelColumnGroupingDraft,\n            }: Actions) => (\n              <LayoutComponent\n                items={groupingPanelItems(columns, grouping, draftGrouping)}\n                isColumnGroupingEnabled={isColumnGroupingEnabled}\n                draggingEnabled={draggingEnabled}\n                onGroup={changeColumnGrouping}\n                onGroupDraft={draftColumnGrouping}\n                onGroupDraftCancel={cancelColumnGroupingDraft}\n                itemComponent={ItemPlaceholder}\n                emptyMessageComponent={EmptyMessagePlaceholder}\n                containerComponent={Container}\n              />\n            )}\n          </TemplateConnector>\n          <TemplatePlaceholder />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that renders the Grouping Panel in the Grid's header. This panel displays grouped\n * columns and allows a user to modify grouping options.Optionally, the plugin allows an end-user\n * to change grouped columns' sorting order and render sorting indicators.\n * */\nexport const GroupingPanel: React.ComponentType<GroupingPanelProps> = withComponents(\n  { Layout },\n)(GroupingPanelRaw);\n","import * as React from 'react';\nimport { Plugin, Template, Getter, Getters } from '@devexpress/dx-react-core';\nimport { getAvailableFilterOperationsGetter } from '@devexpress/dx-grid-core';\nimport {\n  DataTypeProvider as DataTypeProviderNS, DataTypeProviderProps,\n} from '../types';\n\nclass DataTypeProviderBase extends React.PureComponent<DataTypeProviderProps> {\n  render() {\n    const {\n      for: columnNames,\n      formatterComponent: Formatter,\n      editorComponent: Editor,\n      availableFilterOperations,\n    } = this.props;\n\n    const getAvailableFilterOperationsComputed = (\n      { getAvailableFilterOperations }: Getters,\n    ) => getAvailableFilterOperationsGetter(\n      getAvailableFilterOperations,\n      availableFilterOperations!,\n      columnNames,\n    );\n\n    return (\n      <Plugin name=\"DataTypeProvider\">\n        <Getter\n          name=\"getAvailableFilterOperations\"\n          computed={getAvailableFilterOperationsComputed}\n        />\n        {Formatter\n          ? (\n            <Template\n              name=\"valueFormatter\"\n              predicate={({ column }: any) => columnNames.includes(column.name)}\n            >\n              {(params: DataTypeProviderNS.ValueFormatterProps) => <Formatter {...params} />}\n            </Template>\n          )\n          : null\n        }\n        {Editor\n          ? (\n            <Template\n              name=\"valueEditor\"\n              predicate={({ column }: any) => columnNames.includes(column.name)}\n            >\n              {(params: DataTypeProviderNS.ValueEditorProps) => <Editor {...params} />}\n            </Template>\n          )\n          : null\n        }\n      </Plugin>\n    );\n  }\n}\n\n// tslint:disable-next-line: max-line-length\n/** A plugin that allows you to customize formatting options and editors depending on the data type. */\nexport const DataTypeProvider: React.ComponentType<DataTypeProviderProps> = DataTypeProviderBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Action,\n  Getter,\n  Plugin,\n  Template,\n  TemplateConnector,\n  TemplatePlaceholder,\n  createStateHelper,\n  ActionFn,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  toggleColumn,\n  visibleTableColumns,\n  tableDataColumnsExist,\n  getColumnExtensionValueGetter,\n} from '@devexpress/dx-grid-core';\nimport { TableColumnVisibilityProps, TableColumnVisibilityState } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Table' },\n];\n\nconst defaultMessages = {\n  noColumns: 'Nothing to show',\n};\n\nconst visibleTableColumnsComputed = (\n  { tableColumns, hiddenColumnNames }: Getters,\n) => visibleTableColumns(tableColumns, hiddenColumnNames);\n\nconst columnExtensionValueGetter = (\n  columnExtensions, defaultValue,\n) => getColumnExtensionValueGetter(columnExtensions, 'togglingEnabled', defaultValue);\n\n// tslint:disable-next-line: max-line-length\nclass TableColumnVisibilityBase extends React.PureComponent<TableColumnVisibilityProps, TableColumnVisibilityState> {\n  static defaultProps = {\n    defaultHiddenColumnNames: [],\n    messages: {},\n    columnTogglingEnabled: true,\n  };\n  static components = {\n    emptyMessageComponent: 'EmptyMessage',\n  };\n  toggleColumnVisibility: ActionFn<string[]>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hiddenColumnNames: props.hiddenColumnNames || props.defaultHiddenColumnNames,\n    };\n    const stateHelper = createStateHelper(\n      this,\n      {\n        hiddenColumnNames: () => {\n          const { onHiddenColumnNamesChange } = this.props;\n          return onHiddenColumnNamesChange;\n        },\n      },\n    );\n\n    this.toggleColumnVisibility = stateHelper.applyFieldReducer.bind(\n      stateHelper, 'hiddenColumnNames', toggleColumn,\n    );\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      hiddenColumnNames = prevState.hiddenColumnNames,\n    } = nextProps;\n\n    return {\n      hiddenColumnNames,\n    };\n  }\n\n  render() {\n    const {\n      emptyMessageComponent: EmptyMessage,\n      messages,\n    } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const { hiddenColumnNames } = this.state;\n    const { columnExtensions, columnTogglingEnabled } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableColumnVisibility\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"hiddenColumnNames\" value={hiddenColumnNames} />\n        <Getter name=\"tableColumns\" computed={visibleTableColumnsComputed} />\n        <Getter\n          name=\"isColumnTogglingEnabled\"\n          value={columnExtensionValueGetter(columnExtensions, columnTogglingEnabled)}\n        />\n        <Action\n          name=\"toggleColumnVisibility\"\n          action={this.toggleColumnVisibility}\n        />\n\n        <Template name=\"table\">\n          {params => (\n            <TemplateConnector>\n              {({ tableColumns }) => (tableDataColumnsExist(tableColumns)\n                ? <TemplatePlaceholder />\n                : (\n                  <EmptyMessage\n                    getMessage={getMessage}\n                    {...params}\n                  />\n                )\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\nTableColumnVisibilityBase.components = {\n  emptyMessageComponent: 'EmptyMessage',\n};\n\n/* tslint:disable: max-line-length */\n/** A plugin that manages Grid columns' visibility. */\nexport const TableColumnVisibility: React.ComponentType<TableColumnVisibilityProps> = TableColumnVisibilityBase;\n/* tslint:enable: max-line-length */\n","import * as React from 'react';\n\nimport {\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { ToolbarProps } from '../types';\n\nclass ToolbarBase extends React.PureComponent<ToolbarProps> {\n  static components = {\n    rootComponent: 'Root',\n    flexibleSpaceComponent: 'FlexibleSpace',\n  };\n\n  render() {\n    const {\n      rootComponent: Root,\n      flexibleSpaceComponent: FlexibleSpaceComponent,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"Toolbar\"\n      >\n        <Template name=\"header\">\n          <Root>\n            <TemplatePlaceholder name=\"toolbarContent\" />\n          </Root>\n          <TemplatePlaceholder />\n        </Template>\n        <Template name=\"toolbarContent\">\n          <FlexibleSpaceComponent />\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Grid toolbar. */\nexport const Toolbar: React.ComponentType<ToolbarProps> = ToolbarBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn,\n} from '@devexpress/dx-react-core';\nimport { toggleRowExpanded, ToggleRowPayload } from '@devexpress/dx-grid-core';\nimport { TreeDataStateProps, TreeDataStateState } from '../types';\n\nclass TreeDataStateBase extends React.PureComponent<TreeDataStateProps, TreeDataStateState> {\n  static defaultProps = {\n    defaultExpandedRowIds: [],\n  };\n  toggleRowExpanded: ActionFn<ToggleRowPayload>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      expandedRowIds: props.expandedRowIds || props.defaultExpandedRowIds,\n    };\n\n    const stateHelper = createStateHelper(\n      this,\n      {\n        expandedRowIds: () => {\n          const { onExpandedRowIdsChange } = this.props;\n          return onExpandedRowIdsChange;\n        },\n      },\n    );\n\n    this.toggleRowExpanded = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'expandedRowIds', toggleRowExpanded);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      expandedRowIds = prevState.expandedRowIds,\n    } = nextProps;\n\n    return {\n      expandedRowIds,\n    };\n  }\n\n  render() {\n    const { expandedRowIds } = this.state;\n\n    return (\n      <Plugin\n        name=\"TreeDataState\"\n      >\n        <Getter name=\"expandedRowIds\" value={expandedRowIds} />\n        {' '}\n        {/* collision =( */}\n        <Action name=\"toggleRowExpanded\" action={this.toggleRowExpanded} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the expanded state for tree rows. */\nexport const TreeDataState: React.ComponentType<TreeDataStateProps> = TreeDataStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  customTreeRowLevelKeyGetter,\n  customTreeRowIdGetter,\n  customTreeRowsWithMeta,\n  expandedTreeRows,\n  collapsedTreeRowsGetter,\n  isTreeRowLeafGetter,\n  getTreeRowLevelGetter,\n  unwrappedCustomTreeRows,\n} from '@devexpress/dx-grid-core';\nimport { CustomTreeDataProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'TreeDataState' },\n];\n\nconst expandedTreeRowsComputed = (\n  { rows, getRowId, expandedRowIds }: Getters,\n) => expandedTreeRows(rows, getRowId, expandedRowIds);\nconst getRowIdComputed = (\n  { getRowId, rows }: Getters,\n) => customTreeRowIdGetter(getRowId, rows);\nconst getRowLevelKeyComputed = (\n  { getRowLevelKey, rows }: Getters,\n) => customTreeRowLevelKeyGetter(getRowLevelKey, rows);\nconst isTreeRowLeafComputed = ({ rows }: Getters) => isTreeRowLeafGetter(rows);\nconst getTreeRowLevelComputed = ({ rows }: Getters) => getTreeRowLevelGetter(rows);\nconst collapsedTreeRowsGetterComputed = (\n  { rows, getCollapsedRows }: Getters,\n) => collapsedTreeRowsGetter(getCollapsedRows, rows);\nconst unwrappedTreeRowsComputed = ({ rows }: Getters) => unwrappedCustomTreeRows(rows);\n\nclass CustomTreeDataBase extends React.PureComponent<CustomTreeDataProps> {\n  render() {\n    const {\n      getChildRows,\n    } = this.props;\n    const treeRowsComputed = ({ rows }: Getters) => customTreeRowsWithMeta(rows, getChildRows);\n\n    return (\n      <Plugin\n        name=\"CustomTreeData\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"rows\" computed={treeRowsComputed} />\n        <Getter name=\"getRowId\" computed={getRowIdComputed} />\n        <Getter name=\"getRowLevelKey\" computed={getRowLevelKeyComputed} />\n        <Getter name=\"isTreeRowLeaf\" computed={isTreeRowLeafComputed} />\n        <Getter name=\"getTreeRowLevel\" computed={getTreeRowLevelComputed} />\n        <Getter name=\"rows\" computed={expandedTreeRowsComputed} />\n        <Getter name=\"getCollapsedRows\" computed={collapsedTreeRowsGetterComputed} />\n        <Getter name=\"rows\" computed={unwrappedTreeRowsComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/***\n * A plugin that converts custom formatted tree data to a supported format and performs\n * local row expanding/collapsing.\n * */\nexport const CustomTreeData: React.ComponentType<CustomTreeDataProps> = CustomTreeDataBase;\n","import * as React from 'react';\nimport {\n  Template, Getter, Plugin, TemplateConnector, TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport { isTreeTableCell } from '@devexpress/dx-grid-core';\nimport { TableTreeColumnProps, TableCellProps } from '../types';\n\nclass TableTreeColumnBase extends React.PureComponent<TableTreeColumnProps> {\n  static defaultProps = {\n    showSelectionControls: false,\n    showSelectAll: false,\n  };\n  static components = {\n    cellComponent: 'Cell',\n    contentComponent: 'Content',\n    indentComponent: 'Indent',\n    expandButtonComponent: 'ExpandButton',\n    checkboxComponent: 'Checkbox',\n  };\n\n  render() {\n    const {\n      for: forColumnName,\n      showSelectionControls,\n      showSelectAll,\n      indentComponent: Indent,\n      expandButtonComponent: ExpandButton,\n      checkboxComponent: Checkbox,\n      contentComponent: Content,\n      cellComponent: Cell,\n    } = this.props;\n    return (\n      <Plugin\n        name=\"TableTreeColumn\"\n        dependencies={[\n          { name: 'DataTypeProvider', optional: true },\n          { name: 'TreeDataState' },\n          { name: 'SelectionState', optional: !showSelectionControls },\n          { name: 'IntegratedSelection', optional: !showSelectAll },\n          { name: 'Table' },\n          { name: 'TableHeaderRow', optional: true },\n        ]}\n      >\n        <Getter name=\"tableTreeColumnName\" value={forColumnName} />\n        <Template\n          name=\"tableHeaderCellBefore\"\n          predicate={({ column }: any) => column.name === forColumnName}\n        >\n          <ExpandButton\n            visible={false}\n            expanded={false}\n            onToggle={() => {}}\n          />\n          {showSelectionControls && showSelectAll && (\n            <TemplateConnector>\n              {({ selectAllAvailable, allSelected, someSelected }, { toggleSelectAll }) => (\n                <Checkbox\n                  disabled={!selectAllAvailable}\n                  checked={allSelected}\n                  indeterminate={someSelected}\n                  onChange={toggleSelectAll}\n                />\n              )}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTreeTableCell(tableRow, tableColumn, forColumnName)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                getCollapsedRows, expandedRowIds, selection, isTreeRowLeaf, getTreeRowLevel,\n                getCellValue,\n              }, {\n                toggleRowExpanded, toggleSelection,\n              }) => {\n                const { row, rowId } = params.tableRow;\n                const columnName = params.tableColumn.column!.name;\n                const value = getCellValue(row, columnName);\n                const collapsedRows = getCollapsedRows(row);\n                return (\n                  <TemplatePlaceholder\n                    name=\"valueFormatter\"\n                    params={{\n                      value,\n                      row,\n                      column: params.tableColumn.column,\n                    }}\n                  >\n                    {content => (\n                      <Cell\n                        {...params}\n                        row={row}\n                        column={params.tableColumn.column!}\n                        value={value}\n                      >\n                        <Indent\n                          level={getTreeRowLevel(row)}\n                        />\n                        <ExpandButton\n                          visible={collapsedRows ? !!collapsedRows.length : !isTreeRowLeaf(row)}\n                          expanded={expandedRowIds.indexOf(rowId) > -1}\n                          onToggle={() => toggleRowExpanded({ rowId })}\n                        />\n                        {showSelectionControls && (\n                          <Checkbox\n                            disabled={false}\n                            checked={selection.indexOf(rowId) > -1}\n                            indeterminate={false}\n                            onChange={() => toggleSelection({ rowIds: [rowId] })}\n                          />\n                        )}\n                        <Content>\n                          {content || value}\n                        </Content>\n                      </Cell>\n                    )}\n                  </TemplatePlaceholder>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders a table column with a toggle button and sorting indicators. */\nexport const TableTreeColumn: React.ComponentType<TableTreeColumnProps> = TableTreeColumnBase;\n","import * as React from 'react';\nimport {\n  Getter, Action, Plugin, createStateHelper, ActionFn, Getters,\n} from '@devexpress/dx-react-core';\nimport { changeSearchValue, searchFilterExpression } from '@devexpress/dx-grid-core';\nimport { SearchStateProps, SearchStateState } from '../types';\n\nclass SearchStateBase extends React.PureComponent<SearchStateProps, SearchStateState> {\n  static defaultProps = {\n    defaultValue: '',\n  };\n  changeValue: ActionFn<string>;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: props.value || props.defaultValue,\n    };\n    const stateHelper = createStateHelper(this, {\n      value: () => {\n        const { onValueChange } = this.props;\n        return onValueChange;\n      },\n    });\n\n    this.changeValue = stateHelper.applyFieldReducer\n      .bind(stateHelper, 'value', changeSearchValue);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      value = prevState.value,\n    } = nextProps;\n\n    return {\n      value,\n    };\n  }\n\n  render() {\n    const { value } = this.state;\n    const filterExpressionComputed = (\n      { filterExpression, columns }: Getters,\n    ) => searchFilterExpression(value, columns, filterExpression);\n\n    return (\n      <Plugin\n        name=\"SearchState\"\n      >\n        <Getter name=\"filterExpression\" computed={filterExpressionComputed} />\n        <Getter name=\"searchValue\" value={value} />\n        <Action name=\"changeSearchValue\" action={this.changeValue} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that manages the search state. */\nexport const SearchState: React.ComponentType<SearchStateProps> = SearchStateBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Template,\n  TemplatePlaceholder,\n  Plugin,\n  TemplateConnector,\n} from '@devexpress/dx-react-core';\nimport { SearchPanelProps } from '../types';\n\nconst pluginDependencies = [\n  { name: 'Toolbar' },\n  { name: 'SearchState' },\n];\n\nconst defaultMessages = {\n  searchPlaceholder: 'Search...',\n};\n\nclass SearchPanelBase extends React.PureComponent<SearchPanelProps> {\n  static defaultProps = {\n    messages: {},\n  };\n  static components = {\n    inputComponent: 'Input',\n  };\n\n  render() {\n    const { inputComponent: Input, messages } = this.props;\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n\n    return (\n      <Plugin\n        name=\"SearchPanel\"\n        dependencies={pluginDependencies}\n      >\n        <Template name=\"toolbarContent\">\n          <TemplatePlaceholder />\n          <TemplateConnector>\n            {({ searchValue }, { changeSearchValue }) => (\n              <Input\n                value={searchValue}\n                onValueChange={changeSearchValue}\n                getMessage={getMessage}\n              />\n            )}\n          </TemplateConnector>\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders the Search Panel. */\nexport const SearchPanel: React.ComponentType<SearchPanelProps> = SearchPanelBase;\n","import * as React from 'react';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplatePlaceholder,\n  TemplateConnector,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  isFixedTableRow,\n  tableColumnsWithFixed,\n  tableHeaderRowsWithFixed,\n  tableHeaderColumnChainsWithFixed,\n  calculateFixedColumnProps,\n} from '@devexpress/dx-grid-core';\nimport {\n  TableCellProps, TableRowProps, TableFixedColumnsProps, TableFixedColumnsState,\n} from '../types';\n\nconst tableHeaderRowsComputed = (\n  { tableHeaderRows }: Getters,\n) => tableHeaderRowsWithFixed(tableHeaderRows);\nconst tableHeaderColumnChainsComputed = (\n  { tableColumns, tableHeaderRows, tableHeaderColumnChains }: Getters,\n) => tableHeaderColumnChainsWithFixed(tableHeaderColumnChains, tableHeaderRows, tableColumns);\n\nconst CellPlaceholder = props => <TemplatePlaceholder params={props} />;\n\nconst pluginDependencies = [\n  { name: 'Table' },\n  { name: 'TableBandHeader', optional: true },\n  { name: 'TableColumnReordering', optional: true },\n  { name: 'TableEditColumn', optional: true },\n  { name: 'TableEditRow', optional: true },\n  { name: 'TableFilterRow', optional: true },\n  { name: 'TableHeaderRow', optional: true },\n  { name: 'TableSelection', optional: true },\n  { name: 'TableSummaryRow', optional: true },\n  { name: 'TableTreeColumn', optional: true },\n];\n\n// tslint:disable-next-line: max-line-length\nclass TableFixedColumnsBase extends React.PureComponent<TableFixedColumnsProps, TableFixedColumnsState> {\n  static components = {\n    cellComponent: 'Cell',\n    listenerRowComponent: 'ListenerRow',\n    listenerCellComponent: 'ListenerCell',\n  };\n  static defaultProps = {\n    leftColumns: [],\n    rightColumns: [],\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      tableColumnDimensions: {},\n    };\n  }\n\n  handleListenerSizeChange(key, width) {\n    this.setState(state => ({\n      tableColumnDimensions: {\n        ...state.tableColumnDimensions,\n        [key]: width,\n      },\n    }));\n  }\n\n  render() {\n    const {\n      cellComponent: Cell,\n      listenerRowComponent: ListenerRow,\n      listenerCellComponent: ListenerCell,\n    } = this.props;\n    const leftColumns = this.props.leftColumns!;\n    const rightColumns = this.props.rightColumns!;\n\n    const tableColumnsComputed = ({ tableColumns }: Getters) => tableColumnsWithFixed(\n      tableColumns,\n      leftColumns,\n      rightColumns,\n    );\n\n    return (\n      <Plugin\n        name=\"TableFixedColumns\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"tableHeaderRows\" computed={tableHeaderRowsComputed} />\n        <Getter name=\"tableColumns\" computed={tableColumnsComputed} />\n        <Getter name=\"tableHeaderColumnChains\" computed={tableHeaderColumnChainsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableColumn }: any) => !!tableColumn.fixed}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ tableColumns, tableHeaderColumnChains }) => {\n                const { tableColumnDimensions } = this.state;\n                const fixedColumnProps = calculateFixedColumnProps(\n                  params,\n                  { leftColumns, rightColumns },\n                  tableColumns,\n                  tableColumnDimensions,\n                  tableHeaderColumnChains,\n                );\n\n                return (\n                  <Cell\n                    {...params}\n                    {...fixedColumnProps}\n                    component={CellPlaceholder}\n                  />\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isFixedTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <ListenerRow {...params} />\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={({ tableRow }: any) => !!isFixedTableRow(tableRow)}\n        >\n          {(params: TableCellProps) => (\n            <ListenerCell\n              {...params}\n              listen={!!params.tableColumn.fixed}\n              onSizeChange={({\n                width,\n              }) => this.handleListenerSizeChange(params.tableColumn.key, width)}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that enables you to fix columns to the left and right sides of the grid. */\nexport const TableFixedColumns: React.ComponentType<TableFixedColumnsProps> = TableFixedColumnsBase;\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { SummaryStateProps } from '../types';\n\nclass SummaryStateBase extends React.PureComponent<SummaryStateProps> {\n  render() {\n    const { totalItems, groupItems, treeItems } = this.props;\n\n    return (\n      <Plugin\n        name=\"SummaryState\"\n      >\n        <Getter name=\"totalSummaryItems\" value={totalItems} />\n        <Getter name=\"groupSummaryItems\" value={groupItems} />\n        <Getter name=\"treeSummaryItems\" value={treeItems} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that provides items for total, group, and tree summaries. */\nexport const SummaryState: React.ComponentType<SummaryStateProps> = SummaryStateBase;\n","import * as React from 'react';\nimport { Getter, Plugin, Getters } from '@devexpress/dx-react-core';\nimport {\n  defaultSummaryCalculator,\n  totalSummaryValues,\n  groupSummaryValues,\n  treeSummaryValues,\n  SummaryCalculator,\n} from '@devexpress/dx-grid-core';\nimport { IntegratedSummaryProps, SummaryType } from '../types';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n];\n\nclass IntegratedSummaryBase extends React.PureComponent<IntegratedSummaryProps> {\n  static defaultCalculator: SummaryCalculator = defaultSummaryCalculator;\n\n  render() {\n    const { calculator } = this.props;\n\n    const totalSummaryValuesComputed = ({\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n    }: Getters) => totalSummaryValues(\n      rows,\n      totalSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getCollapsedRows,\n      calculator,\n    );\n\n    const groupSummaryValuesComputed = ({\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n    }: Getters) => groupSummaryValues(\n      rows,\n      groupSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      calculator,\n    );\n\n    const treeSummaryValuesComputed = ({\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n    }: Getters) => treeSummaryValues(\n      rows,\n      treeSummaryItems,\n      getCellValue,\n      getRowLevelKey,\n      isGroupRow,\n      getRowId,\n      calculator,\n    );\n\n    return (\n      <Plugin\n        name=\"IntegratedSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" computed={totalSummaryValuesComputed} />\n        <Getter name=\"groupSummaryValues\" computed={groupSummaryValuesComputed} />\n        <Getter name=\"treeSummaryValues\" computed={treeSummaryValuesComputed} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that performs a built-in data summary calculation. */\nexport const IntegratedSummary: React.ComponentType<IntegratedSummaryProps> & {\n  /** The built-in summary calculator. */\n  defaultCalculator: (type: SummaryType, rows: Array<any>, getValue: (row: any) => any) => any;\n} = IntegratedSummaryBase;\n","import * as React from 'react';\nimport { Getter, Plugin } from '@devexpress/dx-react-core';\nimport { CustomSummaryProps } from '../types/summary/custom-summary.types';\n\nconst pluginDependencies = [\n  { name: 'SummaryState' },\n];\n\nclass CustomSummaryBase extends React.PureComponent<CustomSummaryProps> {\n  render() {\n    const { totalValues, groupValues, treeValues } = this.props;\n\n    return (\n      <Plugin\n        name=\"CustomSummary\"\n        dependencies={pluginDependencies}\n      >\n        <Getter name=\"totalSummaryValues\" value={totalValues} />\n        <Getter name=\"groupSummaryValues\" value={groupValues} />\n        <Getter name=\"treeSummaryValues\" value={treeValues} />\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that allows you to calculate a custom summary. */\nexport const CustomSummary: React.ComponentType<CustomSummaryProps> = CustomSummaryBase;\n","import * as React from 'react';\nimport { getMessagesFormatter } from '@devexpress/dx-core';\nimport {\n  Getter,\n  Template,\n  Plugin,\n  TemplateConnector,\n  TemplatePlaceholder,\n  Getters,\n} from '@devexpress/dx-react-core';\nimport {\n  tableRowsWithSummaries,\n  tableRowsWithTotalSummaries,\n  isTotalSummaryTableCell,\n  isGroupSummaryTableCell,\n  isTreeSummaryTableCell,\n  isTotalSummaryTableRow,\n  isGroupSummaryTableRow,\n  isTreeSummaryTableRow,\n  getColumnSummaries,\n  TABLE_TREE_SUMMARY_TYPE,\n  TABLE_GROUP_SUMMARY_TYPE,\n  TABLE_TOTAL_SUMMARY_TYPE,\n  ColumnSummary,\n} from '@devexpress/dx-grid-core';\nimport { TableCellProps, TableRowProps, SummaryItemProps, TableSummaryRowProps } from '../types';\n\nconst dependencies = [\n  { name: 'DataTypeProvider', optional: true },\n  { name: 'SummaryState' },\n  { name: 'CustomSummary', optional: true },\n  { name: 'IntegratedSummary', optional: true },\n  { name: 'Table' },\n  { name: 'TableTreeColumn', optional: true },\n];\n\nconst defaultMessages = {\n  sum: 'Sum',\n  min: 'Min',\n  max: 'Max',\n  avg: 'Avg',\n  count: 'Count',\n};\n\nconst tableBodyRowsComputed = ({\n  tableBodyRows,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n}: Getters) => tableRowsWithSummaries(tableBodyRows, getRowLevelKey, isGroupRow, getRowId);\nconst tableFooterRowsComputed = ({\n  tableFooterRows,\n}: Getters) => tableRowsWithTotalSummaries(tableFooterRows);\n\nconst defaultTypelessSummaries = ['count'];\n\nclass TableSummaryRowBase extends React.PureComponent<TableSummaryRowProps> {\n  static TREE_ROW_TYPE = TABLE_TREE_SUMMARY_TYPE;\n  static GROUP_ROW_TYPE = TABLE_GROUP_SUMMARY_TYPE;\n  static TOTAL_ROW_TYPE = TABLE_TOTAL_SUMMARY_TYPE;\n  static defaultProps = {\n    formatlessSummaryTypes: [],\n    messages: {},\n  };\n  static components = {\n    totalRowComponent: 'TotalRow',\n    groupRowComponent: 'GroupRow',\n    treeRowComponent: 'TreeRow',\n    totalCellComponent: 'TotalCell',\n    groupCellComponent: 'GroupCell',\n    treeCellComponent: 'TreeCell',\n    treeColumnCellComponent: 'TableTreeCell',\n    treeColumnContentComponent: 'TableTreeContent',\n    treeColumnIndentComponent: 'TableTreeIndent',\n    itemComponent: 'Item',\n  };\n\n  renderContent(column, columnSummaries: ReadonlyArray<ColumnSummary>) {\n    const {\n      formatlessSummaryTypes,\n      itemComponent: Item,\n      messages,\n    } = this.props;\n\n    const getMessage = getMessagesFormatter({ ...defaultMessages, ...messages });\n    const SummaryItem: React.SFC<SummaryItemProps> = ({ summary, children }) => (\n      <Item\n        getMessage={getMessage}\n        type={summary.type}\n        value={summary.value}\n      >\n        {children || String(summary.value)}\n      </Item>\n    );\n\n    return (\n      <React.Fragment>\n        {columnSummaries.map((summary) => {\n          if (summary.value === null\n            || formatlessSummaryTypes.includes(summary.type)\n            || defaultTypelessSummaries.includes(summary.type)) {\n            return <SummaryItem key={summary.type} summary={summary} />;\n          }\n          return (\n            <TemplatePlaceholder\n              key={summary.type}\n              name=\"valueFormatter\"\n              params={{\n                column,\n                value: summary.value,\n              }}\n            >\n              {content => (\n                <SummaryItem summary={summary}>\n                  {content}\n                </SummaryItem>\n              )}\n            </TemplatePlaceholder>\n          );\n        })}\n      </React.Fragment>\n    );\n  }\n\n  render() {\n    const {\n      totalRowComponent: TotalRow,\n      groupRowComponent: GroupRow,\n      treeRowComponent: TreeRow,\n      totalCellComponent: TotalCell,\n      groupCellComponent: GroupCell,\n      treeCellComponent: TreeCell,\n      treeColumnCellComponent: TreeColumnCell,\n      treeColumnContentComponent: TreeColumnContent,\n      treeColumnIndentComponent: TreeColumnIndent,\n    } = this.props;\n\n    return (\n      <Plugin\n        name=\"TableSummaryRow\"\n        dependencies={dependencies}\n      >\n        <Getter name=\"tableBodyRows\" computed={tableBodyRowsComputed} />\n        <Getter name=\"tableFooterRows\" computed={tableFooterRowsComputed} />\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTotalSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ totalSummaryItems, totalSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  totalSummaryItems,\n                  params.tableColumn.column!.name,\n                  totalSummaryValues,\n                );\n                return (\n                  <TotalCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </TotalCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isGroupSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({ groupSummaryItems, groupSummaryValues }) => {\n                const columnSummaries = getColumnSummaries(\n                  groupSummaryItems,\n                  params.tableColumn.column!.name,\n                  groupSummaryValues[params.tableRow.row.compoundKey],\n                );\n                return (\n                  <GroupCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </GroupCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableCell\"\n          predicate={(\n            { tableRow, tableColumn }: any,\n          ) => isTreeSummaryTableCell(tableRow, tableColumn)}\n        >\n          {(params: TableCellProps) => (\n            <TemplateConnector>\n              {({\n                treeSummaryItems,\n                treeSummaryValues,\n                tableTreeColumnName,\n                getRowId,\n                getTreeRowLevel,\n              }) => {\n                const columnSummaries = getColumnSummaries(\n                  treeSummaryItems,\n                  params.tableColumn.column!.name,\n                  treeSummaryValues[getRowId(params.tableRow.row)],\n                );\n                if (tableTreeColumnName === params.tableColumn.column!.name) {\n                  return (\n                    <TreeColumnCell\n                      {...params}\n                      column={params.tableColumn.column!}\n                    >\n                      <TreeColumnIndent\n                        level={getTreeRowLevel(params.tableRow.row)}\n                      />\n                      <TreeColumnContent>\n                        {this.renderContent(params.tableColumn.column, columnSummaries)}\n                      </TreeColumnContent>\n                    </TreeColumnCell>\n                  );\n                }\n                return (\n                  <TreeCell\n                    {...params}\n                    column={params.tableColumn.column!}\n                  >\n                    {this.renderContent(params.tableColumn.column, columnSummaries)}\n                  </TreeCell>\n                );\n              }}\n            </TemplateConnector>\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isTotalSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <TotalRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isGroupSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <GroupRow\n              {...params}\n            />\n          )}\n        </Template>\n        <Template\n          name=\"tableRow\"\n          predicate={({ tableRow }: any) => !!isTreeSummaryTableRow(tableRow)}\n        >\n          {(params: TableRowProps) => (\n            <TreeRow\n              {...params}\n            />\n          )}\n        </Template>\n      </Plugin>\n    );\n  }\n}\n\n/** A plugin that renders table rows that display a total, group, and tree summary. */\nexport const TableSummaryRow: React.ComponentType<TableSummaryRowProps> & {\n  /** The tree summary row type's indentifier. */\n  TREE_ROW_TYPE: symbol;\n  /** The group summary row type's indentifier. */\n  GROUP_ROW_TYPE: symbol;\n  /** The total row type's indentifier. */\n  TOTAL_ROW_TYPE: symbol;\n} = TableSummaryRowBase;\n","import * as React from 'react';\nimport { Getter, Action, Plugin, Getters, Actions } from '@devexpress/dx-react-core';\nimport {\n  recalculateBounds, calculateRequestedRange, virtualRowsWithCache,\n  trimRowsToInterval, intervalUtil, emptyVirtualRows, plainRows, loadedRowsStart,\n  VirtualRows, Interval,\n} from '@devexpress/dx-grid-core';\nimport { VirtualTableStateProps, VirtualTableStateState } from '../../types';\n\nconst virtualRowsComputed = (\n  { skip, rows, virtualRowsCache }: Getters,\n) => virtualRowsWithCache(skip, rows, virtualRowsCache);\n\nconst rowsComputed = ({ virtualRows }: Getters) => plainRows(virtualRows);\n\nconst loadedRowsStartComputed = ({ virtualRows }: Getters) => loadedRowsStart(virtualRows);\n\n// tslint:disable-next-line: max-line-length\nclass VirtualTableStateBase extends React.PureComponent<VirtualTableStateProps, VirtualTableStateState> {\n  static defaultProps = {\n    pageSize: 100,\n  };\n  requestTimer: number = 0;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      virtualRowsCache: emptyVirtualRows,\n      requestedPageIndex: undefined,\n      availableRowCount: props.totalRowCount || 0,\n    };\n  }\n\n  requestNextPageAction = (\n    { referenceIndex, forceReload },\n    { virtualRows, skip }: Getters,\n  ) => {\n    const { pageSize, totalRowCount } = this.props;\n\n    let newBounds;\n    let requestedRange;\n    let actualVirtualRows = virtualRows;\n    if (forceReload) {\n      newBounds = requestedRange = { start: skip, end: skip + pageSize! * 2 };\n      actualVirtualRows = emptyVirtualRows;\n    } else {\n      const loadedInterval = intervalUtil.getRowsInterval(virtualRows);\n      newBounds = recalculateBounds(referenceIndex, pageSize!, totalRowCount);\n      requestedRange = calculateRequestedRange(\n        loadedInterval, newBounds, referenceIndex, pageSize!,\n      );\n    }\n\n    const { requestedPageIndex } = this.state;\n    const newPageIndex = requestedRange.start;\n    const loadCount = (requestedRange.end - requestedRange.start);\n    const shouldLoadRows = (newPageIndex !== requestedPageIndex && loadCount > 0) || forceReload;\n\n    if (shouldLoadRows) {\n      this.requestNextPage(newPageIndex, loadCount, actualVirtualRows, newBounds);\n    }\n  }\n\n  requestNextPage(\n    newPageIndex: number, loadCount: number, virtualRows: VirtualRows, newBounds: Interval,\n  ) {\n    const { getRows, infiniteScrolling, totalRowCount } = this.props;\n    const { availableRowCount: stateAvailableCount } = this.state;\n\n    if (this.requestTimer !== 0) {\n      clearTimeout(this.requestTimer);\n    }\n    this.requestTimer = window.setTimeout(() => {\n      getRows(newPageIndex, loadCount);\n\n      const virtualRowsCache = trimRowsToInterval(virtualRows, newBounds);\n      const newRowCount = infiniteScrolling\n        ? Math.max(newBounds.end + loadCount, stateAvailableCount)\n        : totalRowCount;\n\n      this.setState({\n        virtualRowsCache,\n        availableRowCount: newRowCount,\n        requestedPageIndex: newPageIndex,\n      });\n    }, 50);\n  }\n\n  clearRowsCacheAction = (\n    _: any,\n    __: Getters,\n    { requestNextPage }: Actions,\n  ) => {\n    this.setState({\n      virtualRowsCache: emptyVirtualRows,\n    });\n    requestNextPage({ forceReload: true });\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const {\n      availableRowCount = prevState.availableRowCount,\n    } = nextProps;\n\n    return {\n      availableRowCount,\n    };\n  }\n\n  componentDidMount() {\n    const { getRows, pageSize, infiniteScrolling, totalRowCount } = this.props;\n    getRows(0, 2 * pageSize!);\n\n    const newRowCount = infiniteScrolling ? 2 * pageSize! : totalRowCount;\n    this.setState({\n      availableRowCount: newRowCount,\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.requestTimer !== 0) {\n      window.clearTimeout(this.requestTimer);\n    }\n  }\n\n  render() {\n    const { virtualRowsCache, availableRowCount: stateRowCount } = this.state;\n    const { skip, pageSize, loading, infiniteScrolling, totalRowCount } = this.props;\n\n    const availableRowCount = infiniteScrolling ? stateRowCount : totalRowCount;\n\n    return (\n      <Plugin\n        name=\"VirtualTableState\"\n      >\n        <Getter name=\"isDataRemote\" value />\n        <Getter name=\"isDataLoading\" value={loading} />\n        <Getter name=\"isScrollingInfinite\" value={infiniteScrolling} />\n        <Getter name=\"skip\" value={skip} />\n        <Getter name=\"virtualRowsCache\" value={virtualRowsCache} />\n        <Getter name=\"pageSize\" value={pageSize} />\n        <Getter name=\"availableRowCount\" value={availableRowCount} />\n\n        <Getter name=\"virtualRows\" computed={virtualRowsComputed} />\n        <Getter name=\"rows\" computed={rowsComputed} />\n        <Getter name=\"loadedRowsStart\" computed={loadedRowsStartComputed} />\n\n        <Action name=\"requestNextPage\" action={this.requestNextPageAction} />\n        <Action name=\"clearRowCache\" action={this.clearRowsCacheAction} />\n        <Action name=\"changeColumnSorting\" action={this.clearRowsCacheAction} />\n        <Action name=\"changeColumnFilter\" action={this.clearRowsCacheAction} />\n      </Plugin>\n    );\n  }\n}\n\nexport const VirtualTableState: React.ComponentType<VirtualTableStateProps> = VirtualTableStateBase;\n","/* globals requestAnimationFrame cancelAnimationFrame */\n\nimport * as React from 'react';\nimport {\n  getAnimations,\n  filterActiveAnimations,\n  evalAnimations,\n  TABLE_FLEX_TYPE,\n  ColumnAnimationMap,\n} from '@devexpress/dx-grid-core';\nimport { shallowEqual } from '@devexpress/dx-core';\nimport { TableLayoutCoreProps, TableLayoutCoreState } from '../types';\n\nclass TableLayoutBase extends React.PureComponent<TableLayoutCoreProps, TableLayoutCoreState> {\n  animations: ColumnAnimationMap;\n  savedScrollWidth: { [key: number]: number };\n  savedOffsetWidth = -1;\n  tableRef: React.RefObject<HTMLTableElement>;\n  raf = -1;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      animationState: new Map(),\n    };\n\n    this.animations = new Map();\n    this.savedScrollWidth = {};\n    this.tableRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps) {\n    const { columns } = this.props;\n    const { columns: prevColumns } = prevProps;\n    const { animationState } = this.state;\n\n    const activeAnimationExists = !shallowEqual(columns, prevColumns)\n      || !!animationState.size || !!this.animations.size;\n\n    // NOTE: animation should be recomputed only when columns are changed or\n    // an active animation is in progress. Otherwise it will be recalculated on\n    // each scroll event.\n    if (activeAnimationExists) {\n      this.processAnimation(prevColumns);\n    }\n  }\n\n  processAnimation(prevColumns) {\n    const { columns } = this.props;\n    const tableWidth = this.getTableWidth(prevColumns, columns);\n\n    this.animations = getAnimations(prevColumns, columns, tableWidth, this.animations);\n\n    cancelAnimationFrame(this.raf);\n    this.raf = requestAnimationFrame(this.processAnimationFrame.bind(this));\n  }\n\n  getTableWidth(prevColumns, columns) {\n    const { offsetWidth, scrollWidth } = this.tableRef.current!;\n    const { animationState } = this.state;\n\n    const widthChanged = this.savedOffsetWidth !== offsetWidth\n      || !this.savedScrollWidth[columns.length];\n    const columnCountChanged = columns.length !== prevColumns.length;\n\n    if (columnCountChanged || (widthChanged && !animationState.size)) {\n      this.savedScrollWidth = {};\n      this.savedScrollWidth[columns.length] = scrollWidth;\n      this.savedOffsetWidth = offsetWidth;\n    }\n\n    return this.savedScrollWidth[columns.length];\n  }\n\n  getColumns() {\n    const { columns } = this.props;\n    const { animationState } = this.state;\n\n    let result = columns;\n\n    const isFixedWidth = columns.filter(column => column.width === undefined).length === 0;\n    if (isFixedWidth) {\n      // presumably a flex column added here instead of in a getter in the Table plugin\n      // to make sure that all manipulations on taleColumns have already done earlier\n      result = [...result, { key: TABLE_FLEX_TYPE.toString(), type: TABLE_FLEX_TYPE }];\n    }\n\n    if (animationState.size) {\n      result = result\n        .map(column => (animationState.has(column.key)\n          ? { ...column, animationState: animationState.get(column.key) }\n          : column));\n    }\n\n    return result;\n  }\n\n  processAnimationFrame() {\n    const { animationState: animationComponentState } = this.state;\n    this.animations = filterActiveAnimations(this.animations);\n\n    if (!this.animations.size) {\n      if (animationComponentState.size) {\n        this.setState({ animationState: new Map() });\n      }\n      return;\n    }\n\n    const animationState = evalAnimations(this.animations);\n    this.setState({ animationState });\n  }\n\n  render() {\n    const {\n      layoutComponent: Layout,\n      minColumnWidth,\n      ...restProps\n    } = this.props;\n    const columns = this.getColumns();\n    const minWidth = columns\n      .map(column => column.width || (column.type === TABLE_FLEX_TYPE ? 0 : minColumnWidth))\n      .reduce((acc, width) => acc + width, 0);\n\n    return (\n      <Layout\n        {...restProps}\n        tableRef={this.tableRef}\n        columns={columns}\n        minWidth={minWidth}\n        minColumnWidth={minColumnWidth}\n      />\n    );\n  }\n}\n\n/** @internal */\nexport const TableLayout: React.ComponentType<TableLayoutCoreProps> = TableLayoutBase;\n","import * as React from 'react';\nimport { TableColumn } from '@devexpress/dx-grid-core';\n\n/** @internal */\nexport class ColumnGroup extends React.PureComponent<{ columns: TableColumn[] }> {\n  render() {\n    const { columns } = this.props;\n\n    return (\n      <colgroup>\n        {columns.map(({ key, width }) => (\n          <col\n            key={key}\n            style={width !== undefined\n              ? { width: `${width}px` }\n              : undefined}\n          />\n        ))}\n      </colgroup>\n    );\n  }\n}\n","export const getRowStyle = ({ row }) => (row.height !== undefined\n  ? ({ height: `${row.height}px` })\n  : undefined);\n","import * as React from 'react';\nimport { VirtualRowLayoutProps } from '../../types';\nimport { getRowStyle } from '../../utils/helpers';\n\nexport class VirtualRowLayout extends React.Component<VirtualRowLayoutProps> {\n  shouldComponentUpdate(nextProps) {\n    const { cells: prevCells, row: prevRow } = this.props;\n    const { cells: nextCells, row: nextRow } = nextProps;\n\n    if (prevRow !== nextRow || prevCells.length !== nextCells.length) {\n      return true;\n    }\n\n    const propsAreNotEqual = nextCells.some((nextCell, i) => {\n      const prevCell = prevCells[i];\n      return prevCell.column !== nextCell.column || prevCell.colSpan !== nextCell.colSpan;\n    });\n\n    return propsAreNotEqual;\n  }\n\n  render() {\n    const { row, cells, rowComponent: Row, cellComponent: Cell } = this.props;\n    return (\n      <Row\n        tableRow={row}\n        style={getRowStyle({ row })}\n      >\n        {cells.map(({ column, colSpan }) => {\n          return (\n            <Cell\n              key={column.key}\n              tableRow={row}\n              tableColumn={column}\n              colSpan={colSpan}\n            />\n          );\n        })}\n      </Row>\n    );\n  }\n}\n","import * as React from 'react';\nimport { RefHolder } from '@devexpress/dx-react-core';\nimport { ColumnGroup } from './column-group';\nimport { VirtualTableLayoutBlockProps } from '../../types';\nimport { VirtualRowLayout } from './virtual-row-layout';\n\n// tslint:disable-next-line: max-line-length\nexport class VirtualTableLayoutBlock extends React.PureComponent<VirtualTableLayoutBlockProps, any> {\n  static defaultProps = {\n    blockRefsHandler: () => {},\n    rowRefsHandler: () => {},\n    tableRef: React.createRef(),\n  };\n\n  render() {\n    const {\n      name,\n      tableRef,\n      collapsedGrid,\n      minWidth,\n      blockRefsHandler,\n      rowRefsHandler,\n      tableComponent: Table,\n      bodyComponent: Body,\n      cellComponent,\n      rowComponent,\n      marginBottom,\n    } = this.props;\n\n    return (\n      <RefHolder\n        ref={ref => blockRefsHandler(name, ref)}\n      >\n        <Table\n          tableRef={tableRef}\n          style={{\n            minWidth: `${minWidth}px`,\n            ...marginBottom ? { marginBottom: `${marginBottom}px` } : null,\n          }}\n        >\n          <ColumnGroup\n            columns={collapsedGrid.columns}\n          />\n          <Body>\n            {collapsedGrid.rows.map((visibleRow) => {\n              const { row, cells = [] } = visibleRow;\n\n              return (\n                <RefHolder\n                  key={row.key}\n                  ref={ref => rowRefsHandler(row, ref)}\n                >\n                  <VirtualRowLayout\n                    row={row}\n                    cells={cells}\n                    rowComponent={rowComponent}\n                    cellComponent={cellComponent}\n                  />\n                </RefHolder>\n              );\n            })}\n          </Body>\n        </Table>\n      </RefHolder>\n    );\n  }\n\n}\n","import * as React from 'react';\nimport { Sizer } from '@devexpress/dx-react-core';\nimport { MemoizedFunction, memoize, isEdgeBrowser } from '@devexpress/dx-core';\nimport {\n  TableColumn, GetColumnWidthFn, getCollapsedGrids,\n  getColumnWidthGetter, TABLE_STUB_TYPE, getVisibleRowsBounds, GridRowsBoundaries,\n} from '@devexpress/dx-grid-core';\nimport { VirtualTableLayoutState, VirtualTableLayoutProps } from '../../types';\nimport { findDOMNode } from 'react-dom';\nimport { VirtualTableLayoutBlock } from './virtual-table-layout-block';\n\nconst AUTO_HEIGHT = 'auto';\n\nconst defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  headTableComponent: () => null,\n  footerComponent: () => null,\n  footerTableComponent: () => null,\n  ensureNextVirtualPage: () => void 0,\n};\ntype PropsType = VirtualTableLayoutProps & typeof defaultProps;\n\n/** @internal */\n// tslint:disable-next-line: max-line-length\nexport class VirtualTableLayout extends React.PureComponent<PropsType, VirtualTableLayoutState> {\n  static defaultProps = defaultProps;\n  getColumnWidthGetter: MemoizedFunction<[TableColumn[], number, number], GetColumnWidthFn>;\n  rowRefs = new Map();\n  blockRefs = new Map();\n  isEdgeBrowser = false;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rowHeights: new Map(),\n      viewportTop: 0,\n      viewportLeft: 0,\n      containerWidth: 800,\n      containerHeight: 600,\n      height: 0,\n      headerHeight: 0,\n      bodyHeight: 0,\n      footerHeight: 0,\n    };\n\n    const headerHeight = props.headerRows\n      .reduce((acc, row) => acc + this.getRowHeight(row), 0);\n    const footerHeight = props.footerRows\n      .reduce((acc, row) => acc + this.getRowHeight(row), 0);\n\n    this.state = {\n      headerHeight,\n      footerHeight,\n      ...this.state,\n    };\n\n    this.getColumnWidthGetter = memoize(\n      (tableColumns, tableWidth, minColumnWidth) => (\n        getColumnWidthGetter(tableColumns, tableWidth, minColumnWidth)\n      ),\n    );\n  }\n\n  componentDidMount() {\n    this.isEdgeBrowser = isEdgeBrowser();\n\n    this.storeRowHeights();\n    this.storeBlockHeights();\n  }\n\n  componentDidUpdate() {\n    this.storeRowHeights();\n    this.storeBlockHeights();\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { rowHeights: prevRowHeight } = prevState;\n    const rowHeights = [...nextProps.headerRows, ...nextProps.bodyRows, ...nextProps.footerRows]\n      .reduce(\n        (acc, row) => {\n          const rowHeight = prevRowHeight.get(row.key);\n          if (rowHeight !== undefined) {\n            acc.set(row.key, rowHeight);\n          }\n          return acc;\n        },\n        new Map(),\n      );\n    return { rowHeights };\n  }\n\n  getRowHeight = (row) => {\n    const { rowHeights } = this.state;\n    const { estimatedRowHeight } = this.props;\n    if (row) {\n      const storedHeight = rowHeights.get(row.key);\n      if (storedHeight !== undefined) return storedHeight;\n      if (row.height) return row.height;\n    }\n    return estimatedRowHeight;\n  }\n\n  registerRowRef = (row, ref) => {\n    if (ref === null) {\n      this.rowRefs.delete(row);\n    } else {\n      this.rowRefs.set(row, ref);\n    }\n  }\n\n  registerBlockRef = (name, ref) => {\n    if (ref === null) {\n      this.blockRefs.delete(name);\n    } else {\n      this.blockRefs.set(name, ref);\n    }\n  }\n\n  storeRowHeights() {\n    const rowsWithChangedHeights = Array.from(this.rowRefs.entries())\n      .map(([row, ref]) => [row, findDOMNode(ref)])\n      .filter(([, node]) => !!node)\n      .map(([row, node]) => [row, node.getBoundingClientRect().height])\n      .filter(([row]) => row.type !== TABLE_STUB_TYPE)\n      .filter(([row, height]) => height !== this.getRowHeight(row));\n\n    if (rowsWithChangedHeights.length) {\n      const { rowHeights } = this.state;\n      rowsWithChangedHeights\n        .forEach(([row, height]) => rowHeights.set(row.key, height));\n\n      this.setState({\n        rowHeights,\n      });\n    }\n  }\n\n  storeBlockHeights() {\n    const getBlockHeight = blockName => (this.blockRefs.get(blockName)\n      ? (findDOMNode(this.blockRefs.get(blockName)) as HTMLElement).getBoundingClientRect().height\n      : 0\n    );\n    const headerHeight = getBlockHeight('header');\n    const bodyHeight = getBlockHeight('body');\n    const footerHeight = getBlockHeight('footer');\n\n    const {\n      headerHeight: prevHeaderHeight,\n      bodyHeight: prevBodyHeight,\n      footerHeight: prevFooterHeight,\n    } = this.state;\n\n    if (prevHeaderHeight !== headerHeight\n      || prevBodyHeight !== bodyHeight\n      || prevFooterHeight !== footerHeight) {\n      this.setState({\n        headerHeight,\n        bodyHeight,\n        footerHeight,\n      });\n    }\n  }\n\n  updateViewport = (e, visibleRowBoundaries, ensureNextVirtualPage) => {\n    const node = e.target;\n\n    if (this.shouldSkipScrollEvent(e)) {\n      return;\n    }\n\n    const { estimatedRowHeight } = this.props;\n    const { containerHeight } = this.state;\n    const { scrollTop: viewportTop, scrollLeft: viewportLeft } = node;\n    ensureNextVirtualPage({\n      estimatedRowHeight,\n      visibleRowBoundaries,\n      viewportTop,\n      containerHeight,\n    });\n\n    this.setState({\n      viewportTop,\n      viewportLeft,\n    });\n  }\n\n  handleContainerSizeChange = ({ width, height }) => {\n    this.setState({ containerWidth: width, containerHeight: height });\n  }\n\n  shouldSkipScrollEvent(e) {\n    const node = e.target;\n\n    // NOTE: prevent nested scroll to update viewport\n    if (node !== e.currentTarget) {\n      return true;\n    }\n    // NOTE: prevent iOS to flicker in bounces and correct rendering on high dpi screens\n    const correction = this.isEdgeBrowser ? 1 : 0;\n    const nodeHorizontalOffset = parseInt(node.scrollLeft + node.clientWidth, 10) - correction;\n    const nodeVerticalOffset = parseInt(node.scrollTop + node.clientHeight, 10) - correction;\n    if (node.scrollTop < 0\n      || node.scrollLeft < 0\n      || nodeHorizontalOffset > Math.max(node.scrollWidth, node.clientWidth)\n      || nodeVerticalOffset > Math.max(node.scrollHeight, node.clientHeight)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getVisibleBoundaries() {\n    const {\n      loadedRowsStart,\n      bodyRows,\n      headerRows,\n      footerRows,\n      estimatedRowHeight,\n    } = this.props;\n\n    return getVisibleRowsBounds(\n      this.state, { loadedRowsStart, bodyRows, headerRows, footerRows },\n      estimatedRowHeight, this.getRowHeight,\n    );\n  }\n\n  getCollapsedGrids(visibleRowBoundaries: GridRowsBoundaries) {\n    const { viewportLeft, containerWidth } = this.state;\n    const {\n      headerRows, bodyRows, footerRows,\n      columns, loadedRowsStart, totalRowCount,\n      getCellColSpan, minColumnWidth,\n    } = this.props;\n    const getColumnWidth = this.getColumnWidthGetter(columns, containerWidth, minColumnWidth!);\n\n    return getCollapsedGrids({\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      loadedRowsStart,\n      totalRowCount,\n      getCellColSpan,\n      viewportLeft,\n      containerWidth,\n      visibleRowBoundaries,\n      getColumnWidth,\n      getRowHeight: this.getRowHeight,\n    });\n  }\n\n  render() {\n    const {\n      containerComponent: Container,\n      headTableComponent: HeadTable,\n      footerTableComponent: FootTable,\n      tableComponent: Table,\n      headComponent: Head,\n      bodyComponent: Body,\n      footerComponent: Footer,\n      tableRef,\n      height,\n      headerRows,\n      footerRows,\n      ensureNextVirtualPage,\n      minColumnWidth,\n      minWidth,\n      cellComponent,\n      rowComponent,\n    } = this.props;\n    const {\n      containerHeight,\n      headerHeight,\n      bodyHeight,\n      footerHeight,\n    } = this.state;\n\n    const visibleRowBoundaries = this.getVisibleBoundaries();\n    const collapsedGrids = this.getCollapsedGrids(visibleRowBoundaries);\n    const commonProps = {\n      cellComponent,\n      rowComponent,\n      minColumnWidth,\n      minWidth,\n      blockRefsHandler: this.registerBlockRef,\n      rowRefsHandler: this.registerRowRef,\n    };\n\n    return (\n      <Sizer\n        onSizeChange={this.handleContainerSizeChange}\n        containerComponent={Container}\n        style={{\n          ...(height === AUTO_HEIGHT ? null : { height }),\n        }}\n        onScroll={\n          e => this.updateViewport(e, visibleRowBoundaries, ensureNextVirtualPage)\n        }\n      >\n        {\n          (!!headerRows.length) && (\n            <VirtualTableLayoutBlock\n              {...commonProps}\n              name=\"header\"\n              collapsedGrid={collapsedGrids.headerGrid}\n              tableComponent={HeadTable}\n              bodyComponent={Head}\n            />\n          )\n        }\n        <VirtualTableLayoutBlock\n          {...commonProps}\n          name=\"body\"\n          collapsedGrid={collapsedGrids.bodyGrid}\n          tableComponent={Table}\n          bodyComponent={Body}\n          tableRef={tableRef}\n          marginBottom={Math.max(0, containerHeight - headerHeight - bodyHeight - footerHeight)}\n        />\n        {\n          (!!footerRows.length) && (\n            <VirtualTableLayoutBlock\n              {...commonProps}\n              name=\"footer\"\n              collapsedGrid={collapsedGrids.footerGrid}\n              tableComponent={FootTable}\n              bodyComponent={Footer}\n            />\n          )\n        }\n      </Sizer>\n    );\n  }\n}\n","import * as React from 'react';\nimport { RowLayoutProps } from '../../types';\nimport { getRowStyle } from '../../utils/helpers';\n\nconst getColumnStyle = ({ column }) => column.animationState;\n\n/** @internal */\nexport class RowLayout extends React.PureComponent<RowLayoutProps> {\n  render() {\n    const {\n      row,\n      columns,\n      rowComponent: Row,\n      cellComponent: Cell,\n      getCellColSpan,\n    } = this.props;\n    const getColSpan = (\n      tableRow, tableColumn,\n    ) => getCellColSpan!({ tableRow, tableColumn, tableColumns: columns });\n\n    return (\n      <Row\n        tableRow={row}\n        style={getRowStyle({ row })}\n      >\n        {\n          columns\n            .map(column => (\n              <Cell\n                key={column.key}\n                tableRow={row}\n                tableColumn={column}\n                style={getColumnStyle({ column })}\n                colSpan={getColSpan(row, column)}\n              />\n            ))\n        }\n      </Row>\n    );\n  }\n}\n","import * as React from 'react';\nimport { RowLayout } from './row-layout';\nimport { RowsBlockLayoutProps } from '../../types';\n\n/** @internal */\nexport class RowsBlockLayout extends React.PureComponent<RowsBlockLayoutProps> {\n  render() {\n    const {\n      rows,\n      columns,\n      blockComponent: Block,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    } = this.props;\n\n    return (\n      <Block>\n        {\n          rows\n            .map(row => (\n              <RowLayout\n                key={row.key}\n                row={row}\n                columns={columns}\n                rowComponent={rowComponent}\n                cellComponent={cellComponent}\n                getCellColSpan={getCellColSpan}\n              />\n            ))\n        }\n      </Block>\n    );\n  }\n}\n","import * as React from 'react';\nimport { ColumnGroup } from './column-group';\nimport { RowsBlockLayout } from './rows-block-layout';\nimport { TableLayoutProps } from '../../types';\n\nconst defaultProps = {\n  headerRows: [],\n  footerRows: [],\n  headComponent: () => null,\n  footerComponent: () => null,\n};\n\n/** @internal */\nexport class StaticTableLayout extends React.PureComponent<TableLayoutProps & typeof defaultProps> {\n  static defaultProps = defaultProps;\n\n  render() {\n    const {\n      headerRows,\n      bodyRows,\n      footerRows,\n      columns,\n      minWidth,\n      containerComponent: Container,\n      tableComponent: Table,\n      headComponent,\n      bodyComponent,\n      footerComponent,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n      tableRef,\n    } = this.props;\n\n    const commonProps = {\n      columns,\n      rowComponent,\n      cellComponent,\n      getCellColSpan,\n    };\n\n    return (\n      <Container>\n        <Table\n          tableRef={tableRef}\n          style={{ minWidth: `${minWidth}px` }}\n        >\n          <ColumnGroup columns={columns} />\n          {!!headerRows.length && (\n            <RowsBlockLayout\n              rows={headerRows}\n              blockComponent={headComponent}\n              {...commonProps}\n            />\n          )}\n          <RowsBlockLayout\n            rows={bodyRows}\n            blockComponent={bodyComponent}\n            {...commonProps}\n          />\n          {!!footerRows.length && (\n            <RowsBlockLayout\n              rows={footerRows}\n              blockComponent={footerComponent}\n              {...commonProps}\n            />\n          )}\n        </Table>\n      </Container>\n    );\n  }\n}\n","import * as React from 'react';\nimport { Plugin, Action, Getters, Actions } from '@devexpress/dx-react-core';\nimport { nextPageReferenceIndex } from '@devexpress/dx-grid-core';\n\nexport class RemoteDataLoader extends React.PureComponent<any, any> {\n  ensureNextVirtualPage = (\n    payload: any,\n    getters: Getters,\n    { requestNextPage }: Actions,\n  ) => {\n    const { isDataRemote } = getters;\n    if (!isDataRemote) {\n      return;\n    }\n\n    const referenceIndex = nextPageReferenceIndex(payload, getters);\n    if (referenceIndex !== null) {\n      requestNextPage({ referenceIndex });\n    }\n  }\n\n  render() {\n    return (\n      <Plugin name=\"RemoteDataLoader\">\n        <Action name=\"ensureNextVirtualPage\" action={this.ensureNextVirtualPage} />\n      </Plugin>\n    );\n  }\n}\n","import * as React from 'react';\nimport {\n  connectProps, Plugin, Template,\n  PluginComponents,\n  TemplateConnector,\n  TemplatePlaceholder,\n} from '@devexpress/dx-react-core';\nimport {\n  isStubTableCell,\n} from '@devexpress/dx-grid-core';\nimport {\n  VirtualTableProps, VirtualTableLayoutProps, VirtualTableLayoutState,\n  Table as TableNS,\n  TableLayoutProps,\n} from '../../types';\nimport { RemoteDataLoader } from './remote-data-loader';\n\n/** @internal */\nexport const makeVirtualTable: (...args: any) => any = (Table, {\n  VirtualLayout,\n  FixedHeader,\n  FixedFooter,\n  SkeletonCell,\n  defaultEstimatedRowHeight,\n  defaultHeight,\n}) => {\n  class VirtualTable extends React.PureComponent<VirtualTableProps, VirtualTableLayoutState> {\n    static defaultProps = {\n      estimatedRowHeight: defaultEstimatedRowHeight,\n      height: defaultHeight,\n      headTableComponent: FixedHeader,\n      footerTableComponent: FixedFooter,\n      skeletonCellComponent: SkeletonCell,\n    };\n    static FixedHeader: React.ComponentType;\n    static FixedFooter: React.ComponentType;\n    static SkeletonCell: React.ComponentType;\n\n    layoutRenderComponent: React.ComponentType<VirtualTableLayoutProps> & { update(): void; };\n\n    constructor(props) {\n      super(props);\n\n      this.layoutRenderComponent = connectProps(VirtualLayout, () => {\n        const {\n          headTableComponent,\n          footerTableComponent,\n        } = this.props;\n\n        return {\n          headTableComponent,\n          footerTableComponent,\n        };\n      });\n    }\n\n    componentDidUpdate() {\n      this.layoutRenderComponent.update();\n    }\n\n    render() {\n      const {\n        height,\n        estimatedRowHeight,\n        skeletonCellComponent: SkeletonStubCell,\n        children,\n        ...restProps\n      } = this.props;\n\n      return (\n        <Plugin name=\"VirtualTable\">\n          <Table layoutComponent={this.layoutRenderComponent} {...restProps} />\n          <RemoteDataLoader />\n\n          <Template name=\"tableLayout\">\n            {(params: TableLayoutProps) => {\n              return (\n                <TemplateConnector>\n                  {(\n                    { availableRowCount, loadedRowsStart, tableBodyRows },\n                    { ensureNextVirtualPage },\n                  ) => {\n\n                    const totalRowCount = availableRowCount || tableBodyRows.length;\n\n                    return (\n                      <TemplatePlaceholder\n                        params={{\n                          ...params,\n                          totalRowCount,\n                          loadedRowsStart,\n                          height,\n                          estimatedRowHeight,\n                          ensureNextVirtualPage,\n                        }}\n                      />\n                    );\n                  }}\n                </TemplateConnector>\n              );\n            }}\n          </Template>\n\n          <Template\n            name=\"tableCell\"\n            predicate={({ tableRow }: any) => !!isStubTableCell(tableRow)}\n          >\n            {(params: TableNS.CellProps) => (\n              <SkeletonStubCell {...params} />\n            )}\n          </Template>\n        </Plugin>\n      );\n    }\n  }\n\n  Object.values(Table.components as PluginComponents).forEach((name) => {\n    VirtualTable[name] = Table[name];\n  });\n\n  VirtualTable.FixedHeader = FixedHeader;\n  VirtualTable.FixedFooter = FixedFooter;\n  VirtualTable.SkeletonCell = SkeletonCell;\n\n  return VirtualTable;\n};\n","class Node {\n  start: number;\n  rows: ReadonlyArray<any>;\n  prev: Node | null = null;\n  next: Node | null = null;\n\n  constructor(start: number, rows: ReadonlyArray<any>) {\n    this.start = start;\n    this.rows = rows;\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nclass LRUCache {\n  pageSize: number;\n  capacity: number;\n  head!: Node;\n  tail!: Node;\n  pages = new Map<number, Node>();\n\n  constructor(pageSize: number, capacity = Number.POSITIVE_INFINITY) {\n    this.pageSize = pageSize;\n    this.capacity = capacity;\n    this.initList();\n  }\n\n  initList() {\n    this.head = new Node(-1, []);\n    this.tail = new Node(-1, []);\n    this.head.next = this.tail;\n    this.tail.prev = this.head;\n  }\n\n  addPage(pageStart: number, rows: ReadonlyArray<any>) {\n    if (this.pages.has(pageStart)) {\n      this.removePage(pageStart);\n    }\n\n    const node = new Node(pageStart, rows);\n    const last = this.tail.prev!;\n    last.next = node;\n    node.next = this.tail;\n    node.prev = last;\n    this.tail.prev = node;\n    this.pages.set(pageStart, node);\n\n    if (this.pages.size > this.capacity) {\n      this.removePage(this.head.next!.start);\n    }\n  }\n\n  removePage(start: number) {\n    const node = this.pages.get(start)!;\n    node.prev!.next = node.next;\n    node.next!.prev = node.prev;\n\n    this.pages.delete(start);\n  }\n\n  getPage(pageStart: number) {\n    if (!this.pages.has(pageStart)) {\n      return null;\n    }\n\n    const { rows } = this.pages.get(pageStart)!;\n    this.removePage(pageStart);\n    this.addPage(pageStart, rows);\n\n    return rows;\n  }\n\n  clear() {\n    this.pages.clear();\n    this.initList();\n  }\n}\n\nexport const createRowCache = (pageSize: number, capacity = Number.POSITIVE_INFINITY) => {\n  const cache = new LRUCache(pageSize, capacity / pageSize);\n\n  return {\n    getRows: (skip: number, count: number) => {\n      let result: any[] = [];\n      const pageCount = Math.ceil(count / pageSize);\n      for (let i = 0; i < pageCount; i += 1) {\n        const pageStart = skip + i * pageSize;\n        const chunk = cache.getPage(pageStart);\n\n        // add incomplete page to result only if it is last one\n        if (chunk === null || (i !== pageCount - 1 && chunk.length !== pageSize)) {\n          return result;\n        }\n        result = result.concat(chunk);\n      }\n      return result;\n    },\n    setRows: (skip: number, rows: ReadonlyArray<any>) => {\n      const pageCount = Math.ceil(rows.length / pageSize);\n      for (let i = 0; i < pageCount; i += 1) {\n        const pageStart = i * pageSize;\n        const rowsChunk = rows.slice(pageStart, pageStart + pageSize);\n\n        // put incomplete page only if it is last one\n        if (rowsChunk.length === pageSize || i === pageCount - 1) {\n          cache.addPage(pageStart + skip, rowsChunk);\n        }\n      }\n    },\n    invalidate: () => cache.clear(),\n  };\n};\n"],"names":["tslib_1.__extends","React.createElement","React.PureComponent","React.Fragment","pluginDependencies","columnExtensionValueGetter","getCollapsedRowsComputed","expandedGroupedRowsComputed","DragDropProviderCore","draftOrderComputed","tableBodyRowsComputed","getCellColSpanComputed","tableHeaderRowsComputed","CellPlaceholder","defaultMessages","defaultProps","getRowIdComputed","dependencies","React.createRef","React.Component","tslib_1.__spread"],"mappings":"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"}