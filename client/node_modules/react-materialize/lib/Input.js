"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _idgen = _interopRequireDefault(require("./idgen"));

var _constants = _interopRequireDefault(require("./constants"));

var _Icon = _interopRequireDefault(require("./Icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

var Input =
/*#__PURE__*/
function (_Component) {
  _inherits(Input, _Component);

  function Input(props) {
    var _this;

    _classCallCheck(this, Input);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, props));
    _this.state = {
      value: props.value || props.defaultValue,
      checked: !!props.checked
    };
    _this._onChange = _this._onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.getMultipleValues = _this.getMultipleValues.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.isSelect = _this.isSelect.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(Input, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.isMaterialSelect()) {
        $(this.selectInput).material_select();
        $(this.selectInput).on('change', this._onChange);
      }

      if (this.isDatePicker) {
        $(this.dateInput).pickadate(this.props.options);
        $(this.dateInput).on('change', this._onChange);
      }

      if (this.isTimePicker) {
        $(this.timeInput).pickatime(this.props.options);
        $(this.timeInput).on('change', this._onChange);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.isMaterialSelect() && !this.props.multiple) {
        $(this.selectInput).material_select();
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (nextProps.type === 'checkbox' && this.state.checked !== nextProps.checked) {
        this.setState({
          checked: nextProps.checked
        });
      }

      if (this.isMaterialSelect() && !this.props.multiple) {
        this.setState({
          value: nextProps.defaultValue
        }, function () {
          return $(_this2.selectInput).material_select();
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.isMaterialSelect()) {
        $(this.selectInput).off('change', this._onChange);
      }
    }
  }, {
    key: "getMultipleValues",
    value: function getMultipleValues(_ref) {
      var options = _ref.options;

      if (!options) {
        return;
      }

      return Array.from(options).filter(function (opt) {
        return opt.selected;
      }).map(function (opt) {
        return opt.value;
      });
    }
  }, {
    key: "_onChange",
    value: function _onChange(e) {
      var onChange = this.props.onChange;
      var types = {
        checkbox: e.target.checked,
        radio: e.target.checked,
        'select-multiple': this.getMultipleValues(e.target),
        default: e.target.value
      };
      var value = types.hasOwnProperty(e.target.type) ? types[e.target.type] : types['default'];

      if (onChange) {
        onChange(e, value);
      }

      this.setState({
        value: value,
        checked: e.target.checked
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          browserDefault = _this$props.browserDefault,
          children = _this$props.children,
          className = _this$props.className,
          labelClassName = _this$props.labelClassName,
          defaultValue = _this$props.defaultValue,
          error = _this$props.error,
          label = _this$props.label,
          multiple = _this$props.multiple,
          placeholder = _this$props.placeholder,
          success = _this$props.success,
          s = _this$props.s,
          m = _this$props.m,
          l = _this$props.l,
          xl = _this$props.xl,
          type = _this$props.type,
          validate = _this$props.validate,
          onLabel = _this$props.onLabel,
          offLabel = _this$props.offLabel,
          inline = _this$props.inline,
          other = _objectWithoutProperties(_this$props, ["browserDefault", "children", "className", "labelClassName", "defaultValue", "error", "label", "multiple", "placeholder", "success", "s", "m", "l", "xl", "type", "validate", "onLabel", "offLabel", "inline"]);

      var sizes = {
        s: s,
        m: m,
        l: l,
        xl: xl
      };
      this._id = this._id || this.props.id || "input_".concat((0, _idgen.default)());
      var classes = {
        col: true,
        inline: type !== 'checkbox' && type !== 'radio' && inline,
        'input-field': type !== 'checkbox' && type !== 'radio' && type !== 'file',
        'file-field': type === 'file'
      };

      _constants.default.SIZES.forEach(function (size) {
        classes[size + sizes[size]] = sizes[size];
      });

      var inputClasses = {
        validate: validate,
        invalid: error,
        valid: success,
        'browser-default': browserDefault && this.isSelect()
      };
      var C, inputType;

      switch (type) {
        case 'textarea':
          C = 'textarea';
          inputClasses['materialize-textarea'] = true;
          break;

        case 'switch':
          C = 'input';
          inputType = 'checkbox';
          break;

        case 'file':
          C = 'input';
          inputClasses['file-path'] = true;
          break;

        default:
          C = 'input';
          inputType = type || 'text';
      }

      var labelClasses = {
        active: this.state.value || this.isSelect() || placeholder
      };
      var htmlLabel = label || inputType === 'radio' ? _react.default.createElement("label", {
        className: (0, _classnames.default)(labelClasses, labelClassName),
        "data-success": success,
        "data-error": error,
        htmlFor: this._id
      }, label) : null;

      if (this.isSelect()) {
        var options = placeholder && !defaultValue ? [_react.default.createElement("option", {
          disabled: true,
          key: (0, _idgen.default)()
        }, placeholder)] : [];
        options = options.concat(_react.default.Children.map(children, function (child) {
          return _react.default.cloneElement(child, {
            key: child.props.value
          });
        }));
        return _react.default.createElement("div", {
          className: (0, _classnames.default)(classes)
        }, this.renderIcon(), htmlLabel, _react.default.createElement("select", _extends({}, other, {
          multiple: multiple,
          id: this._id,
          className: (0, _classnames.default)(className, inputClasses),
          ref: function ref(_ref2) {
            return _this3.selectInput = _ref2;
          },
          defaultValue: defaultValue
        }), options));
      } else if (type === 'date') {
        this.isDatePicker = true;
        delete other.options;
        return _react.default.createElement("div", {
          className: (0, _classnames.default)(classes)
        }, this.renderIcon(), _react.default.createElement(C, _extends({}, other, {
          className: (0, _classnames.default)(className, inputClasses),
          defaultValue: defaultValue,
          id: this._id,
          ref: function ref(_ref3) {
            return _this3.dateInput = _ref3;
          },
          placeholder: placeholder,
          type: "date"
        })), htmlLabel);
      } else if (type === 'time') {
        this.isTimePicker = true;
        delete other.options;
        return _react.default.createElement("div", {
          className: (0, _classnames.default)(classes)
        }, this.renderIcon(), _react.default.createElement(C, _extends({}, other, {
          className: (0, _classnames.default)(className, inputClasses),
          defaultValue: defaultValue,
          id: this._id,
          ref: function ref(_ref4) {
            return _this3.timeInput = _ref4;
          },
          placeholder: placeholder
        })), htmlLabel);
      } else if (type === 'switch') {
        return _react.default.createElement("div", {
          className: "switch"
        }, _react.default.createElement("label", null, offLabel || 'Off', _react.default.createElement("input", _extends({}, other, {
          onChange: this._onChange,
          type: "checkbox"
        })), _react.default.createElement("span", {
          className: "lever"
        }), onLabel || 'On'));
      } else if (type === 'file') {
        return _react.default.createElement("div", {
          className: (0, _classnames.default)(classes)
        }, _react.default.createElement("div", {
          className: "btn"
        }, _react.default.createElement("span", null, label), _react.default.createElement(C, _extends({
          type: "file",
          multiple: multiple
        }, other))), _react.default.createElement("div", {
          className: "file-path-wrapper"
        }, _react.default.createElement(C, {
          type: "text",
          className: (0, _classnames.default)(className, inputClasses),
          defaultValue: defaultValue,
          id: this._id,
          placeholder: placeholder
        })));
      } else {
        var _defaultValue = inputType !== 'checkbox' && inputType !== 'radio' ? this.state.value : _defaultValue;

        if (inputType === 'checkbox' || inputType === 'radio') {
          return _react.default.createElement("div", {
            className: (0, _classnames.default)(classes)
          }, this.renderIcon(), _react.default.createElement(C, _extends({}, other, {
            className: (0, _classnames.default)(className, inputClasses),
            ref: function ref(_ref5) {
              return _this3.input = _ref5;
            },
            id: this._id,
            checked: this.state.checked,
            onChange: this._onChange,
            placeholder: placeholder,
            type: inputType
          })), htmlLabel);
        }

        return _react.default.createElement("div", {
          className: (0, _classnames.default)(classes)
        }, this.renderIcon(), _react.default.createElement(C, _extends({}, other, {
          className: (0, _classnames.default)(className, inputClasses),
          ref: function ref(_ref6) {
            return _this3.input = _ref6;
          },
          defaultValue: _defaultValue,
          id: this._id,
          onChange: this._onChange,
          placeholder: placeholder,
          type: inputType
        })), htmlLabel);
      }
    }
  }, {
    key: "renderIcon",
    value: function renderIcon() {
      var _this$props2 = this.props,
          icon = _this$props2.icon,
          children = _this$props2.children;

      if (icon) {
        return _react.default.createElement(_Icon.default, {
          className: "prefix"
        }, icon);
      } else {
        var _icon = null;

        if (_react.default.Children.count(children) === 1 && !Array.isArray(children)) {
          _icon = _react.default.Children.only(children);
        }

        return _icon === null ? null : _react.default.cloneElement(_icon, {
          className: 'prefix'
        });
      }
    }
  }, {
    key: "isSelect",
    value: function isSelect() {
      return this.props.type === 'select';
    }
  }, {
    key: "isMaterialSelect",
    value: function isMaterialSelect() {
      return this.props.type === 'select' && !this.props.browserDefault && typeof $ !== 'undefined';
    }
  }]);

  return Input;
}(_react.Component);

Input.propTypes = {
  /*
   * Responsive size for Mobile Devices
   */
  s: _propTypes.default.number,

  /*
   * Responsive size for Tablet Devices
   */
  m: _propTypes.default.number,

  /*
   * Responsive size for Desktop Devices
   */
  l: _propTypes.default.number,

  /**
   *  Responsive size for Large Desktop Devices
   */
  xl: _propTypes.default.number,
  inline: _propTypes.default.bool,
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  labelClassName: _propTypes.default.string,
  label: _propTypes.default.node,
  error: _propTypes.default.string,
  success: _propTypes.default.string,

  /**
   * Input field type, e.g. select, checkbox, radio, text, tel, email, file
   * @default 'text'
   */
  type: _propTypes.default.string,
  defaultValue: _propTypes.default.any,
  placeholder: _propTypes.default.string,
  id: _propTypes.default.string,
  icon: _propTypes.default.string,
  name: _propTypes.default.string,
  validate: _propTypes.default.bool,
  multiple: _propTypes.default.bool,
  browserDefault: _propTypes.default.bool,
  checked: _propTypes.default.bool,
  onLabel: _propTypes.default.string,
  offLabel: _propTypes.default.string,
  onChange: _propTypes.default.func,
  options: _propTypes.default.any,

  /**
   * Value used to set a initial value
   */
  value: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.array])
};
Input.defaultProps = {
  type: 'text',
  checked: false
};
var _default = Input;
exports.default = _default;