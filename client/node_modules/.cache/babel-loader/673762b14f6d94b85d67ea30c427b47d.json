{"ast":null,"code":"import * as yup from \"yup\";\nconst REQUIRED_MESSAGE = \"You can't leave this field blank\";\nconst PHONE_MIN_MESSAGE = \"Invalid phone number\";\nconst INVALID_NUM_MESSAGE = \"Invalid number\";\nconst INVALID_TEXT = \"This is not a valid text\";\nexport const contactSchema = yup.object().shape({\n  postalAddress: yup.string().typeError(INVALID_TEXT).min(5, \"Postal Address is too short\").required(REQUIRED_MESSAGE),\n  physicalAddress: yup.string().typeError(INVALID_TEXT).min(3, \"Physical Address is too short\").required(REQUIRED_MESSAGE),\n  contactName: yup.string().typeError(INVALID_TEXT).min(3, \"Contact Name is too short\").required(REQUIRED_MESSAGE),\n  contactEmail: yup.string().typeError(INVALID_TEXT).email(\"Invalid Email format\").required(REQUIRED_MESSAGE),\n  contactPhoneNumber: yup.string().typeError(INVALID_TEXT).min(8, PHONE_MIN_MESSAGE).max(10, PHONE_MIN_MESSAGE).matches(/^[0]{1}?[1,2,8,9]{1}?[0-9]{6,8}$/im, \"Invalid Phone number\").required(REQUIRED_MESSAGE),\n  catchmentArea: yup.string().typeError(INVALID_TEXT).min(3, \"Catchment Area is too short\").required(REQUIRED_MESSAGE),\n  catchmentPopulation: yup.number().typeError(INVALID_NUM_MESSAGE).positive().integer().required(REQUIRED_MESSAGE),\n  longitude: yup.number().typeError(INVALID_NUM_MESSAGE).positive().required(REQUIRED_MESSAGE),\n  latitude: yup.number().typeError(INVALID_NUM_MESSAGE).negative().required(REQUIRED_MESSAGE)\n});\nexport const basicSchema = yup.object().shape({\n  facilityName: yup.string().typeError(INVALID_TEXT).min(3, \"Facility name must have atleast 3 characters\").required(REQUIRED_MESSAGE),\n  commonName: yup.string().typeError(INVALID_TEXT).min(3, \"Common name must have atleast 3 characters\").required(REQUIRED_MESSAGE),\n  facilityType: yup.number().typeError(REQUIRED_MESSAGE).required(REQUIRED_MESSAGE).min(1, \"Please select facility type\"),\n  operationalStatus: yup.number().typeError(REQUIRED_MESSAGE).required(REQUIRED_MESSAGE).min(1, \"Please select facility operational status\"),\n  regulatoryStatus: yup.number().typeError(REQUIRED_MESSAGE).required(REQUIRED_MESSAGE).min(1, \"Please select facility regulatory status\"),\n  facilityOwner: yup.number().typeError(REQUIRED_MESSAGE).required(REQUIRED_MESSAGE).min(1, \"Please select facility owner\"),\n  district: yup.number().typeError(REQUIRED_MESSAGE).required(REQUIRED_MESSAGE).min(1, \"Please select a district\"),\n  registrationNumber: yup.number().typeError(INVALID_NUM_MESSAGE).required(REQUIRED_MESSAGE).min(8, \"Invalid Registration Number\")\n});\nexport const getResourcesSchema = resources => {\n  let validationFields = {};\n\n  for (let resource of resources) {\n    validationFields[\"resource_\".concat(resource.id)] = yup.number().typeError(INVALID_NUM_MESSAGE).positive(\"Must be a positive number\").required(REQUIRED_MESSAGE);\n  }\n\n  return yup.object().shape(validationFields);\n};","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/components/organisms/FacilityForms/schema.tsx"],"names":["yup","REQUIRED_MESSAGE","PHONE_MIN_MESSAGE","INVALID_NUM_MESSAGE","INVALID_TEXT","contactSchema","object","shape","postalAddress","string","typeError","min","required","physicalAddress","contactName","contactEmail","email","contactPhoneNumber","max","matches","catchmentArea","catchmentPopulation","number","positive","integer","longitude","latitude","negative","basicSchema","facilityName","commonName","facilityType","operationalStatus","regulatoryStatus","facilityOwner","district","registrationNumber","getResourcesSchema","resources","validationFields","resource","id"],"mappings":"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","sourcesContent":["import * as yup from \"yup\";\n\nconst REQUIRED_MESSAGE = \"You can't leave this field blank\";\nconst PHONE_MIN_MESSAGE = \"Invalid phone number\";\nconst INVALID_NUM_MESSAGE = \"Invalid number\";\nconst INVALID_TEXT = \"This is not a valid text\";\n\nexport const contactSchema: yup.ObjectSchema<any> = yup.object().shape({\n  postalAddress: yup\n    .string()\n    .typeError(INVALID_TEXT)\n    .min(5, \"Postal Address is too short\")\n    .required(REQUIRED_MESSAGE),\n  physicalAddress: yup\n    .string()\n    .typeError(INVALID_TEXT)\n    .min(3, \"Physical Address is too short\")\n    .required(REQUIRED_MESSAGE),\n  contactName: yup\n    .string()\n    .typeError(INVALID_TEXT)\n    .min(3, \"Contact Name is too short\")\n    .required(REQUIRED_MESSAGE),\n  contactEmail: yup\n    .string()\n    .typeError(INVALID_TEXT)\n    .email(\"Invalid Email format\")\n    .required(REQUIRED_MESSAGE),\n  contactPhoneNumber: yup\n    .string()\n    .typeError(INVALID_TEXT)\n    .min(8, PHONE_MIN_MESSAGE)\n    .max(10, PHONE_MIN_MESSAGE)\n    .matches(/^[0]{1}?[1,2,8,9]{1}?[0-9]{6,8}$/im, \"Invalid Phone number\")\n    .required(REQUIRED_MESSAGE),\n  catchmentArea: yup\n    .string()\n    .typeError(INVALID_TEXT)\n    .min(3, \"Catchment Area is too short\")\n    .required(REQUIRED_MESSAGE),\n  catchmentPopulation: yup\n    .number()\n    .typeError(INVALID_NUM_MESSAGE)\n    .positive()\n    .integer()\n    .required(REQUIRED_MESSAGE),\n  longitude: yup\n    .number()\n    .typeError(INVALID_NUM_MESSAGE)\n    .positive()\n    .required(REQUIRED_MESSAGE),\n  latitude: yup\n    .number()\n    .typeError(INVALID_NUM_MESSAGE)\n    .negative()\n    .required(REQUIRED_MESSAGE)\n});\n\nexport const basicSchema: yup.ObjectSchema<any> = yup.object().shape({\n  facilityName: yup\n    .string()\n    .typeError(INVALID_TEXT)\n    .min(3, \"Facility name must have atleast 3 characters\")\n    .required(REQUIRED_MESSAGE),\n  commonName: yup\n    .string()\n    .typeError(INVALID_TEXT)\n    .min(3, \"Common name must have atleast 3 characters\")\n    .required(REQUIRED_MESSAGE),\n  facilityType: yup\n    .number()\n    .typeError(REQUIRED_MESSAGE)\n    .required(REQUIRED_MESSAGE)\n    .min(1, \"Please select facility type\"),\n  operationalStatus: yup\n    .number()\n    .typeError(REQUIRED_MESSAGE)\n    .required(REQUIRED_MESSAGE)\n    .min(1, \"Please select facility operational status\"),\n  regulatoryStatus: yup\n    .number()\n    .typeError(REQUIRED_MESSAGE)\n    .required(REQUIRED_MESSAGE)\n    .min(1, \"Please select facility regulatory status\"),\n  facilityOwner: yup\n    .number()\n    .typeError(REQUIRED_MESSAGE)\n    .required(REQUIRED_MESSAGE)\n    .min(1, \"Please select facility owner\"),\n  district: yup\n    .number()\n    .typeError(REQUIRED_MESSAGE)\n    .required(REQUIRED_MESSAGE)\n    .min(1, \"Please select a district\"),\n  registrationNumber: yup\n    .number()\n    .typeError(INVALID_NUM_MESSAGE)\n    .required(REQUIRED_MESSAGE)\n    .min(8, \"Invalid Registration Number\")\n});\n\nexport const getResourcesSchema: any = (resources: any) => {\n  let validationFields: any = {};\n\n  for (let resource of resources) {\n    validationFields[`resource_${resource.id}`] = yup\n      .number()\n      .typeError(INVALID_NUM_MESSAGE)\n      .positive(\"Must be a positive number\")\n      .required(REQUIRED_MESSAGE);\n  }\n  return yup.object().shape(validationFields);\n};\n"]},"metadata":{},"sourceType":"module"}