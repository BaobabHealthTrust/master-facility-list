{"ast":null,"code":"var _jsxFileName = \"/Users/caspater/Projects/Work/mhfr/src/components/molecules/FacilityUtilities.tsx\";\nimport React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport SectionTitle from \"../atoms/FacilityViewSectionTitle\";\nimport FacilityDetail from \"../atoms/FacilityDetail\";\nimport { connect } from \"react-redux\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBolt, faFilter, faMobile, faTrash, faCogs } from \"@fortawesome/free-solid-svg-icons\"; // @ts-ignore\n\nimport { uniq, chunk } from \"lodash\";\nlibrary.add(faBolt, faFilter, faMobile, faTrash, faCogs);\n\nfunction FacilityDetails(props) {\n  const utilities = props.utilities,\n        utilityTypes = props.utilityTypes;\n\n  const getUtilityTypeIcon = utilityType => {\n    switch (utilityType.toUpperCase()) {\n      case \"ENERGY PROOVIDER\":\n        return React.createElement(FontAwesomeIcon, {\n          icon: faBolt,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        });\n\n      case \"WATER PROVIDER\":\n        return React.createElement(FontAwesomeIcon, {\n          icon: faFilter,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28\n          },\n          __self: this\n        });\n\n      case \"WASTE DISPOSAL\":\n        return React.createElement(FontAwesomeIcon, {\n          icon: faTrash,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 30\n          },\n          __self: this\n        });\n\n      case \"NETWORK PROVIDER\":\n        return React.createElement(FontAwesomeIcon, {\n          icon: faMobile,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(FontAwesomeIcon, {\n          icon: faCogs,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34\n          },\n          __self: this\n        });\n    }\n  };\n\n  const getPresentTypes = (utilities, utilityTypes = []) => utilityTypes.filter(res => uniq(utilities.map(res => res.utility.utility_type_id)).includes(res.id));\n\n  const getUtilitiesByType = (type, utilities) => utilities.filter(res => res.utility.utility_type_id === type.id).map(res => [res.utility.utility_name]);\n\n  const renderUtilitiesForType = (type, utilities) => {\n    var data = getUtilitiesByType(type, utilities);\n    return React.createElement(React.Fragment, null, React.createElement(SectionTitle, {\n      icon: getUtilityTypeIcon(type.utility_type),\n      text: type.utility_type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), data.map(data => React.createElement(FacilityDetail, {\n      key: data[0],\n      label: \"\",\n      text: data[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    })));\n  };\n\n  const presentTypes = utilities ? getPresentTypes(utilities, utilityTypes) : [];\n  const typeChunks = chunk(presentTypes, 3);\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, typeChunks.map(chunk => {\n    return React.createElement(React.Fragment, null, chunk.map(type => React.createElement(Grid, {\n      key: type,\n      xs: 12,\n      sm: 6,\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, renderUtilitiesForType(type, utilities))));\n  }));\n}\n\nconst mapStateToProps = state => ({\n  utilityTypes: state.dependancies.utilities.types\n});\n\nexport default connect(mapStateToProps)(FacilityDetails);","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/components/molecules/FacilityUtilities.tsx"],"names":["React","Grid","SectionTitle","FacilityDetail","connect","library","FontAwesomeIcon","faBolt","faFilter","faMobile","faTrash","faCogs","uniq","chunk","add","FacilityDetails","props","utilities","utilityTypes","getUtilityTypeIcon","utilityType","toUpperCase","getPresentTypes","filter","res","map","utility","utility_type_id","includes","id","getUtilitiesByType","type","utility_name","renderUtilitiesForType","data","utility_type","presentTypes","typeChunks","mapStateToProps","state","dependancies","types"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport SectionTitle from \"../atoms/FacilityViewSectionTitle\";\nimport FacilityDetail from \"../atoms/FacilityDetail\";\nimport { connect } from \"react-redux\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBolt,\n  faFilter,\n  faMobile,\n  faTrash,\n  faCogs\n} from \"@fortawesome/free-solid-svg-icons\";\n// @ts-ignore\nimport { uniq, chunk } from \"lodash\";\n\nlibrary.add(faBolt, faFilter, faMobile, faTrash, faCogs);\n\nfunction FacilityDetails(props: Props) {\n  const { utilities, utilityTypes } = props;\n\n  const getUtilityTypeIcon = (utilityType: any) => {\n    switch (utilityType.toUpperCase()) {\n      case \"ENERGY PROOVIDER\":\n        return <FontAwesomeIcon icon={faBolt} />;\n      case \"WATER PROVIDER\":\n        return <FontAwesomeIcon icon={faFilter} />;\n      case \"WASTE DISPOSAL\":\n        return <FontAwesomeIcon icon={faTrash} />;\n      case \"NETWORK PROVIDER\":\n        return <FontAwesomeIcon icon={faMobile} />;\n      default:\n        return <FontAwesomeIcon icon={faCogs} />;\n    }\n  };\n\n  const getPresentTypes = (\n    utilities: Array<any>,\n    utilityTypes: Array<any> = []\n  ) =>\n    utilityTypes.filter(res =>\n      uniq(utilities.map(res => res.utility.utility_type_id)).includes(res.id)\n    );\n\n  const getUtilitiesByType = (type: any, utilities: any) =>\n    utilities\n      .filter((res: any) => res.utility.utility_type_id === type.id)\n      .map((res: any) => [res.utility.utility_name]);\n\n  const renderUtilitiesForType = (type: any, utilities: any) => {\n    var data = getUtilitiesByType(type, utilities);\n    return (\n      <>\n        <SectionTitle\n          icon={getUtilityTypeIcon(type.utility_type)}\n          text={type.utility_type}\n        />\n        {data.map((data: any) => (\n          <FacilityDetail key={data[0]} label={\"\"} text={data[0]} />\n        ))}\n      </>\n    );\n  };\n\n  const presentTypes = utilities\n    ? getPresentTypes(utilities, utilityTypes)\n    : [];\n\n  const typeChunks = chunk(presentTypes, 3);\n\n  return (\n    <Grid container>\n      {typeChunks.map((chunk: any) => {\n        return (\n          <>\n            {chunk.map((type: any) => (\n              <Grid key={type} xs={12} sm={6} md={4}>\n                {renderUtilitiesForType(type, utilities)}\n              </Grid>\n            ))}\n          </>\n        );\n      })}\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state: any) => ({\n  utilityTypes: state.dependancies.utilities.types\n});\n\nexport default connect(mapStateToProps)(FacilityDetails);\n\ntype Props = {\n  utilities: any;\n  utilityTypes?: Array<any>;\n};\n"]},"metadata":{},"sourceType":"module"}