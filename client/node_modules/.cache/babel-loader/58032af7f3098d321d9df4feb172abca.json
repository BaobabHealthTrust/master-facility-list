{"ast":null,"code":"var _jsxFileName = \"/Users/caspater/Projects/Work/mhfr/src/components/molecules/FacilityResources.tsx\";\nimport React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport SectionTitle from \"../atoms/FacilityViewSectionTitle\";\nimport FacilityDetail from \"../atoms/FacilityDetail\";\nimport { connect } from \"react-redux\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faBus, faBed, faHome, faLaptop, faHospital, faPowerOff } from \"@fortawesome/free-solid-svg-icons\"; // @ts-ignore\n\nimport { uniq, chunk } from \"lodash\";\nlibrary.add(faBus, faBed, faHome, faLaptop, faHospital, faPowerOff);\n\nfunction FacilityDetails(props) {\n  const resources = props.resources,\n        resourceTypes = props.resourceTypes;\n\n  const getResourceTypeIcon = resourceType => {\n    switch (resourceType.toUpperCase()) {\n      case \"TRANSPORT\":\n        return React.createElement(FontAwesomeIcon, {\n          icon: faBus,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27\n          },\n          __self: this\n        });\n\n      case \"BEDS\":\n        return React.createElement(FontAwesomeIcon, {\n          icon: faBed,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        });\n\n      case \"GENERATORS\":\n        return React.createElement(FontAwesomeIcon, {\n          icon: faPowerOff,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31\n          },\n          __self: this\n        });\n\n      case \"COMPUTERS\":\n        return React.createElement(FontAwesomeIcon, {\n          icon: faLaptop,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        });\n\n      case \"HOUSING\":\n        return React.createElement(FontAwesomeIcon, {\n          icon: faHome,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        });\n\n      default:\n        return React.createElement(FontAwesomeIcon, {\n          icon: faHospital,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        });\n    }\n  };\n\n  const getPresentTypes = (resources, resourceTypes = []) => resourceTypes.filter(res => uniq(resources.map(res => res.resource.resource_type_id)).includes(res.id));\n\n  const getResourcesByType = (type, resources) => resources.filter(res => res.resource.resource_type_id === type.id).map(res => [res.resource.resource_name, String(res.quantity)]);\n\n  const renderResourcesForType = (type, resources) => {\n    var data = getResourcesByType(type, resources);\n    return React.createElement(React.Fragment, null, React.createElement(SectionTitle, {\n      icon: getResourceTypeIcon(type.resource_type),\n      text: type.resource_type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), data.map(data => React.createElement(FacilityDetail, {\n      key: data[0],\n      label: data[0],\n      text: data[1],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    })));\n  };\n\n  const presentTypes = resources ? getPresentTypes(resources, resourceTypes) : [];\n  const typeChunks = chunk(presentTypes, 3);\n  return React.createElement(Grid, {\n    container: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, typeChunks.map(chunk => {\n    return React.createElement(React.Fragment, null, chunk.map(type => React.createElement(Grid, {\n      key: type,\n      xs: 12,\n      sm: 6,\n      md: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, renderResourcesForType(type, resources))));\n  }));\n}\n\nconst mapStateToProps = state => ({\n  resourceTypes: state.dependancies.resources.types\n});\n\nexport default connect(mapStateToProps)(FacilityDetails);","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/components/molecules/FacilityResources.tsx"],"names":["React","Grid","SectionTitle","FacilityDetail","connect","library","FontAwesomeIcon","faBus","faBed","faHome","faLaptop","faHospital","faPowerOff","uniq","chunk","add","FacilityDetails","props","resources","resourceTypes","getResourceTypeIcon","resourceType","toUpperCase","getPresentTypes","filter","res","map","resource","resource_type_id","includes","id","getResourcesByType","type","resource_name","String","quantity","renderResourcesForType","data","resource_type","presentTypes","typeChunks","mapStateToProps","state","dependancies","types"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport SectionTitle from \"../atoms/FacilityViewSectionTitle\";\nimport FacilityDetail from \"../atoms/FacilityDetail\";\nimport { connect } from \"react-redux\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faBus,\n  faBed,\n  faHome,\n  faLaptop,\n  faHospital,\n  faPowerOff\n} from \"@fortawesome/free-solid-svg-icons\";\n// @ts-ignore\nimport { uniq, chunk } from \"lodash\";\n\nlibrary.add(faBus, faBed, faHome, faLaptop, faHospital, faPowerOff);\n\nfunction FacilityDetails(props: Props) {\n  const { resources, resourceTypes } = props;\n\n  const getResourceTypeIcon = (resourceType: string) => {\n    switch (resourceType.toUpperCase()) {\n      case \"TRANSPORT\":\n        return <FontAwesomeIcon icon={faBus} />;\n      case \"BEDS\":\n        return <FontAwesomeIcon icon={faBed} />;\n      case \"GENERATORS\":\n        return <FontAwesomeIcon icon={faPowerOff} />;\n      case \"COMPUTERS\":\n        return <FontAwesomeIcon icon={faLaptop} />;\n      case \"HOUSING\":\n        return <FontAwesomeIcon icon={faHome} />;\n      default:\n        return <FontAwesomeIcon icon={faHospital} />;\n    }\n  };\n\n  const getPresentTypes = (\n    resources: Array<any>,\n    resourceTypes: Array<any> = []\n  ) =>\n    resourceTypes.filter(res =>\n      uniq(resources.map(res => res.resource.resource_type_id)).includes(res.id)\n    );\n\n  const getResourcesByType = (type: any, resources: any) =>\n    resources\n      .filter((res: any) => res.resource.resource_type_id === type.id)\n      .map((res: any) => [res.resource.resource_name, String(res.quantity)]);\n\n  const renderResourcesForType = (type: any, resources: any) => {\n    var data = getResourcesByType(type, resources);\n    return (\n      <>\n        <SectionTitle\n          icon={getResourceTypeIcon(type.resource_type)}\n          text={type.resource_type}\n        />\n        {data.map((data: any) => (\n          <FacilityDetail key={data[0]} label={data[0]} text={data[1]} />\n        ))}\n      </>\n    );\n  };\n\n  const presentTypes = resources\n    ? getPresentTypes(resources, resourceTypes)\n    : [];\n\n  const typeChunks = chunk(presentTypes, 3);\n\n  return (\n    <Grid container>\n      {typeChunks.map((chunk: any) => {\n        return (\n          <>\n            {chunk.map((type: any) => (\n              <Grid key={type} xs={12} sm={6} md={4}>\n                {renderResourcesForType(type, resources)}\n              </Grid>\n            ))}\n          </>\n        );\n      })}\n    </Grid>\n  );\n}\n\nconst mapStateToProps = (state: any) => ({\n  resourceTypes: state.dependancies.resources.types\n});\n\nexport default connect(mapStateToProps)(FacilityDetails);\n\ntype Props = {\n  resources: any;\n  resourceTypes?: Array<any>;\n};\n"]},"metadata":{},"sourceType":"module"}