{"ast":null,"code":"var _jsxFileName = \"/Users/caspater/Projects/Work/mhfr/src/scenes/Users/index.tsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Users from \"./Users\";\nimport { fetchUsers, delUser } from \"../../services/redux/actions/users\"; // @ts-ignore\n\nimport { sortBy } from \"lodash\";\nimport { toast } from \"react-toastify\";\nimport Notification from \"../../components/atoms/Notification\";\nimport swal from \"sweetalert\";\nexport class index extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      filter: \"\",\n      sort: \"username\"\n    };\n\n    this.onFilter = filter => {\n      this.setState({\n        filter\n      });\n    };\n\n    this.onSort = sort => {\n      this.setState({\n        sort\n      });\n    };\n\n    this.onDeleteUser = userId => {\n      let token = sessionStorage.getItem(\"token\") || \"\"; // @ts-ignore\n\n      swal({\n        icon: \"warning\",\n        title: \"Are You Sure You Want To Delete the user ?\",\n        buttons: {\n          cancel: \"No\",\n          confirm: \"Yes\"\n        },\n        closeOnClickOutside: false\n      }).then(async response => {\n        if (response) {\n          this.props.delUser(userId, token).then(() => {\n            toast.info(React.createElement(Notification, {\n              message: \"User Deleted\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 40\n              },\n              __self: this\n            }));\n            this.props.fetchUsers(token);\n          }).catch(() => {\n            toast.info(React.createElement(Notification, {\n              error: true,\n              message: \"Failed To Delete Details. Please Try Again\",\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 45\n              },\n              __self: this\n            }));\n          });\n        }\n      });\n    };\n\n    this.getUsers = () => this.state.filter === \"\" ? sortBy(this.props.users, this.state.sort) : sortBy(this.props.users.filter(val => JSON.stringify(val).toLowerCase().includes(this.state.filter.toLowerCase())), this.state.sort);\n  }\n\n  componentDidMount() {\n    if (this.props.users.length == 0) {\n      let token = sessionStorage.getItem(\"token\");\n\n      if (token) {\n        this.props.fetchUsers(token);\n      }\n    }\n  }\n\n  render() {\n    const users = this.getUsers();\n    return React.createElement(Users, {\n      users: users,\n      onFilter: this.onFilter,\n      onSort: this.onSort,\n      onDeleteUser: this.onDeleteUser,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  users: state.users.users\n});\n\nexport default connect(mapStateToProps, {\n  fetchUsers,\n  delUser\n})(index);","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/scenes/Users/index.tsx"],"names":["React","Component","connect","Users","fetchUsers","delUser","sortBy","toast","Notification","swal","index","state","filter","sort","onFilter","setState","onSort","onDeleteUser","userId","token","sessionStorage","getItem","icon","title","buttons","cancel","confirm","closeOnClickOutside","then","response","props","info","catch","getUsers","users","val","JSON","stringify","toLowerCase","includes","componentDidMount","length","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Users from \"./Users\";\nimport { fetchUsers, delUser } from \"../../services/redux/actions/users\";\n// @ts-ignore\nimport { sortBy } from \"lodash\";\nimport { toast } from \"react-toastify\";\nimport Notification from \"../../components/atoms/Notification\";\nimport swal from \"sweetalert\";\n\nexport class index extends Component<Props> {\n  state = {\n    filter: \"\",\n    sort: \"username\"\n  };\n  onFilter = (filter: any) => {\n    this.setState({ filter });\n  };\n\n  onSort = (sort: any) => {\n    this.setState({ sort });\n  };\n\n  onDeleteUser = (userId: number) => {\n    let token = sessionStorage.getItem(\"token\") || \"\";\n    // @ts-ignore\n    swal({\n      icon: \"warning\",\n      title: `Are You Sure You Want To Delete the user ?`,\n      buttons: {\n        cancel: \"No\",\n        confirm: \"Yes\"\n      },\n      closeOnClickOutside: false\n    }).then(async (response: any) => {\n      if (response) {\n        this.props\n          .delUser(userId, token)\n          .then(() => {\n            toast.info(<Notification message=\"User Deleted\" />);\n            this.props.fetchUsers(token);\n          })\n          .catch(() => {\n            toast.info(\n              <Notification\n                error\n                message=\"Failed To Delete Details. Please Try Again\"\n              />\n            );\n          });\n      }\n    });\n  };\n\n  getUsers = () =>\n    this.state.filter === \"\"\n      ? sortBy(this.props.users, this.state.sort)\n      : sortBy(\n          this.props.users.filter(val =>\n            JSON.stringify(val)\n              .toLowerCase()\n              .includes(this.state.filter.toLowerCase())\n          ),\n          this.state.sort\n        );\n\n  componentDidMount() {\n    if (this.props.users.length == 0) {\n      let token = sessionStorage.getItem(\"token\");\n      if (token) {\n        this.props.fetchUsers(token);\n      }\n    }\n  }\n  render() {\n    const users = this.getUsers();\n    return (\n      <Users\n        users={users}\n        onFilter={this.onFilter}\n        onSort={this.onSort}\n        onDeleteUser={this.onDeleteUser}\n      />\n    );\n  }\n}\n\ntype Props = {\n  users: Array<any>;\n  fetchUsers: Function;\n  delUser: Function;\n};\n\nconst mapStateToProps = (state: any) => ({\n  users: state.users.users\n});\n\nexport default connect(\n  mapStateToProps,\n  { fetchUsers, delUser }\n)(index);\n"]},"metadata":{},"sourceType":"module"}