{"ast":null,"code":"var _jsxFileName = \"/Users/caspater/Projects/Work/mhfr/src/scenes/Dashboard/index.tsx\";\nimport React, { Component } from \"react\";\nimport Dashboard from \"./Dashboard\";\nimport { connect } from \"react-redux\";\nimport { removeAllFilterValue, addFilterValue } from \"../../services/redux/actions/facilities\";\nimport { setActivePage } from \"../../services/redux/actions/ui\";\n\nclass index extends Component {\n  constructor(...args) {\n    super(...args);\n    this.initialState = [];\n    this.state = {\n      districtsFilter: this.initialState\n    };\n\n    this.getFilteredFacilities = () => this.state.districtsFilter.length == 0 ? this.props.facilities : this.props.facilities.filter(facility => this.inFilter(facility.district));\n\n    this.inFilter = district => this.state.districtsFilter.includes(district);\n\n    this.handleFilterAdd = district => {\n      let districts = this.state.districtsFilter;\n      districts.push(district);\n      this.setState({\n        districtsFilter: districts\n      });\n    };\n\n    this.handleFilterRem = district => {\n      let districts = this.state.districtsFilter;\n      this.setState({\n        districtsFilter: districts.filter(dis => dis != district)\n      });\n    };\n\n    this.handleMapClick = district => {\n      if (this.inFilter(district)) {\n        this.handleFilterRem(district);\n        return;\n      }\n\n      this.handleFilterAdd(district);\n    };\n\n    this.getFacilitiesOfType = type => {\n      return this.getFilteredFacilities() ? this.getFilteredFacilities().filter(facility => facility.type == type).length : 0;\n    };\n\n    this.generateBarChartData = (comparisonModel, comparisonField, facilityField) => {\n      const data = this.getFilteredFacilities();\n\n      if (data) {\n        return this.props[comparisonModel].map(model => {\n          return {\n            name: model[comparisonField],\n            count: data.filter(facility => facility[facilityField] == model[comparisonField]).length\n          };\n        });\n      }\n\n      return [];\n    };\n\n    this.onSummaryCardClick = facilityType => {\n      this.props.removeAllFilterValue();\n      facilityType = facilityType != \"All\" ? this.props.facilityTypes.filter(ft => ft.facility_type == facilityType).map(ft => ({\n        type: \"facilityTypes\",\n        id: ft.id,\n        label: ft.facility_type\n      }))[0] : \"All\";\n      let districts = this.state.districtsFilter.map(dis => {\n        return this.props.districts.filter(d => d.district_name === dis).map(d => ({\n          type: \"districts\",\n          id: d.id,\n          label: d.district_name\n        }));\n      });\n\n      if (facilityType != \"All\") {\n        this.props.addFilterValue(facilityType);\n      }\n\n      if (districts.length > 0) {\n        for (let district of districts) {\n          this.props.addFilterValue(district[0]);\n        }\n      }\n\n      this.props.history.push(\"/facilities\");\n      this.props.setActivePage(\"facilities\");\n    };\n\n    this.getRegulatoryBarData = () => {\n      const data = this.generateBarChartData(\"regulatoryStatuses\", \"facility_regulatory_status\", \"regulatoryStatus\");\n      const registered = data.filter(val => val.name == \"Registered\").reduce((acc, cur) => Number(acc) + Number(cur.count), 0);\n      const notRegistered = data.filter(val => val.name == \"Not Registered\").reduce((acc, cur) => Number(acc) + Number(cur.count), 0);\n      const pending = data.filter(val => val.name != \"Registered\" && val.name != \"Not Registered\").reduce((acc, cur) => Number(acc) + Number(cur.count), 0);\n      return [{\n        name: \"Registered\",\n        value: registered\n      }, {\n        name: \"Pending\",\n        value: notRegistered\n      }, {\n        name: \"Not Registered\",\n        value: pending\n      }];\n    };\n\n    this.getOperationalBarData = () => {\n      const data = this.generateBarChartData(\"operationalStatuses\", \"facility_operational_status\", \"status\");\n      const opened = data.filter(val => val.name == \"Functional\").reduce((acc, cur) => Number(acc) + Number(cur.count), 0);\n      const tempClosed = data.filter(val => val.name == \"Closed (Temporary)\").reduce((acc, cur) => Number(acc) + Number(cur.count), 0);\n      const closed = data.filter(val => val.name != \"Functional\" && val.name != \"Closed (Temporary)\").reduce((acc, cur) => Number(acc) + Number(cur.count), 0);\n      return [{\n        name: \"Functional\",\n        value: opened\n      }, {\n        name: \"Closed (Temporary)\",\n        value: tempClosed\n      }, {\n        name: \"Closed\",\n        value: closed\n      }];\n    };\n\n    this.getFacilitiesByTypeData = () => [{\n      count: this.getFilteredFacilities().length,\n      title: \"Total Facilities\",\n      type: \"All\",\n      icon: \"hospital.svg\",\n      onClick: () => {}\n    }, {\n      count: this.getFacilitiesOfType(\"District Hospital\"),\n      title: \"Dist Hospitals\",\n      type: \"District Hospital\",\n      icon: \"district.svg\",\n      onClick: () => {}\n    }, {\n      count: this.getFacilitiesOfType(\"Health Centre\"),\n      title: \"Health Centers\",\n      type: \"Health Centre\",\n      icon: \"clinic.svg\",\n      onClick: () => {}\n    }, {\n      count: this.getFacilitiesOfType(\"Dispensary\"),\n      title: \"Dispensaries\",\n      type: \"Dispensary\",\n      icon: \"normal-hospital.svg\",\n      onClick: () => {}\n    }, {\n      count: this.getFacilitiesOfType(\"Health Post\"),\n      title: \"Health Posts\",\n      type: \"Health Post\",\n      icon: \"tent.svg\",\n      onClick: () => {}\n    }];\n  }\n\n  render() {\n    return React.createElement(Dashboard, {\n      cardsData: this.getFacilitiesByTypeData(),\n      licenseStatusGrapphData: this.getRegulatoryBarData(),\n      operationalStatusGraphData: this.getOperationalBarData(),\n      selectedDistricts: this.state.districtsFilter,\n      onRemoveDistrictFilter: district => {\n        this.handleFilterRem(district);\n      },\n      onMapClick: district => {\n        this.handleMapClick(district);\n      },\n      onSummaryCardClick: this.onSummaryCardClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  status: state.status,\n  districts: state.dependancies.districts.list,\n  operationalStatuses: state.dependancies.operationalStatuses.list,\n  regulatoryStatuses: state.dependancies.regulatoryStatuses.list,\n  facilities: state.facilities.list,\n  facilityTypes: state.dependancies.facilityTypes.list\n});\n\nexport default connect(mapStateToProps, {\n  removeAllFilterValue,\n  addFilterValue,\n  setActivePage\n})(index);","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/scenes/Dashboard/index.tsx"],"names":["React","Component","Dashboard","connect","removeAllFilterValue","addFilterValue","setActivePage","index","initialState","state","districtsFilter","getFilteredFacilities","length","props","facilities","filter","facility","inFilter","district","includes","handleFilterAdd","districts","push","setState","handleFilterRem","dis","handleMapClick","getFacilitiesOfType","type","generateBarChartData","comparisonModel","comparisonField","facilityField","data","map","model","name","count","onSummaryCardClick","facilityType","facilityTypes","ft","facility_type","id","label","d","district_name","history","getRegulatoryBarData","registered","val","reduce","acc","cur","Number","notRegistered","pending","value","getOperationalBarData","opened","tempClosed","closed","getFacilitiesByTypeData","title","icon","onClick","render","mapStateToProps","status","dependancies","list","operationalStatuses","regulatoryStatuses"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Dashboard from \"./Dashboard\";\nimport { connect } from \"react-redux\";\nimport {\n  removeAllFilterValue,\n  addFilterValue\n} from \"../../services/redux/actions/facilities\";\nimport { setActivePage } from \"../../services/redux/actions/ui\";\n\nclass index extends Component<any> {\n  initialState: Array<string> = [];\n  state = {\n    districtsFilter: this.initialState\n  };\n\n  getFilteredFacilities = () =>\n    this.state.districtsFilter.length == 0\n      ? this.props.facilities\n      : this.props.facilities.filter((facility: any) =>\n          this.inFilter(facility.district)\n        );\n\n  inFilter = (district: string) =>\n    this.state.districtsFilter.includes(district);\n\n  handleFilterAdd = (district: string) => {\n    let districts: Array<string> = this.state.districtsFilter;\n    districts.push(district);\n    this.setState({ districtsFilter: districts });\n  };\n\n  handleFilterRem = (district: string) => {\n    let districts = this.state.districtsFilter;\n    this.setState({\n      districtsFilter: districts.filter(dis => dis != district)\n    });\n  };\n\n  handleMapClick = (district: string) => {\n    if (this.inFilter(district)) {\n      this.handleFilterRem(district);\n      return;\n    }\n    this.handleFilterAdd(district);\n  };\n\n  getFacilitiesOfType = (type: string) => {\n    return this.getFilteredFacilities()\n      ? this.getFilteredFacilities().filter(\n          (facility: any) => facility.type == type\n        ).length\n      : 0;\n  };\n\n  generateBarChartData = (\n    comparisonModel: any,\n    comparisonField: any,\n    facilityField: any\n  ) => {\n    const data = this.getFilteredFacilities();\n    if (data) {\n      return this.props[comparisonModel].map((model: any) => {\n        return {\n          name: model[comparisonField],\n          count: data.filter(\n            (facility: any) => facility[facilityField] == model[comparisonField]\n          ).length\n        };\n      });\n    }\n    return [];\n  };\n\n  onSummaryCardClick = (facilityType: any) => {\n    this.props.removeAllFilterValue();\n\n    facilityType =\n      facilityType != \"All\"\n        ? this.props.facilityTypes\n            .filter((ft: any) => ft.facility_type == facilityType)\n            .map((ft: any) => ({\n              type: \"facilityTypes\",\n              id: ft.id,\n              label: ft.facility_type\n            }))[0]\n        : \"All\";\n\n    let districts: Array<any> = this.state.districtsFilter.map(dis => {\n      return this.props.districts\n        .filter((d: any) => d.district_name === dis)\n        .map((d: any) => ({\n          type: \"districts\",\n          id: d.id,\n          label: d.district_name\n        }));\n    });\n\n    if (facilityType != \"All\") {\n      this.props.addFilterValue(facilityType);\n    }\n    if (districts.length > 0) {\n      for (let district of districts) {\n        this.props.addFilterValue(district[0]);\n      }\n    }\n    this.props.history.push(\"/facilities\");\n    this.props.setActivePage(\"facilities\");\n  };\n\n  getRegulatoryBarData = () => {\n    const data = this.generateBarChartData(\n      \"regulatoryStatuses\",\n      \"facility_regulatory_status\",\n      \"regulatoryStatus\"\n    );\n\n    const registered = data\n      .filter((val: any) => val.name == \"Registered\")\n      .reduce((acc: any, cur: any) => Number(acc) + Number(cur.count), 0);\n\n    const notRegistered = data\n      .filter((val: any) => val.name == \"Not Registered\")\n      .reduce((acc: any, cur: any) => Number(acc) + Number(cur.count), 0);\n\n    const pending = data\n      .filter(\n        (val: any) => val.name != \"Registered\" && val.name != \"Not Registered\"\n      )\n      .reduce((acc: any, cur: any) => Number(acc) + Number(cur.count), 0);\n\n    return [\n      { name: \"Registered\", value: registered },\n      { name: \"Pending\", value: notRegistered },\n      { name: \"Not Registered\", value: pending }\n    ];\n  };\n\n  getOperationalBarData = () => {\n    const data = this.generateBarChartData(\n      \"operationalStatuses\",\n      \"facility_operational_status\",\n      \"status\"\n    );\n\n    const opened = data\n      .filter((val: any) => val.name == \"Functional\")\n      .reduce((acc: any, cur: any) => Number(acc) + Number(cur.count), 0);\n\n    const tempClosed = data\n      .filter((val: any) => val.name == \"Closed (Temporary)\")\n      .reduce((acc: any, cur: any) => Number(acc) + Number(cur.count), 0);\n\n    const closed = data\n      .filter(\n        (val: any) =>\n          val.name != \"Functional\" && val.name != \"Closed (Temporary)\"\n      )\n      .reduce((acc: any, cur: any) => Number(acc) + Number(cur.count), 0);\n\n    return [\n      { name: \"Functional\", value: opened },\n      { name: \"Closed (Temporary)\", value: tempClosed },\n      { name: \"Closed\", value: closed }\n    ];\n  };\n  // make sure you have the svg file in images folder\n  getFacilitiesByTypeData = () => [\n    {\n      count: this.getFilteredFacilities().length,\n      title: \"Total Facilities\",\n      type: \"All\",\n      icon: \"hospital.svg\",\n      onClick: () => {}\n    },\n    {\n      count: this.getFacilitiesOfType(\"District Hospital\"),\n      title: \"Dist Hospitals\",\n      type: \"District Hospital\",\n      icon: \"district.svg\",\n      onClick: () => {}\n    },\n    {\n      count: this.getFacilitiesOfType(\"Health Centre\"),\n      title: \"Health Centers\",\n      type: \"Health Centre\",\n      icon: \"clinic.svg\",\n      onClick: () => {}\n    },\n    {\n      count: this.getFacilitiesOfType(\"Dispensary\"),\n      title: \"Dispensaries\",\n      type: \"Dispensary\",\n      icon: \"normal-hospital.svg\",\n      onClick: () => {}\n    },\n    {\n      count: this.getFacilitiesOfType(\"Health Post\"),\n      title: \"Health Posts\",\n      type: \"Health Post\",\n      icon: \"tent.svg\",\n      onClick: () => {}\n    }\n  ];\n  render() {\n    return (\n      <Dashboard\n        cardsData={this.getFacilitiesByTypeData()}\n        licenseStatusGrapphData={this.getRegulatoryBarData()}\n        operationalStatusGraphData={this.getOperationalBarData()}\n        selectedDistricts={this.state.districtsFilter}\n        onRemoveDistrictFilter={(district: string) => {\n          this.handleFilterRem(district);\n        }}\n        onMapClick={(district: string) => {\n          this.handleMapClick(district);\n        }}\n        onSummaryCardClick={this.onSummaryCardClick}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  status: state.status,\n  districts: state.dependancies.districts.list,\n  operationalStatuses: state.dependancies.operationalStatuses.list,\n  regulatoryStatuses: state.dependancies.regulatoryStatuses.list,\n  facilities: state.facilities.list,\n  facilityTypes: state.dependancies.facilityTypes.list\n});\n\nexport default connect(\n  mapStateToProps,\n  { removeAllFilterValue, addFilterValue, setActivePage }\n)(index);\n"]},"metadata":{},"sourceType":"module"}