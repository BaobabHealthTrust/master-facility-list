{"ast":null,"code":"import _objectSpread from \"/Users/caspater/Projects/Work/mhfr/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nexport const getBasicDetails = data => ({\n  registration_number: data.registrationNumber,\n  facility_name: data.facilityName,\n  common_name: data.commonName,\n  facility_date_opened: data.dateOpened,\n  facility_type_id: data.facilityType,\n  facility_owner_id: data.facilityOwner,\n  facility_operational_status_id: data.operationalStatus,\n  facility_regulatory_status_id: data.regulatoryStatus,\n  district_id: data.district,\n  facility_code_mapping: data.facility_code_mapping,\n  client_id: 1,\n  updated_at: Date.now()\n});\nexport const getContactDetails = (data, facilityId) => ({\n  data: _objectSpread({}, data, {\n    client: 1,\n    updated_at: Date.now()\n  }),\n  id: facilityId\n});\nexport const getResources = (data, allResources, facilityId) => allResources.map(resource => ({\n  facility_id: facilityId,\n  client_id: 1,\n  resource_id: resource.id,\n  quantity: Number(data[\"resource_\".concat(resource.id)]),\n  description: \"\",\n  created_date: new Date()\n}));\nexport const getUtilities = (data, facilityId) => data.map(utility => ({\n  facility_id: facilityId,\n  utility_id: utility,\n  client_id: 1,\n  created_date: new Date()\n}));\nexport const getServices = (data, facilityId) => {\n  const services = [];\n\n  for (let service of data) {\n    if (Number(service.firstLevelService) > 0) services.push(service.firstLevelService);\n    if (Number(service.secondLevelService) > 0) services.push(service.secondLevelService);\n    if (Number(service.thirdLevelService) > 0) services.push(service.thirdLevelService);\n  }\n\n  return services.map(service => ({\n    service_id: service,\n    facility_id: facilityId,\n    client_id: 1\n  }));\n};","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/scenes/Facility/CreateFacility/helpers.tsx"],"names":["getBasicDetails","data","registration_number","registrationNumber","facility_name","facilityName","common_name","commonName","facility_date_opened","dateOpened","facility_type_id","facilityType","facility_owner_id","facilityOwner","facility_operational_status_id","operationalStatus","facility_regulatory_status_id","regulatoryStatus","district_id","district","facility_code_mapping","client_id","updated_at","Date","now","getContactDetails","facilityId","client","id","getResources","allResources","map","resource","facility_id","resource_id","quantity","Number","description","created_date","getUtilities","utility","utility_id","getServices","services","service","firstLevelService","push","secondLevelService","thirdLevelService","service_id"],"mappings":";AAAA,OAAO,MAAMA,eAAe,GAAIC,IAAD,KAAgB;AAC7CC,EAAAA,mBAAmB,EAAED,IAAI,CAACE,kBADmB;AAE7CC,EAAAA,aAAa,EAAEH,IAAI,CAACI,YAFyB;AAG7CC,EAAAA,WAAW,EAAEL,IAAI,CAACM,UAH2B;AAI7CC,EAAAA,oBAAoB,EAAEP,IAAI,CAACQ,UAJkB;AAK7CC,EAAAA,gBAAgB,EAAET,IAAI,CAACU,YALsB;AAM7CC,EAAAA,iBAAiB,EAAEX,IAAI,CAACY,aANqB;AAO7CC,EAAAA,8BAA8B,EAAEb,IAAI,CAACc,iBAPQ;AAQ7CC,EAAAA,6BAA6B,EAAEf,IAAI,CAACgB,gBARS;AAS7CC,EAAAA,WAAW,EAAEjB,IAAI,CAACkB,QAT2B;AAU7CC,EAAAA,qBAAqB,EAAEnB,IAAI,CAACmB,qBAViB;AAW7CC,EAAAA,SAAS,EAAE,CAXkC;AAY7CC,EAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAZiC,CAAhB,CAAxB;AAeP,OAAO,MAAMC,iBAAiB,GAAG,CAACxB,IAAD,EAAYyB,UAAZ,MAAoC;AACnEzB,EAAAA,IAAI,oBACCA,IADD;AAEF0B,IAAAA,MAAM,EAAE,CAFN;AAGFL,IAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAHV,IAD+D;AAMnEI,EAAAA,EAAE,EAAEF;AAN+D,CAApC,CAA1B;AASP,OAAO,MAAMG,YAAY,GAAG,CAC1B5B,IAD0B,EAE1B6B,YAF0B,EAG1BJ,UAH0B,KAK1BI,YAAY,CAACC,GAAb,CAAkBC,QAAD,KAAoB;AACnCC,EAAAA,WAAW,EAAEP,UADsB;AAEnCL,EAAAA,SAAS,EAAE,CAFwB;AAGnCa,EAAAA,WAAW,EAAEF,QAAQ,CAACJ,EAHa;AAInCO,EAAAA,QAAQ,EAAEC,MAAM,CAACnC,IAAI,oBAAa+B,QAAQ,CAACJ,EAAtB,EAAL,CAJmB;AAKnCS,EAAAA,WAAW,EAAE,EALsB;AAMnCC,EAAAA,YAAY,EAAE,IAAIf,IAAJ;AANqB,CAApB,CAAjB,CALK;AAcP,OAAO,MAAMgB,YAAY,GAAG,CAACtC,IAAD,EAAYyB,UAAZ,KAC1BzB,IAAI,CAAC8B,GAAL,CAAUS,OAAD,KAAmB;AAC1BP,EAAAA,WAAW,EAAEP,UADa;AAE1Be,EAAAA,UAAU,EAAED,OAFc;AAG1BnB,EAAAA,SAAS,EAAE,CAHe;AAI1BiB,EAAAA,YAAY,EAAE,IAAIf,IAAJ;AAJY,CAAnB,CAAT,CADK;AAQP,OAAO,MAAMmB,WAAW,GAAG,CAACzC,IAAD,EAAYyB,UAAZ,KAAmC;AAC5D,QAAMiB,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,OAAT,IAAoB3C,IAApB,EAA0B;AACxB,QAAImC,MAAM,CAACQ,OAAO,CAACC,iBAAT,CAAN,GAAoC,CAAxC,EACEF,QAAQ,CAACG,IAAT,CAAcF,OAAO,CAACC,iBAAtB;AAEF,QAAIT,MAAM,CAACQ,OAAO,CAACG,kBAAT,CAAN,GAAqC,CAAzC,EACEJ,QAAQ,CAACG,IAAT,CAAcF,OAAO,CAACG,kBAAtB;AAEF,QAAIX,MAAM,CAACQ,OAAO,CAACI,iBAAT,CAAN,GAAoC,CAAxC,EACEL,QAAQ,CAACG,IAAT,CAAcF,OAAO,CAACI,iBAAtB;AACH;;AAED,SAAOL,QAAQ,CAACZ,GAAT,CAAca,OAAD,KAAmB;AACrCK,IAAAA,UAAU,EAAEL,OADyB;AAErCX,IAAAA,WAAW,EAAEP,UAFwB;AAGrCL,IAAAA,SAAS,EAAE;AAH0B,GAAnB,CAAb,CAAP;AAKD,CAlBM","sourcesContent":["export const getBasicDetails = (data: any) => ({\n  registration_number: data.registrationNumber,\n  facility_name: data.facilityName,\n  common_name: data.commonName,\n  facility_date_opened: data.dateOpened,\n  facility_type_id: data.facilityType,\n  facility_owner_id: data.facilityOwner,\n  facility_operational_status_id: data.operationalStatus,\n  facility_regulatory_status_id: data.regulatoryStatus,\n  district_id: data.district,\n  facility_code_mapping: data.facility_code_mapping,\n  client_id: 1,\n  updated_at: Date.now()\n});\n\nexport const getContactDetails = (data: any, facilityId: number) => ({\n  data: {\n    ...data,\n    client: 1,\n    updated_at: Date.now()\n  },\n  id: facilityId\n});\n\nexport const getResources = (\n  data: any,\n  allResources: any,\n  facilityId: number\n) =>\n  allResources.map((resource: any) => ({\n    facility_id: facilityId,\n    client_id: 1,\n    resource_id: resource.id,\n    quantity: Number(data[`resource_${resource.id}`]),\n    description: \"\",\n    created_date: new Date()\n  }));\n\nexport const getUtilities = (data: any, facilityId: number) =>\n  data.map((utility: any) => ({\n    facility_id: facilityId,\n    utility_id: utility,\n    client_id: 1,\n    created_date: new Date()\n  }));\n\nexport const getServices = (data: any, facilityId: number) => {\n  const services = [];\n  for (let service of data) {\n    if (Number(service.firstLevelService) > 0)\n      services.push(service.firstLevelService);\n\n    if (Number(service.secondLevelService) > 0)\n      services.push(service.secondLevelService);\n\n    if (Number(service.thirdLevelService) > 0)\n      services.push(service.thirdLevelService);\n  }\n\n  return services.map((service: any) => ({\n    service_id: service,\n    facility_id: facilityId,\n    client_id: 1\n  }));\n};\n"]},"metadata":{},"sourceType":"module"}