{"ast":null,"code":"var _jsxFileName = \"/Users/caspater/Projects/Work/mhfr/src/scenes/Facility/index.tsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { toggleFacilityFilter } from \"../../services/redux/actions/ui\";\nimport { fetchOwners } from \"../../services/redux/actions/dependancies\";\nimport { addFilterValue, removeFilterValue, basicAdvancedFilter, resourcesAdvancedFilter, utilitiesAdvancedFilter, servicesAdvancedFilter, fetchFilteredFacilities } from \"../../services/redux/actions/facilities\";\nimport Facility from \"./Facility\";\nimport { hasFilterValuesForType } from \"../../services/helpers\";\nexport class index extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handleFacilityClick = facilityId => {\n      this.props.history.push(\"facilities/\".concat(facilityId));\n    };\n\n    this.onAddFilter = async (value, options = []) => {\n      const type = value.type,\n            id = value.id;\n\n      if (id == -1) {\n        let filterOptionsToRemove = type == \"utilities\" || type == \"services\" ? this.props.filterOptions.filter(option => option.type == type && options.includes(option.id)) : this.props.filterOptions.filter(option => option.type == type);\n\n        for (let valueForType of filterOptionsToRemove) {\n          this.props.removeFilterValue(valueForType);\n        }\n\n        return;\n      }\n\n      await this.props.addFilterValue(value);\n      this.filterFacilities();\n    };\n\n    this.removeFilter = async value => {\n      await this.props.removeFilterValue(value);\n      this.filterFacilities();\n    };\n\n    this.filterFacilities = async () => {\n      if (hasFilterValuesForType(\"basic\", this.props.filterOptions)) await this.props.basicAdvancedFilter(this.props.filterOptions);\n      if (hasFilterValuesForType(\"resources\", this.props.filterOptions)) await this.props.resourcesAdvancedFilter(this.props.filterOptions);\n      if (hasFilterValuesForType(\"utilities\", this.props.filterOptions)) await this.props.utilitiesAdvancedFilter(this.props.filterOptions);\n      if (hasFilterValuesForType(\"services\", this.props.filterOptions)) await this.props.servicesAdvancedFilter(this.props.filterOptions);\n      this.props.fetchFilteredFacilities(this.props.filterOptions, this.props.filterResults);\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.owners.length == 0) {\n      this.props.fetchOwners();\n    }\n\n    if (this.props.filterOptions && this.props.filterOptions.length > 0) {\n      this.filterFacilities();\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          drawerOpen = _this$props.drawerOpen,\n          toggleFacilityFilter = _this$props.toggleFacilityFilter,\n          facilities = _this$props.facilities,\n          filteredFacilities = _this$props.filteredFacilities,\n          filterOptions = _this$props.filterOptions;\n    const facilitiesData = filterOptions.length > 0 ? filteredFacilities : facilities;\n    return React.createElement(Facility, {\n      onFacilityClicked: facilityId => this.handleFacilityClick(facilityId),\n      drawerOpen: drawerOpen,\n      onToggleDrawer: toggleFacilityFilter,\n      onAddFilter: this.onAddFilter,\n      onRemoveFilter: this.removeFilter,\n      facilities: facilitiesData,\n      filterOptions: filterOptions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    });\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    drawerOpen: state.ui.advancedSearchOpen,\n    filterOptions: state.facilities.advancedFilter.filterValues,\n    filterResults: state.facilities.advancedFilter.filterResults,\n    facilities: state.facilities.list,\n    filteredFacilities: state.facilities.filteredList,\n    owners: state.dependancies.owners.list\n  };\n};\n\nexport default connect(mapStateToProps, {\n  toggleFacilityFilter,\n  fetchOwners,\n  addFilterValue,\n  removeFilterValue,\n  basicAdvancedFilter,\n  resourcesAdvancedFilter,\n  utilitiesAdvancedFilter,\n  servicesAdvancedFilter,\n  fetchFilteredFacilities\n})(index);","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/scenes/Facility/index.tsx"],"names":["React","Component","connect","toggleFacilityFilter","fetchOwners","addFilterValue","removeFilterValue","basicAdvancedFilter","resourcesAdvancedFilter","utilitiesAdvancedFilter","servicesAdvancedFilter","fetchFilteredFacilities","Facility","hasFilterValuesForType","index","handleFacilityClick","facilityId","props","history","push","onAddFilter","value","options","type","id","filterOptionsToRemove","filterOptions","filter","option","includes","valueForType","filterFacilities","removeFilter","filterResults","componentDidMount","owners","length","render","drawerOpen","facilities","filteredFacilities","facilitiesData","mapStateToProps","state","ui","advancedSearchOpen","advancedFilter","filterValues","list","filteredList","dependancies"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { toggleFacilityFilter } from \"../../services/redux/actions/ui\";\nimport { fetchOwners } from \"../../services/redux/actions/dependancies\";\nimport {\n  addFilterValue,\n  removeFilterValue,\n  basicAdvancedFilter,\n  resourcesAdvancedFilter,\n  utilitiesAdvancedFilter,\n  servicesAdvancedFilter,\n  fetchFilteredFacilities\n} from \"../../services/redux/actions/facilities\";\nimport Facility from \"./Facility\";\nimport { hasFilterValuesForType } from \"../../services/helpers\";\nimport { toast } from \"react-toastify\";\nimport Notification from \"../../components/atoms/Notification\";\n\nexport class index extends Component<Props> {\n  handleFacilityClick = (facilityId: number) => {\n    this.props.history.push(`facilities/${facilityId}`);\n  };\n  componentDidMount() {\n    if (this.props.owners.length == 0) {\n      this.props.fetchOwners();\n    }\n    if (this.props.filterOptions && this.props.filterOptions.length > 0) {\n      this.filterFacilities();\n    }\n  }\n\n  onAddFilter = async (\n    value: { type: string; id: number; label: string; range?: any },\n    options: Array<number> = []\n  ) => {\n    const { type, id } = value;\n    if (id == -1) {\n      let filterOptionsToRemove =\n        type == \"utilities\" || type == \"services\"\n          ? this.props.filterOptions.filter(\n              option => option.type == type && options.includes(option.id)\n            )\n          : this.props.filterOptions.filter(option => option.type == type);\n\n      for (let valueForType of filterOptionsToRemove) {\n        this.props.removeFilterValue(valueForType);\n      }\n      return;\n    }\n\n    await this.props.addFilterValue(value);\n    this.filterFacilities();\n  };\n\n  removeFilter = async (value: any) => {\n    await this.props.removeFilterValue(value);\n    this.filterFacilities();\n  };\n\n  filterFacilities = async () => {\n    if (hasFilterValuesForType(\"basic\", this.props.filterOptions))\n      await this.props.basicAdvancedFilter(this.props.filterOptions);\n\n    if (hasFilterValuesForType(\"resources\", this.props.filterOptions))\n      await this.props.resourcesAdvancedFilter(this.props.filterOptions);\n\n    if (hasFilterValuesForType(\"utilities\", this.props.filterOptions))\n      await this.props.utilitiesAdvancedFilter(this.props.filterOptions);\n\n    if (hasFilterValuesForType(\"services\", this.props.filterOptions))\n      await this.props.servicesAdvancedFilter(this.props.filterOptions);\n\n    this.props.fetchFilteredFacilities(\n      this.props.filterOptions,\n      this.props.filterResults\n    );\n  };\n\n  render() {\n    const {\n      drawerOpen,\n      toggleFacilityFilter,\n      facilities,\n      filteredFacilities,\n      filterOptions\n    } = this.props;\n\n    const facilitiesData =\n      filterOptions.length > 0 ? filteredFacilities : facilities;\n\n    return (\n      <Facility\n        onFacilityClicked={(facilityId: number) =>\n          this.handleFacilityClick(facilityId)\n        }\n        drawerOpen={drawerOpen}\n        onToggleDrawer={toggleFacilityFilter}\n        onAddFilter={this.onAddFilter}\n        onRemoveFilter={this.removeFilter}\n        facilities={facilitiesData}\n        filterOptions={filterOptions}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    drawerOpen: state.ui.advancedSearchOpen,\n    filterOptions: state.facilities.advancedFilter.filterValues,\n    filterResults: state.facilities.advancedFilter.filterResults,\n    facilities: state.facilities.list,\n    filteredFacilities: state.facilities.filteredList,\n    owners: state.dependancies.owners.list\n  };\n};\n\ntype Props = {\n  drawerOpen: boolean;\n  toggleFacilityFilter: Function;\n  filterOptions: Array<any>;\n  filterResults: any;\n  facilities: Array<any>;\n  filteredFacilities: Array<any>;\n  owners: Array<any>;\n  fetchOwners: Function;\n  history?: any;\n  addFilterValue: Function;\n  removeFilterValue: Function;\n  basicAdvancedFilter: Function;\n  resourcesAdvancedFilter: Function;\n  utilitiesAdvancedFilter: Function;\n  servicesAdvancedFilter: Function;\n  fetchFilteredFacilities: Function;\n};\nexport default connect(\n  mapStateToProps,\n  {\n    toggleFacilityFilter,\n    fetchOwners,\n    addFilterValue,\n    removeFilterValue,\n    basicAdvancedFilter,\n    resourcesAdvancedFilter,\n    utilitiesAdvancedFilter,\n    servicesAdvancedFilter,\n    fetchFilteredFacilities\n  }\n)(index);\n"]},"metadata":{},"sourceType":"module"}