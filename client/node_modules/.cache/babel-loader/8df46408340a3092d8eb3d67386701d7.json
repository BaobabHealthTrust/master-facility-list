{"ast":null,"code":"import _objectSpread from \"/Users/caspater/Projects/Work/mhfr/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport moment from \"moment\";\nexport const basic = (facility = null) => {\n  return {\n    facilityName: facility == null ? null : facility.facility_name,\n    commonName: facility == null ? null : facility.common_name,\n    operationalStatus: facility == null ? null : facility.facility_operational_status_id,\n    district: facility == null ? null : facility.district_id,\n    facilityType: facility == null ? null : facility.facility_type_id,\n    regulatoryStatus: facility == null ? null : facility.facility_regulatory_status_id,\n    facilityOwner: facility == null ? null : facility.facility_owner_id,\n    dateOpened: facility == null ? \"1975-01-01\" : moment(new Date(facility.published_date)).format(\"YYYY-MM-DD\"),\n    registrationNumber: facility == null ? null : facility.registration_number,\n    publishedDate: facility == null ? null : facility.published_date\n  };\n};\nexport const contact = (facility = null) => {\n  return {\n    postalAddress: facility == null ? null : facility.addresses ? facility.addresses.postal_address : null,\n    physicalAddress: facility == null ? null : facility.addresses ? facility.addresses.physical_address : null,\n    contactName: facility == null ? null : facility.contactPeople ? facility.contactPeople.contact_person_fullname : null,\n    contactEmail: facility == null ? null : facility.contactPeople ? facility.contactPeople.contact_person_email : null,\n    contactPhoneNumber: facility == null ? null : facility.contactPeople ? facility.contactPeople.contact_person_phone : null,\n    catchmentArea: facility == null ? null : facility.locations ? facility.locations.catchment_area : null,\n    catchmentPopulation: facility == null ? null : facility.locations ? facility.locations.catchment_population : null,\n    longitude: facility == null ? null : facility.geolocations ? facility.geolocations.longitude : null,\n    latitude: facility == null ? null : facility.geolocations ? facility.geolocations.latitude : null\n  };\n};\nexport const resources = (resources, currentResources = []) => {\n  return currentResources.length == 0 ? _objectSpread({}, getResourcesFieldDefaults(resources)) : _objectSpread({}, getResourcesFieldDefaults(resources, currentResources));\n};\n\nconst getResourcesFieldDefaults = (resources, currentResources = null) => {\n  let fields = {};\n  resources.forEach(resource => {\n    let value = currentResources === null ? [] : currentResources.filter(res => res.resource_id === resource.id);\n    value = value.length === 0 ? null : value[0].quantity;\n    fields[\"resource_\".concat(resource.id)] = value;\n  });\n  return fields;\n};\n\nexport const utilities = (currentUtilities = []) => {\n  return currentUtilities.length == 0 ? {\n    utilities: []\n  } : {\n    utilities: currentUtilities.map(util => util.utility_id)\n  };\n};\nexport const services = (currentServices = []) => {\n  return currentServices.length == 0 ? {\n    services: []\n  } : {\n    services: getServicesDefaults(currentServices)\n  };\n};\nexport const getServicesDefaults = (currentServices = []) => {\n  let services = [];\n  currentServices.map(ser => {\n    // has three levels\n    if (ser.children && ser.children.length > 0 && ser.children[0].children && ser.children[0].children.length > 0) {\n      let service = {\n        selectedServiceType: ser.serviceType.id,\n        firstLevelService: ser.facilityService.service_id,\n        secondLevelService: -1,\n        thirdLevelService: -1\n      };\n      ser.children.map(childService => {\n        service = _objectSpread({}, service, {\n          secondLevelService: childService.facilityService.service_id,\n          thirdLevelService: -1\n        });\n        childService.children.map(thirdLevelService => {\n          services.push(_objectSpread({}, service, {\n            thirdLevelService: thirdLevelService.facilityService.service_id\n          }));\n        });\n      });\n    } // has two levels\n    else if (ser.children && ser.children.length > 0) {\n        let service = {\n          selectedServiceType: ser.serviceType.id,\n          firstLevelService: ser.facilityService.service_id,\n          secondLevelService: -1,\n          thirdLevelService: -1\n        };\n        ser.children.map(childService => {\n          services.push(_objectSpread({}, service, {\n            secondLevelService: childService.facilityService.service_id,\n            thirdLevelService: -1\n          }));\n        });\n      } // has one level\n      else {\n          services.push({\n            selectedServiceType: ser.serviceType.id,\n            firstLevelService: ser.facilityService.service_id,\n            secondLevelService: -1,\n            thirdLevelService: -1\n          });\n        }\n  });\n  return services;\n};","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/components/organisms/FacilityForms/initialValues.tsx"],"names":["moment","basic","facility","facilityName","facility_name","commonName","common_name","operationalStatus","facility_operational_status_id","district","district_id","facilityType","facility_type_id","regulatoryStatus","facility_regulatory_status_id","facilityOwner","facility_owner_id","dateOpened","Date","published_date","format","registrationNumber","registration_number","publishedDate","contact","postalAddress","addresses","postal_address","physicalAddress","physical_address","contactName","contactPeople","contact_person_fullname","contactEmail","contact_person_email","contactPhoneNumber","contact_person_phone","catchmentArea","locations","catchment_area","catchmentPopulation","catchment_population","longitude","geolocations","latitude","resources","currentResources","length","getResourcesFieldDefaults","fields","forEach","resource","value","filter","res","resource_id","id","quantity","utilities","currentUtilities","map","util","utility_id","services","currentServices","getServicesDefaults","ser","children","service","selectedServiceType","serviceType","firstLevelService","facilityService","service_id","secondLevelService","thirdLevelService","childService","push"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAa,GAAG,IAAjB,KAA0B;AAC7C,SAAO;AACLC,IAAAA,YAAY,EAAED,QAAQ,IAAI,IAAZ,GAAmB,IAAnB,GAA0BA,QAAQ,CAACE,aAD5C;AAELC,IAAAA,UAAU,EAAEH,QAAQ,IAAI,IAAZ,GAAmB,IAAnB,GAA0BA,QAAQ,CAACI,WAF1C;AAGLC,IAAAA,iBAAiB,EACfL,QAAQ,IAAI,IAAZ,GAAmB,IAAnB,GAA0BA,QAAQ,CAACM,8BAJhC;AAKLC,IAAAA,QAAQ,EAAEP,QAAQ,IAAI,IAAZ,GAAmB,IAAnB,GAA0BA,QAAQ,CAACQ,WALxC;AAMLC,IAAAA,YAAY,EAAET,QAAQ,IAAI,IAAZ,GAAmB,IAAnB,GAA0BA,QAAQ,CAACU,gBAN5C;AAOLC,IAAAA,gBAAgB,EACdX,QAAQ,IAAI,IAAZ,GAAmB,IAAnB,GAA0BA,QAAQ,CAACY,6BARhC;AASLC,IAAAA,aAAa,EAAEb,QAAQ,IAAI,IAAZ,GAAmB,IAAnB,GAA0BA,QAAQ,CAACc,iBAT7C;AAULC,IAAAA,UAAU,EACRf,QAAQ,IAAI,IAAZ,GACI,YADJ,GAEIF,MAAM,CAAC,IAAIkB,IAAJ,CAAShB,QAAQ,CAACiB,cAAlB,CAAD,CAAN,CAA0CC,MAA1C,CAAiD,YAAjD,CAbD;AAcLC,IAAAA,kBAAkB,EAAEnB,QAAQ,IAAI,IAAZ,GAAmB,IAAnB,GAA0BA,QAAQ,CAACoB,mBAdlD;AAeLC,IAAAA,aAAa,EAAErB,QAAQ,IAAI,IAAZ,GAAmB,IAAnB,GAA0BA,QAAQ,CAACiB;AAf7C,GAAP;AAiBD,CAlBM;AAoBP,OAAO,MAAMK,OAAO,GAAG,CAACtB,QAAa,GAAG,IAAjB,KAA0B;AAC/C,SAAO;AACLuB,IAAAA,aAAa,EACXvB,QAAQ,IAAI,IAAZ,GACI,IADJ,GAEIA,QAAQ,CAACwB,SAAT,GACAxB,QAAQ,CAACwB,SAAT,CAAmBC,cADnB,GAEA,IAND;AAQLC,IAAAA,eAAe,EACb1B,QAAQ,IAAI,IAAZ,GACI,IADJ,GAEIA,QAAQ,CAACwB,SAAT,GACAxB,QAAQ,CAACwB,SAAT,CAAmBG,gBADnB,GAEA,IAbD;AAeLC,IAAAA,WAAW,EACT5B,QAAQ,IAAI,IAAZ,GACI,IADJ,GAEIA,QAAQ,CAAC6B,aAAT,GACA7B,QAAQ,CAAC6B,aAAT,CAAuBC,uBADvB,GAEA,IApBD;AAsBLC,IAAAA,YAAY,EACV/B,QAAQ,IAAI,IAAZ,GACI,IADJ,GAEIA,QAAQ,CAAC6B,aAAT,GACA7B,QAAQ,CAAC6B,aAAT,CAAuBG,oBADvB,GAEA,IA3BD;AA6BLC,IAAAA,kBAAkB,EAChBjC,QAAQ,IAAI,IAAZ,GACI,IADJ,GAEIA,QAAQ,CAAC6B,aAAT,GACA7B,QAAQ,CAAC6B,aAAT,CAAuBK,oBADvB,GAEA,IAlCD;AAoCLC,IAAAA,aAAa,EACXnC,QAAQ,IAAI,IAAZ,GACI,IADJ,GAEIA,QAAQ,CAACoC,SAAT,GACApC,QAAQ,CAACoC,SAAT,CAAmBC,cADnB,GAEA,IAzCD;AA2CLC,IAAAA,mBAAmB,EACjBtC,QAAQ,IAAI,IAAZ,GACI,IADJ,GAEIA,QAAQ,CAACoC,SAAT,GACApC,QAAQ,CAACoC,SAAT,CAAmBG,oBADnB,GAEA,IAhDD;AAkDLC,IAAAA,SAAS,EACPxC,QAAQ,IAAI,IAAZ,GACI,IADJ,GAEIA,QAAQ,CAACyC,YAAT,GACAzC,QAAQ,CAACyC,YAAT,CAAsBD,SADtB,GAEA,IAvDD;AAyDLE,IAAAA,QAAQ,EACN1C,QAAQ,IAAI,IAAZ,GACI,IADJ,GAEIA,QAAQ,CAACyC,YAAT,GACAzC,QAAQ,CAACyC,YAAT,CAAsBC,QADtB,GAEA;AA9DD,GAAP;AAgED,CAjEM;AAmEP,OAAO,MAAMC,SAAS,GAAG,CACvBA,SADuB,EAEvBC,gBAA4B,GAAG,EAFR,KAGpB;AACH,SAAOA,gBAAgB,CAACC,MAAjB,IAA2B,CAA3B,qBAEEC,yBAAyB,CAACH,SAAD,CAF3B,sBAKEG,yBAAyB,CAACH,SAAD,EAAYC,gBAAZ,CAL3B,CAAP;AAOD,CAXM;;AAaP,MAAME,yBAAyB,GAAG,CAChCH,SADgC,EAEhCC,gBAAqB,GAAG,IAFQ,KAG7B;AACH,MAAIG,MAAW,GAAG,EAAlB;AACAJ,EAAAA,SAAS,CAACK,OAAV,CAAmBC,QAAD,IAAmB;AACnC,QAAIC,KAAK,GACPN,gBAAgB,KAAK,IAArB,GACI,EADJ,GAEIA,gBAAgB,CAACO,MAAjB,CACGC,GAAD,IAAcA,GAAG,CAACC,WAAJ,KAAoBJ,QAAQ,CAACK,EAD7C,CAHN;AAMAJ,IAAAA,KAAK,GAAGA,KAAK,CAACL,MAAN,KAAiB,CAAjB,GAAqB,IAArB,GAA4BK,KAAK,CAAC,CAAD,CAAL,CAASK,QAA7C;AACAR,IAAAA,MAAM,oBAAaE,QAAQ,CAACK,EAAtB,EAAN,GAAoCJ,KAApC;AACD,GATD;AAWA,SAAOH,MAAP;AACD,CAjBD;;AAmBA,OAAO,MAAMS,SAAS,GAAG,CAACC,gBAA4B,GAAG,EAAhC,KAAuC;AAC9D,SAAOA,gBAAgB,CAACZ,MAAjB,IAA2B,CAA3B,GACH;AACEW,IAAAA,SAAS,EAAE;AADb,GADG,GAIH;AACEA,IAAAA,SAAS,EAAEC,gBAAgB,CAACC,GAAjB,CAAsBC,IAAD,IAAeA,IAAI,CAACC,UAAzC;AADb,GAJJ;AAOD,CARM;AAUP,OAAO,MAAMC,QAAQ,GAAG,CAACC,eAA2B,GAAG,EAA/B,KAAsC;AAC5D,SAAOA,eAAe,CAACjB,MAAhB,IAA0B,CAA1B,GACH;AACEgB,IAAAA,QAAQ,EAAE;AADZ,GADG,GAIH;AACEA,IAAAA,QAAQ,EAAEE,mBAAmB,CAACD,eAAD;AAD/B,GAJJ;AAOD,CARM;AAUP,OAAO,MAAMC,mBAAmB,GAAG,CAACD,eAA2B,GAAG,EAA/B,KAAsC;AACvE,MAAID,QAAoB,GAAG,EAA3B;AACAC,EAAAA,eAAe,CAACJ,GAAhB,CAAoBM,GAAG,IAAI;AACzB;AACA,QACEA,GAAG,CAACC,QAAJ,IACAD,GAAG,CAACC,QAAJ,CAAapB,MAAb,GAAsB,CADtB,IAEAmB,GAAG,CAACC,QAAJ,CAAa,CAAb,EAAgBA,QAFhB,IAGAD,GAAG,CAACC,QAAJ,CAAa,CAAb,EAAgBA,QAAhB,CAAyBpB,MAAzB,GAAkC,CAJpC,EAKE;AACA,UAAIqB,OAAO,GAAG;AACZC,QAAAA,mBAAmB,EAAEH,GAAG,CAACI,WAAJ,CAAgBd,EADzB;AAEZe,QAAAA,iBAAiB,EAAEL,GAAG,CAACM,eAAJ,CAAoBC,UAF3B;AAGZC,QAAAA,kBAAkB,EAAE,CAAC,CAHT;AAIZC,QAAAA,iBAAiB,EAAE,CAAC;AAJR,OAAd;AAMAT,MAAAA,GAAG,CAACC,QAAJ,CAAaP,GAAb,CAAkBgB,YAAD,IAAuB;AACtCR,QAAAA,OAAO,qBACFA,OADE;AAELM,UAAAA,kBAAkB,EAAEE,YAAY,CAACJ,eAAb,CAA6BC,UAF5C;AAGLE,UAAAA,iBAAiB,EAAE,CAAC;AAHf,UAAP;AAKAC,QAAAA,YAAY,CAACT,QAAb,CAAsBP,GAAtB,CAA2Be,iBAAD,IAA4B;AACpDZ,UAAAA,QAAQ,CAACc,IAAT,mBACKT,OADL;AAEEO,YAAAA,iBAAiB,EAAEA,iBAAiB,CAACH,eAAlB,CAAkCC;AAFvD;AAID,SALD;AAMD,OAZD;AAaD,KAzBD,CA0BA;AA1BA,SA2BK,IAAIP,GAAG,CAACC,QAAJ,IAAgBD,GAAG,CAACC,QAAJ,CAAapB,MAAb,GAAsB,CAA1C,EAA6C;AAChD,YAAIqB,OAAO,GAAG;AACZC,UAAAA,mBAAmB,EAAEH,GAAG,CAACI,WAAJ,CAAgBd,EADzB;AAEZe,UAAAA,iBAAiB,EAAEL,GAAG,CAACM,eAAJ,CAAoBC,UAF3B;AAGZC,UAAAA,kBAAkB,EAAE,CAAC,CAHT;AAIZC,UAAAA,iBAAiB,EAAE,CAAC;AAJR,SAAd;AAMAT,QAAAA,GAAG,CAACC,QAAJ,CAAaP,GAAb,CAAkBgB,YAAD,IAAuB;AACtCb,UAAAA,QAAQ,CAACc,IAAT,mBACKT,OADL;AAEEM,YAAAA,kBAAkB,EAAEE,YAAY,CAACJ,eAAb,CAA6BC,UAFnD;AAGEE,YAAAA,iBAAiB,EAAE,CAAC;AAHtB;AAKD,SAND;AAOD,OAdI,CAeL;AAfK,WAgBA;AACHZ,UAAAA,QAAQ,CAACc,IAAT,CAAc;AACZR,YAAAA,mBAAmB,EAAEH,GAAG,CAACI,WAAJ,CAAgBd,EADzB;AAEZe,YAAAA,iBAAiB,EAAEL,GAAG,CAACM,eAAJ,CAAoBC,UAF3B;AAGZC,YAAAA,kBAAkB,EAAE,CAAC,CAHT;AAIZC,YAAAA,iBAAiB,EAAE,CAAC;AAJR,WAAd;AAMD;AACF,GArDD;AAsDA,SAAOZ,QAAP;AACD,CAzDM","sourcesContent":["import moment from \"moment\";\nexport const basic = (facility: any = null) => {\n  return {\n    facilityName: facility == null ? null : facility.facility_name,\n    commonName: facility == null ? null : facility.common_name,\n    operationalStatus:\n      facility == null ? null : facility.facility_operational_status_id,\n    district: facility == null ? null : facility.district_id,\n    facilityType: facility == null ? null : facility.facility_type_id,\n    regulatoryStatus:\n      facility == null ? null : facility.facility_regulatory_status_id,\n    facilityOwner: facility == null ? null : facility.facility_owner_id,\n    dateOpened:\n      facility == null\n        ? \"1975-01-01\"\n        : moment(new Date(facility.published_date)).format(\"YYYY-MM-DD\"),\n    registrationNumber: facility == null ? null : facility.registration_number,\n    publishedDate: facility == null ? null : facility.published_date\n  };\n};\n\nexport const contact = (facility: any = null) => {\n  return {\n    postalAddress:\n      facility == null\n        ? null\n        : facility.addresses\n        ? facility.addresses.postal_address\n        : null,\n\n    physicalAddress:\n      facility == null\n        ? null\n        : facility.addresses\n        ? facility.addresses.physical_address\n        : null,\n\n    contactName:\n      facility == null\n        ? null\n        : facility.contactPeople\n        ? facility.contactPeople.contact_person_fullname\n        : null,\n\n    contactEmail:\n      facility == null\n        ? null\n        : facility.contactPeople\n        ? facility.contactPeople.contact_person_email\n        : null,\n\n    contactPhoneNumber:\n      facility == null\n        ? null\n        : facility.contactPeople\n        ? facility.contactPeople.contact_person_phone\n        : null,\n\n    catchmentArea:\n      facility == null\n        ? null\n        : facility.locations\n        ? facility.locations.catchment_area\n        : null,\n\n    catchmentPopulation:\n      facility == null\n        ? null\n        : facility.locations\n        ? facility.locations.catchment_population\n        : null,\n\n    longitude:\n      facility == null\n        ? null\n        : facility.geolocations\n        ? facility.geolocations.longitude\n        : null,\n\n    latitude:\n      facility == null\n        ? null\n        : facility.geolocations\n        ? facility.geolocations.latitude\n        : null\n  };\n};\n\nexport const resources = (\n  resources: Array<any>,\n  currentResources: Array<any> = []\n) => {\n  return currentResources.length == 0\n    ? {\n        ...getResourcesFieldDefaults(resources)\n      }\n    : {\n        ...getResourcesFieldDefaults(resources, currentResources)\n      };\n};\n\nconst getResourcesFieldDefaults = (\n  resources: any,\n  currentResources: any = null\n) => {\n  let fields: any = {};\n  resources.forEach((resource: any) => {\n    let value =\n      currentResources === null\n        ? []\n        : currentResources.filter(\n            (res: any) => res.resource_id === resource.id\n          );\n    value = value.length === 0 ? null : value[0].quantity;\n    fields[`resource_${resource.id}`] = value;\n  });\n\n  return fields;\n};\n\nexport const utilities = (currentUtilities: Array<any> = []) => {\n  return currentUtilities.length == 0\n    ? {\n        utilities: []\n      }\n    : {\n        utilities: currentUtilities.map((util: any) => util.utility_id)\n      };\n};\n\nexport const services = (currentServices: Array<any> = []) => {\n  return currentServices.length == 0\n    ? {\n        services: []\n      }\n    : {\n        services: getServicesDefaults(currentServices)\n      };\n};\n\nexport const getServicesDefaults = (currentServices: Array<any> = []) => {\n  let services: Array<any> = [];\n  currentServices.map(ser => {\n    // has three levels\n    if (\n      ser.children &&\n      ser.children.length > 0 &&\n      ser.children[0].children &&\n      ser.children[0].children.length > 0\n    ) {\n      let service = {\n        selectedServiceType: ser.serviceType.id,\n        firstLevelService: ser.facilityService.service_id,\n        secondLevelService: -1,\n        thirdLevelService: -1\n      };\n      ser.children.map((childService: any) => {\n        service = {\n          ...service,\n          secondLevelService: childService.facilityService.service_id,\n          thirdLevelService: -1\n        };\n        childService.children.map((thirdLevelService: any) => {\n          services.push({\n            ...service,\n            thirdLevelService: thirdLevelService.facilityService.service_id\n          });\n        });\n      });\n    }\n    // has two levels\n    else if (ser.children && ser.children.length > 0) {\n      let service = {\n        selectedServiceType: ser.serviceType.id,\n        firstLevelService: ser.facilityService.service_id,\n        secondLevelService: -1,\n        thirdLevelService: -1\n      };\n      ser.children.map((childService: any) => {\n        services.push({\n          ...service,\n          secondLevelService: childService.facilityService.service_id,\n          thirdLevelService: -1\n        });\n      });\n    }\n    // has one level\n    else {\n      services.push({\n        selectedServiceType: ser.serviceType.id,\n        firstLevelService: ser.facilityService.service_id,\n        secondLevelService: -1,\n        thirdLevelService: -1\n      });\n    }\n  });\n  return services;\n};\n"]},"metadata":{},"sourceType":"module"}