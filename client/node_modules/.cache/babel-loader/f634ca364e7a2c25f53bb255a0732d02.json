{"ast":null,"code":"export const getBasicDetails = data => ({\n  registration_number: data.registrationNumber,\n  facility_name: data.facilityName,\n  common_name: data.commonName,\n  facility_date_opened: data.dateOpened,\n  facility_type_id: data.facilityType,\n  facility_owner_id: data.facilityOwner,\n  facility_operational_status_id: data.operationalStatus,\n  facility_regulatory_status_id: data.regulatoryStatus,\n  district_id: data.district,\n  facility_code_mapping: data.facility_code_mapping,\n  published_date: data.publishedDate,\n  client_id: 1,\n  updated_at: Date.now()\n});\nexport const getResources = (data, resources, facilityId) => resources.map(resource => ({\n  facility_id: facilityId,\n  client_id: 1,\n  resource_id: resource.id,\n  quantity: Number(data[\"resource_\".concat(resource.id)]) || 0,\n  description: \"\",\n  created_date: new Date()\n}));\nexport const getUtilities = (data, facilityId) => data.map(utility => ({\n  facility_id: facilityId,\n  utility_id: utility,\n  client_id: 1,\n  created_date: new Date()\n}));\nexport const getUtilitiesToDelete = (data, currentUtilities) => currentUtilities.filter(val => !data.includes(val.utility_id)).map(val => val.id);\nexport const getServicesToDelete = (data, currentServices) => currentServices.filter(val => !data.includes(val.service_id)).map(val => val.id);\nexport const getServices = (data, facilityId, currentServices) => {\n  const services = [];\n\n  for (let service of data) {\n    if (Number(service.firstLevelService) > 0) {\n      let facilityService = currentServices.filter(ser => ser.service_id == service.firstLevelService);\n      let id = facilityService.length > 0 ? facilityService[0].id : null;\n      services.push({\n        service_id: service.firstLevelService,\n        facility_id: facilityId,\n        client_id: 1,\n        id\n      });\n    }\n\n    if (Number(service.secondLevelService) > 0) {\n      let facilityService = currentServices.filter(ser => ser.service_id == service.secondLevelService);\n      let id = facilityService.length > 0 ? facilityService[0].id : null;\n      services.push({\n        service_id: service.secondLevelService,\n        facility_id: facilityId,\n        client_id: 1,\n        id\n      });\n    }\n\n    if (Number(service.thirdLevelService) > 0) {\n      let facilityService = currentServices.filter(ser => ser.service_id == service.thirdLevelService);\n      let id = facilityService.length > 0 ? facilityService[0].id : null;\n      services.push({\n        service_id: service.thirdLevelService,\n        facility_id: facilityId,\n        client_id: 1,\n        id\n      });\n    }\n  }\n\n  return services;\n};\nexport const getCurrentServices = (currentServices = []) => {\n  let services = [];\n  currentServices.map(ser => {\n    // has three levels\n    if (ser.children && ser.children.length > 0 && ser.children[0].children && ser.children[0].children.length > 0) {\n      services.push(ser.facilityService);\n      ser.children.map(childService => {\n        services.push(childService.facilityService);\n        childService.children.map(thirdLevelService => {\n          services.push(thirdLevelService.facilityService);\n        });\n      });\n    } // has two levels\n    else if (ser.children && ser.children.length > 0) {\n        services.push(ser.facilityService);\n        ser.children.map(childService => {\n          services.push(childService.facilityService);\n        });\n      } // has one level\n      else {\n          services.push(ser.facilityService);\n        }\n  });\n  return services;\n};","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/scenes/Facility/UpdateFacility/helpers.tsx"],"names":["getBasicDetails","data","registration_number","registrationNumber","facility_name","facilityName","common_name","commonName","facility_date_opened","dateOpened","facility_type_id","facilityType","facility_owner_id","facilityOwner","facility_operational_status_id","operationalStatus","facility_regulatory_status_id","regulatoryStatus","district_id","district","facility_code_mapping","published_date","publishedDate","client_id","updated_at","Date","now","getResources","resources","facilityId","map","resource","facility_id","resource_id","id","quantity","Number","description","created_date","getUtilities","utility","utility_id","getUtilitiesToDelete","currentUtilities","filter","val","includes","getServicesToDelete","currentServices","service_id","getServices","services","service","firstLevelService","facilityService","ser","length","push","secondLevelService","thirdLevelService","getCurrentServices","children","childService"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAIC,IAAD,KAAgB;AAC7CC,EAAAA,mBAAmB,EAAED,IAAI,CAACE,kBADmB;AAE7CC,EAAAA,aAAa,EAAEH,IAAI,CAACI,YAFyB;AAG7CC,EAAAA,WAAW,EAAEL,IAAI,CAACM,UAH2B;AAI7CC,EAAAA,oBAAoB,EAAEP,IAAI,CAACQ,UAJkB;AAK7CC,EAAAA,gBAAgB,EAAET,IAAI,CAACU,YALsB;AAM7CC,EAAAA,iBAAiB,EAAEX,IAAI,CAACY,aANqB;AAO7CC,EAAAA,8BAA8B,EAAEb,IAAI,CAACc,iBAPQ;AAQ7CC,EAAAA,6BAA6B,EAAEf,IAAI,CAACgB,gBARS;AAS7CC,EAAAA,WAAW,EAAEjB,IAAI,CAACkB,QAT2B;AAU7CC,EAAAA,qBAAqB,EAAEnB,IAAI,CAACmB,qBAViB;AAW7CC,EAAAA,cAAc,EAAEpB,IAAI,CAACqB,aAXwB;AAY7CC,EAAAA,SAAS,EAAE,CAZkC;AAa7CC,EAAAA,UAAU,EAAEC,IAAI,CAACC,GAAL;AAbiC,CAAhB,CAAxB;AAgBP,OAAO,MAAMC,YAAY,GAAG,CAAC1B,IAAD,EAAY2B,SAAZ,EAA4BC,UAA5B,KAC1BD,SAAS,CAACE,GAAV,CAAeC,QAAD,KAAoB;AAChCC,EAAAA,WAAW,EAAEH,UADmB;AAEhCN,EAAAA,SAAS,EAAE,CAFqB;AAGhCU,EAAAA,WAAW,EAAEF,QAAQ,CAACG,EAHU;AAIhCC,EAAAA,QAAQ,EAAEC,MAAM,CAACnC,IAAI,oBAAa8B,QAAQ,CAACG,EAAtB,EAAL,CAAN,IAA2C,CAJrB;AAKhCG,EAAAA,WAAW,EAAE,EALmB;AAMhCC,EAAAA,YAAY,EAAE,IAAIb,IAAJ;AANkB,CAApB,CAAd,CADK;AAUP,OAAO,MAAMc,YAAY,GAAG,CAACtC,IAAD,EAAY4B,UAAZ,KAC1B5B,IAAI,CAAC6B,GAAL,CAAUU,OAAD,KAAmB;AAC1BR,EAAAA,WAAW,EAAEH,UADa;AAE1BY,EAAAA,UAAU,EAAED,OAFc;AAG1BjB,EAAAA,SAAS,EAAE,CAHe;AAI1Be,EAAAA,YAAY,EAAE,IAAIb,IAAJ;AAJY,CAAnB,CAAT,CADK;AAQP,OAAO,MAAMiB,oBAAoB,GAAG,CAACzC,IAAD,EAAY0C,gBAAZ,KAClCA,gBAAgB,CACbC,MADH,CACWC,GAAD,IAAc,CAAC5C,IAAI,CAAC6C,QAAL,CAAcD,GAAG,CAACJ,UAAlB,CADzB,EAEGX,GAFH,CAEQe,GAAD,IAAcA,GAAG,CAACX,EAFzB,CADK;AAKP,OAAO,MAAMa,mBAAmB,GAAG,CAAC9C,IAAD,EAAY+C,eAAZ,KACjCA,eAAe,CACZJ,MADH,CACWC,GAAD,IAAc,CAAC5C,IAAI,CAAC6C,QAAL,CAAcD,GAAG,CAACI,UAAlB,CADzB,EAEGnB,GAFH,CAEQe,GAAD,IAAcA,GAAG,CAACX,EAFzB,CADK;AAKP,OAAO,MAAMgB,WAAW,GAAG,CACzBjD,IADyB,EAEzB4B,UAFyB,EAGzBmB,eAHyB,KAItB;AACH,QAAMG,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,OAAT,IAAoBnD,IAApB,EAA0B;AACxB,QAAImC,MAAM,CAACgB,OAAO,CAACC,iBAAT,CAAN,GAAoC,CAAxC,EAA2C;AACzC,UAAIC,eAAe,GAAGN,eAAe,CAACJ,MAAhB,CACpBW,GAAG,IAAIA,GAAG,CAACN,UAAJ,IAAkBG,OAAO,CAACC,iBADb,CAAtB;AAGA,UAAInB,EAAE,GAAGoB,eAAe,CAACE,MAAhB,GAAyB,CAAzB,GAA6BF,eAAe,CAAC,CAAD,CAAf,CAAmBpB,EAAhD,GAAqD,IAA9D;AACAiB,MAAAA,QAAQ,CAACM,IAAT,CAAc;AACZR,QAAAA,UAAU,EAAEG,OAAO,CAACC,iBADR;AAEZrB,QAAAA,WAAW,EAAEH,UAFD;AAGZN,QAAAA,SAAS,EAAE,CAHC;AAIZW,QAAAA;AAJY,OAAd;AAMD;;AAED,QAAIE,MAAM,CAACgB,OAAO,CAACM,kBAAT,CAAN,GAAqC,CAAzC,EAA4C;AAC1C,UAAIJ,eAAe,GAAGN,eAAe,CAACJ,MAAhB,CACpBW,GAAG,IAAIA,GAAG,CAACN,UAAJ,IAAkBG,OAAO,CAACM,kBADb,CAAtB;AAGA,UAAIxB,EAAE,GAAGoB,eAAe,CAACE,MAAhB,GAAyB,CAAzB,GAA6BF,eAAe,CAAC,CAAD,CAAf,CAAmBpB,EAAhD,GAAqD,IAA9D;AACAiB,MAAAA,QAAQ,CAACM,IAAT,CAAc;AACZR,QAAAA,UAAU,EAAEG,OAAO,CAACM,kBADR;AAEZ1B,QAAAA,WAAW,EAAEH,UAFD;AAGZN,QAAAA,SAAS,EAAE,CAHC;AAIZW,QAAAA;AAJY,OAAd;AAMD;;AAED,QAAIE,MAAM,CAACgB,OAAO,CAACO,iBAAT,CAAN,GAAoC,CAAxC,EAA2C;AACzC,UAAIL,eAAe,GAAGN,eAAe,CAACJ,MAAhB,CACpBW,GAAG,IAAIA,GAAG,CAACN,UAAJ,IAAkBG,OAAO,CAACO,iBADb,CAAtB;AAGA,UAAIzB,EAAE,GAAGoB,eAAe,CAACE,MAAhB,GAAyB,CAAzB,GAA6BF,eAAe,CAAC,CAAD,CAAf,CAAmBpB,EAAhD,GAAqD,IAA9D;AACAiB,MAAAA,QAAQ,CAACM,IAAT,CAAc;AACZR,QAAAA,UAAU,EAAEG,OAAO,CAACO,iBADR;AAEZ3B,QAAAA,WAAW,EAAEH,UAFD;AAGZN,QAAAA,SAAS,EAAE,CAHC;AAIZW,QAAAA;AAJY,OAAd;AAMD;AACF;;AAED,SAAOiB,QAAP;AACD,CAhDM;AAkDP,OAAO,MAAMS,kBAAkB,GAAG,CAACZ,eAA2B,GAAG,EAA/B,KAAsC;AACtE,MAAIG,QAAoB,GAAG,EAA3B;AACAH,EAAAA,eAAe,CAAClB,GAAhB,CAAoByB,GAAG,IAAI;AACzB;AACA,QACEA,GAAG,CAACM,QAAJ,IACAN,GAAG,CAACM,QAAJ,CAAaL,MAAb,GAAsB,CADtB,IAEAD,GAAG,CAACM,QAAJ,CAAa,CAAb,EAAgBA,QAFhB,IAGAN,GAAG,CAACM,QAAJ,CAAa,CAAb,EAAgBA,QAAhB,CAAyBL,MAAzB,GAAkC,CAJpC,EAKE;AACAL,MAAAA,QAAQ,CAACM,IAAT,CAAcF,GAAG,CAACD,eAAlB;AACAC,MAAAA,GAAG,CAACM,QAAJ,CAAa/B,GAAb,CAAkBgC,YAAD,IAAuB;AACtCX,QAAAA,QAAQ,CAACM,IAAT,CAAcK,YAAY,CAACR,eAA3B;AACAQ,QAAAA,YAAY,CAACD,QAAb,CAAsB/B,GAAtB,CAA2B6B,iBAAD,IAA4B;AACpDR,UAAAA,QAAQ,CAACM,IAAT,CAAcE,iBAAiB,CAACL,eAAhC;AACD,SAFD;AAGD,OALD;AAMD,KAbD,CAcA;AAdA,SAeK,IAAIC,GAAG,CAACM,QAAJ,IAAgBN,GAAG,CAACM,QAAJ,CAAaL,MAAb,GAAsB,CAA1C,EAA6C;AAChDL,QAAAA,QAAQ,CAACM,IAAT,CAAcF,GAAG,CAACD,eAAlB;AACAC,QAAAA,GAAG,CAACM,QAAJ,CAAa/B,GAAb,CAAkBgC,YAAD,IAAuB;AACtCX,UAAAA,QAAQ,CAACM,IAAT,CAAcK,YAAY,CAACR,eAA3B;AACD,SAFD;AAGD,OALI,CAML;AANK,WAOA;AACHH,UAAAA,QAAQ,CAACM,IAAT,CAAcF,GAAG,CAACD,eAAlB;AACD;AACF,GA3BD;AA4BA,SAAOH,QAAP;AACD,CA/BM","sourcesContent":["export const getBasicDetails = (data: any) => ({\n  registration_number: data.registrationNumber,\n  facility_name: data.facilityName,\n  common_name: data.commonName,\n  facility_date_opened: data.dateOpened,\n  facility_type_id: data.facilityType,\n  facility_owner_id: data.facilityOwner,\n  facility_operational_status_id: data.operationalStatus,\n  facility_regulatory_status_id: data.regulatoryStatus,\n  district_id: data.district,\n  facility_code_mapping: data.facility_code_mapping,\n  published_date: data.publishedDate,\n  client_id: 1,\n  updated_at: Date.now()\n});\n\nexport const getResources = (data: any, resources: any, facilityId: number) =>\n  resources.map((resource: any) => ({\n    facility_id: facilityId,\n    client_id: 1,\n    resource_id: resource.id,\n    quantity: Number(data[`resource_${resource.id}`]) || 0,\n    description: \"\",\n    created_date: new Date()\n  }));\n\nexport const getUtilities = (data: any, facilityId: number) =>\n  data.map((utility: any) => ({\n    facility_id: facilityId,\n    utility_id: utility,\n    client_id: 1,\n    created_date: new Date()\n  }));\n\nexport const getUtilitiesToDelete = (data: any, currentUtilities: any) =>\n  currentUtilities\n    .filter((val: any) => !data.includes(val.utility_id))\n    .map((val: any) => val.id);\n\nexport const getServicesToDelete = (data: any, currentServices: any) =>\n  currentServices\n    .filter((val: any) => !data.includes(val.service_id))\n    .map((val: any) => val.id);\n\nexport const getServices = (\n  data: any,\n  facilityId: number,\n  currentServices: Array<any>\n) => {\n  const services = [];\n  for (let service of data) {\n    if (Number(service.firstLevelService) > 0) {\n      let facilityService = currentServices.filter(\n        ser => ser.service_id == service.firstLevelService\n      );\n      let id = facilityService.length > 0 ? facilityService[0].id : null;\n      services.push({\n        service_id: service.firstLevelService,\n        facility_id: facilityId,\n        client_id: 1,\n        id\n      });\n    }\n\n    if (Number(service.secondLevelService) > 0) {\n      let facilityService = currentServices.filter(\n        ser => ser.service_id == service.secondLevelService\n      );\n      let id = facilityService.length > 0 ? facilityService[0].id : null;\n      services.push({\n        service_id: service.secondLevelService,\n        facility_id: facilityId,\n        client_id: 1,\n        id\n      });\n    }\n\n    if (Number(service.thirdLevelService) > 0) {\n      let facilityService = currentServices.filter(\n        ser => ser.service_id == service.thirdLevelService\n      );\n      let id = facilityService.length > 0 ? facilityService[0].id : null;\n      services.push({\n        service_id: service.thirdLevelService,\n        facility_id: facilityId,\n        client_id: 1,\n        id\n      });\n    }\n  }\n\n  return services;\n};\n\nexport const getCurrentServices = (currentServices: Array<any> = []) => {\n  let services: Array<any> = [];\n  currentServices.map(ser => {\n    // has three levels\n    if (\n      ser.children &&\n      ser.children.length > 0 &&\n      ser.children[0].children &&\n      ser.children[0].children.length > 0\n    ) {\n      services.push(ser.facilityService);\n      ser.children.map((childService: any) => {\n        services.push(childService.facilityService);\n        childService.children.map((thirdLevelService: any) => {\n          services.push(thirdLevelService.facilityService);\n        });\n      });\n    }\n    // has two levels\n    else if (ser.children && ser.children.length > 0) {\n      services.push(ser.facilityService);\n      ser.children.map((childService: any) => {\n        services.push(childService.facilityService);\n      });\n    }\n    // has one level\n    else {\n      services.push(ser.facilityService);\n    }\n  });\n  return services;\n};\n"]},"metadata":{},"sourceType":"module"}