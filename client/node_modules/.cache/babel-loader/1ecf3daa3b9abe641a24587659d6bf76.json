{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/caspater/Projects/Work/mhfr/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"/Users/caspater/Projects/Work/mhfr/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/caspater/Projects/Work/mhfr/src/components/organisms/FacilityForms/Services.tsx\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  padding: 3rem;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { Formik } from \"formik\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"../../../components/atoms/Button\";\nimport SelectedServicesContainer from \"../../../components/molecules/SelectedServicesContainer\"; // @ts-ignore\n\nimport { FormControl, Select, InputLabel, Input } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport { renderOptions } from \"../../../services/helpers\";\nimport FormButtons from \"../../atoms/FacilityFormButtons\";\n\nclass ServicesForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      service: {\n        selectedServiceType: -1,\n        firstLevelService: -1,\n        secondLevelService: -1,\n        thirdLevelService: -1\n      },\n      services: [],\n      errors: []\n    };\n\n    this.getSelectedServiceTypes = () => {\n      return this.state.services.map(service => {\n        let serviceTyp = this.props.dependancies.services.types.find(serviceType => serviceType.id == Number(service.selectedServiceType));\n        return serviceTyp;\n      });\n    };\n\n    this.generateServiceHierarchy = () => {\n      let serviceTypes = this.getSelectedServiceTypes();\n      let services = [];\n\n      for (let serviceType of serviceTypes) {\n        let serviceOfSpecificType = this.state.services.filter(serv => serv.selectedServiceType == serviceType.id);\n        let firstLevelServiceIds = serviceOfSpecificType.map(serv => Number(serv.firstLevelService));\n        let secondLevelServiceIds = serviceOfSpecificType.map(serv => Number(serv.secondLevelService));\n        let thirdLevelServiceIds = serviceOfSpecificType.map(serv => Number(serv.thirdLevelService));\n        serviceType[\"first\"] = this.props.dependancies.services.list.filter(serv => firstLevelServiceIds.includes(serv.id));\n        serviceType[\"second\"] = this.props.dependancies.services.list.filter(serv => secondLevelServiceIds.includes(serv.id));\n        serviceType[\"third\"] = this.props.dependancies.services.list.filter(serv => thirdLevelServiceIds.includes(serv.id));\n        services.push(serviceType);\n      }\n\n      return services;\n    };\n\n    this.removeService = id => {\n      let removedService = null;\n      let services = this.state.services.filter(ser => {\n        if (ser.firstLevelService == id) {\n          return false;\n        } else if (ser.secondLevelService == id) {\n          removedService = _objectSpread({}, ser, {\n            secondLevelService: -1,\n            thirdLevelService: -1\n          });\n          return false;\n        } else if (ser.thirdLevelService == id) {\n          removedService = _objectSpread({}, ser, {\n            thirdLevelService: -1\n          });\n          return false;\n        }\n\n        return true;\n      });\n\n      if (removedService != null) {\n        services.push(removedService);\n      }\n\n      this.setState({\n        services\n      });\n    };\n\n    this.renderSelectedServices = () => {\n      let services = this.generateServiceHierarchy();\n      return React.createElement(SelectedServicesContainer, {\n        services: services,\n        onRemove: id => {\n          this.removeService(id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      });\n    };\n\n    this.onChange = (e, level) => {\n      switch (level) {\n        case \"type\":\n          this.setState({\n            service: _objectSpread({}, this.state.service, {\n              selectedServiceType: Number(e.target.value),\n              firstLevelService: -1,\n              secondLevelService: -1,\n              thirdLevelService: -1\n            })\n          });\n          break;\n\n        case \"first\":\n          this.setState({\n            service: _objectSpread({}, this.state.service, {\n              firstLevelService: Number(e.target.value),\n              secondLevelService: -1,\n              thirdLevelService: -1\n            })\n          });\n          break;\n\n        case \"second\":\n          this.setState({\n            service: _objectSpread({}, this.state.service, {\n              secondLevelService: Number(e.target.value),\n              thirdLevelService: -1\n            })\n          });\n          break;\n\n        case \"third\":\n          this.setState({\n            service: _objectSpread({}, this.state.service, {\n              thirdLevelService: Number(e.target.value)\n            })\n          });\n          break;\n      }\n    };\n\n    this.validate = () => {\n      const _this$state$service = this.state.service,\n            selectedServiceType = _this$state$service.selectedServiceType,\n            firstLevelService = _this$state$service.firstLevelService,\n            secondLevelService = _this$state$service.secondLevelService,\n            thirdLevelService = _this$state$service.thirdLevelService;\n\n      if (selectedServiceType === -1) {\n        return \"Please select a Service Type\";\n      }\n\n      if (firstLevelService === -1) {\n        return \"Please select a Service\";\n      }\n\n      if (secondLevelService === -1 && this.filteredServices(firstLevelService).length > 0) {\n        return \"Please select a Subservice\";\n      }\n\n      if (thirdLevelService === -1 && this.filteredServices(secondLevelService).length > 0) {\n        return \"Please select a Sub Sub Service\";\n      }\n\n      return \"\";\n    };\n\n    this.wasAdded = service => {\n      let services = this.state.services.filter(ser => JSON.stringify(ser) === JSON.stringify(service));\n      return services.length > 0;\n    };\n\n    this.addService = () => {\n      let errors = this.validate();\n\n      if (errors != \"\") {\n        this.setState({\n          errors\n        });\n        return;\n      }\n\n      let services = this.state.services;\n\n      if (!this.wasAdded(this.state.service)) {\n        services.push(this.state.service);\n      }\n\n      this.setState({\n        services,\n        errors: []\n      });\n      this.resetForm();\n    };\n\n    this.resetForm = () => {\n      this.setState({\n        service: _objectSpread({}, this.state.service, {\n          selectedServiceType: -1,\n          firstLevelService: -1,\n          secondLevelService: -1,\n          thirdLevelService: -1\n        })\n      });\n    };\n\n    this.filteredServices = category => {\n      return this.props.dependancies.services.list.filter(s => {\n        const isServiceType = s.service_type_id === Number(this.state.service.selectedServiceType);\n        const isOfCategory = s.service_category_id === Number(category);\n        return isServiceType && isOfCategory;\n      });\n    };\n\n    this.handleChange = async () => {\n      const _this$state$service2 = this.state.service,\n            firstLevelService = _this$state$service2.firstLevelService,\n            secondLevelService = _this$state$service2.secondLevelService,\n            thirdLevelService = _this$state$service2.thirdLevelService;\n      let error = this.validate(); // if (error != \"\") {\n      //   swal(error, \"\", \"error\");\n      //   return;\n      // }\n\n      let services = [];\n      if (Number(firstLevelService) > 0) services.push(firstLevelService);\n      if (Number(secondLevelService) > 0) services.push(secondLevelService);\n      if (Number(thirdLevelService) > 0) services.push(thirdLevelService);\n    };\n\n    this.onNext = async (values, {\n      setSubmitting,\n      setErrors\n    }) => {\n      this.props.onSubmit(this.state.services, \"services\", \"Finish\");\n      setSubmitting(false);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      services: this.props.initialValues.services\n    });\n  }\n\n  render() {\n    return React.createElement(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(Formik, {\n      enableReinitialize: true,\n      initialValues: this.props.initialValues,\n      onSubmit: this.onNext,\n      render: formikProps => React.createElement(Form, Object.assign({\n        onChange: this.onChange,\n        service: this.state.service,\n        filteredServices: this.filteredServices,\n        addService: this.addService,\n        renderSelectedServices: this.renderSelectedServices\n      }, this.props, formikProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default ServicesForm;\nexport function Form(props) {\n  let values = props.values,\n      errors = props.errors,\n      touched = props.touched,\n      handleSubmit = props.handleSubmit,\n      handleBlur = props.handleBlur,\n      isSubmitting = props.isSubmitting,\n      setFieldValue = props.setFieldValue,\n      dependancies = props.dependancies,\n      service = props.service,\n      onChange = props.onChange,\n      addService = props.addService,\n      renderSelectedServices = props.renderSelectedServices,\n      onCancel = props.onCancel,\n      fromAdd = props.fromAdd;\n  return React.createElement(React.Fragment, null, React.createElement(FormWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    container: true,\n    spacing: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }, \"Select Service Type\"), React.createElement(FormControl, {\n    className: \"mfl-max-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314\n    },\n    __self: this\n  }, React.createElement(Select, {\n    onChange: e => onChange(e, \"type\"),\n    input: React.createElement(Input, {\n      name: \"resourceType\",\n      id: \"resourceType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }),\n    value: service.selectedServiceType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, renderOptions(dependancies.services.types, \"service_type\")))), React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324\n    },\n    __self: this\n  }, props.service.selectedServiceType > 0 && React.createElement(React.Fragment, null, React.createElement(FormControl, {\n    className: \"mfl-max-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327\n    },\n    __self: this\n  }, React.createElement(Select, {\n    onChange: e => onChange(e, \"first\"),\n    input: React.createElement(Input, {\n      name: \"resourceType\",\n      id: \"resourceType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330\n      },\n      __self: this\n    }),\n    value: service.selectedServiceType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328\n    },\n    __self: this\n  }, renderOptions(props.filteredServices(0), \"service_name\"))))), React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }, props.service.firstLevelService > 0 && React.createElement(React.Fragment, null, React.createElement(FormControl, {\n    className: \"mfl-max-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345\n    },\n    __self: this\n  }, React.createElement(Select, {\n    onChange: e => onChange(e, \"second\"),\n    input: React.createElement(Input, {\n      name: \"resourceType\",\n      id: \"resourceType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }),\n    value: props.service.secondLevelService,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 346\n    },\n    __self: this\n  }, renderOptions(props.filteredServices(props.service.firstLevelService), \"service_name\"))))), React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362\n    },\n    __self: this\n  }, props.service.secondLevelService > 0 && React.createElement(React.Fragment, null, React.createElement(FormControl, {\n    className: \"mfl-max-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365\n    },\n    __self: this\n  }, React.createElement(Select, {\n    onChange: e => onChange(e, \"third\"),\n    input: React.createElement(Input, {\n      name: \"resourceType\",\n      id: \"resourceType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }),\n    value: props.service.thirdLevelService,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366\n    },\n    __self: this\n  }, renderOptions(props.filteredServices(props.service.secondLevelService), \"service_name\"))))), React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382\n    },\n    __self: this\n  }, React.createElement(Button, {\n    onClick: addService,\n    disabled: isSubmitting,\n    theme: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383\n    },\n    __self: this\n  }, \"Add Service\")))), React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 6,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 393\n    },\n    __self: this\n  }, renderSelectedServices()))), React.createElement(Grid, {\n    container: true,\n    spacing: 24,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 399\n    },\n    __self: this\n  }, React.createElement(FormButtons, {\n    handleSubmit: handleSubmit,\n    handleCancel: onCancel,\n    saveBtnText: fromAdd ? \"Next\" : \"Save\",\n    isSubmitting: isSubmitting,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400\n    },\n    __self: this\n  }))));\n}\nconst FormWrapper = styled.div(_templateObject());","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/components/organisms/FacilityForms/Services.tsx"],"names":["React","Formik","Paper","Grid","Button","SelectedServicesContainer","FormControl","Select","InputLabel","Input","styled","renderOptions","FormButtons","ServicesForm","Component","state","service","selectedServiceType","firstLevelService","secondLevelService","thirdLevelService","services","errors","getSelectedServiceTypes","map","serviceTyp","props","dependancies","types","find","serviceType","id","Number","generateServiceHierarchy","serviceTypes","serviceOfSpecificType","filter","serv","firstLevelServiceIds","secondLevelServiceIds","thirdLevelServiceIds","list","includes","push","removeService","removedService","ser","setState","renderSelectedServices","onChange","e","level","target","value","validate","filteredServices","length","wasAdded","JSON","stringify","addService","resetForm","category","s","isServiceType","service_type_id","isOfCategory","service_category_id","handleChange","error","onNext","values","setSubmitting","setErrors","onSubmit","componentDidMount","initialValues","render","formikProps","Form","touched","handleSubmit","handleBlur","isSubmitting","setFieldValue","onCancel","fromAdd","FormWrapper","div"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Formik } from \"formik\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"../../../components/atoms/Button\";\nimport SelectedServicesContainer from \"../../../components/molecules/SelectedServicesContainer\";\n// @ts-ignore\nimport { FormControl, Select, InputLabel, Input } from \"@material-ui/core\";\nimport styled from \"styled-components\";\nimport { renderOptions } from \"../../../services/helpers\";\nimport FormButtons from \"../../atoms/FacilityFormButtons\";\n\nclass ServicesForm extends React.Component<Props> {\n  state = {\n    service: {\n      selectedServiceType: -1,\n      firstLevelService: -1,\n      secondLevelService: -1,\n      thirdLevelService: -1\n    },\n    services: [],\n    errors: []\n  };\n\n  componentDidMount() {\n    this.setState({ services: this.props.initialValues.services });\n  }\n\n  getSelectedServiceTypes = () => {\n    return this.state.services.map((service: any) => {\n      let serviceTyp = this.props.dependancies.services.types.find(\n        (serviceType: any) =>\n          serviceType.id == Number(service.selectedServiceType)\n      );\n      return serviceTyp;\n    });\n  };\n\n  generateServiceHierarchy = () => {\n    let serviceTypes = this.getSelectedServiceTypes();\n\n    let services = [];\n\n    for (let serviceType of serviceTypes) {\n      let serviceOfSpecificType = this.state.services.filter(\n        (serv: any) => serv.selectedServiceType == serviceType.id\n      );\n\n      let firstLevelServiceIds = serviceOfSpecificType.map((serv: any) =>\n        Number(serv.firstLevelService)\n      );\n\n      let secondLevelServiceIds = serviceOfSpecificType.map((serv: any) =>\n        Number(serv.secondLevelService)\n      );\n\n      let thirdLevelServiceIds = serviceOfSpecificType.map((serv: any) =>\n        Number(serv.thirdLevelService)\n      );\n\n      serviceType[\"first\"] = this.props.dependancies.services.list.filter(\n        (serv: any) => firstLevelServiceIds.includes(serv.id)\n      );\n\n      serviceType[\"second\"] = this.props.dependancies.services.list.filter(\n        (serv: any) => secondLevelServiceIds.includes(serv.id)\n      );\n\n      serviceType[\"third\"] = this.props.dependancies.services.list.filter(\n        (serv: any) => thirdLevelServiceIds.includes(serv.id)\n      );\n\n      services.push(serviceType);\n    }\n    return services;\n  };\n\n  removeService = (id: number) => {\n    let removedService = null;\n    let services = this.state.services.filter((ser: any) => {\n      if (ser.firstLevelService == id) {\n        return false;\n      } else if (ser.secondLevelService == id) {\n        removedService = {\n          ...ser,\n          secondLevelService: -1,\n          thirdLevelService: -1\n        };\n        return false;\n      } else if (ser.thirdLevelService == id) {\n        removedService = { ...ser, thirdLevelService: -1 };\n        return false;\n      }\n\n      return true;\n    });\n\n    if (removedService != null) {\n      services.push(removedService);\n    }\n    this.setState({ services });\n  };\n\n  renderSelectedServices = () => {\n    let services = this.generateServiceHierarchy();\n    return (\n      <SelectedServicesContainer\n        services={services}\n        onRemove={(id: any) => {\n          this.removeService(id);\n        }}\n      />\n    );\n  };\n\n  onChange = (e: any, level: any) => {\n    switch (level) {\n      case \"type\":\n        this.setState({\n          service: {\n            ...this.state.service,\n            selectedServiceType: Number(e.target.value),\n            firstLevelService: -1,\n            secondLevelService: -1,\n            thirdLevelService: -1\n          }\n        });\n        break;\n      case \"first\":\n        this.setState({\n          service: {\n            ...this.state.service,\n            firstLevelService: Number(e.target.value),\n            secondLevelService: -1,\n            thirdLevelService: -1\n          }\n        });\n        break;\n      case \"second\":\n        this.setState({\n          service: {\n            ...this.state.service,\n            secondLevelService: Number(e.target.value),\n            thirdLevelService: -1\n          }\n        });\n        break;\n      case \"third\":\n        this.setState({\n          service: {\n            ...this.state.service,\n            thirdLevelService: Number(e.target.value)\n          }\n        });\n        break;\n    }\n  };\n  validate = () => {\n    const {\n      selectedServiceType,\n      firstLevelService,\n      secondLevelService,\n      thirdLevelService\n    } = this.state.service;\n\n    if (selectedServiceType === -1) {\n      return \"Please select a Service Type\";\n    }\n\n    if (firstLevelService === -1) {\n      return \"Please select a Service\";\n    }\n\n    if (\n      secondLevelService === -1 &&\n      this.filteredServices(firstLevelService).length > 0\n    ) {\n      return \"Please select a Subservice\";\n    }\n\n    if (\n      thirdLevelService === -1 &&\n      this.filteredServices(secondLevelService).length > 0\n    ) {\n      return \"Please select a Sub Sub Service\";\n    }\n\n    return \"\";\n  };\n\n  wasAdded = (service: any) => {\n    let services = this.state.services.filter(\n      (ser: any) => JSON.stringify(ser) === JSON.stringify(service)\n    );\n    return services.length > 0;\n  };\n\n  addService = () => {\n    let errors: any = this.validate();\n    if (errors != \"\") {\n      this.setState({ errors });\n      return;\n    }\n\n    let services: any = this.state.services;\n\n    if (!this.wasAdded(this.state.service)) {\n      services.push(this.state.service);\n    }\n    this.setState({ services, errors: [] });\n    this.resetForm();\n  };\n\n  resetForm = () => {\n    this.setState({\n      service: {\n        ...this.state.service,\n        selectedServiceType: -1,\n        firstLevelService: -1,\n        secondLevelService: -1,\n        thirdLevelService: -1\n      }\n    });\n  };\n\n  filteredServices = (category: any) => {\n    return this.props.dependancies.services.list.filter((s: any) => {\n      const isServiceType =\n        s.service_type_id === Number(this.state.service.selectedServiceType);\n      const isOfCategory = s.service_category_id === Number(category);\n      return isServiceType && isOfCategory;\n    });\n  };\n  handleChange = async () => {\n    const {\n      firstLevelService,\n      secondLevelService,\n      thirdLevelService\n    } = this.state.service;\n\n    let error = this.validate();\n\n    // if (error != \"\") {\n    //   swal(error, \"\", \"error\");\n    //   return;\n    // }\n    let services = [];\n\n    if (Number(firstLevelService) > 0) services.push(firstLevelService);\n\n    if (Number(secondLevelService) > 0) services.push(secondLevelService);\n\n    if (Number(thirdLevelService) > 0) services.push(thirdLevelService);\n  };\n\n  onNext = async (values: any, { setSubmitting, setErrors }: any) => {\n    this.props.onSubmit(this.state.services, \"services\", \"Finish\");\n    setSubmitting(false);\n  };\n  render() {\n    return (\n      <Paper>\n        <div>\n          <Formik\n            enableReinitialize={true}\n            initialValues={this.props.initialValues}\n            onSubmit={this.onNext}\n            render={formikProps => (\n              <Form\n                onChange={this.onChange}\n                service={this.state.service}\n                filteredServices={this.filteredServices}\n                addService={this.addService}\n                renderSelectedServices={this.renderSelectedServices}\n                {...this.props}\n                {...formikProps}\n              />\n            )}\n          />\n        </div>\n      </Paper>\n    );\n  }\n}\n\nexport default ServicesForm;\n\nexport function Form(props: any) {\n  let {\n    values,\n    errors,\n    touched,\n    handleSubmit,\n    handleBlur,\n    isSubmitting,\n    setFieldValue,\n    dependancies,\n    service,\n    onChange,\n    addService,\n    renderSelectedServices,\n    onCancel,\n    fromAdd\n  } = props;\n\n  return (\n    <>\n      <FormWrapper>\n        <Grid container spacing={24}>\n          <Grid item sm={12} md={6}>\n            <Grid container spacing={24}>\n              <Grid item sm={12} md={12}>\n                <InputLabel>Select Service Type</InputLabel>\n                <FormControl className=\"mfl-max-width\">\n                  <Select\n                    onChange={e => onChange(e, \"type\")}\n                    input={<Input name=\"resourceType\" id=\"resourceType\" />}\n                    value={service.selectedServiceType}\n                  >\n                    {renderOptions(dependancies.services.types, \"service_type\")}\n                  </Select>\n                </FormControl>\n              </Grid>\n              <Grid item sm={12} md={12}>\n                {props.service.selectedServiceType > 0 && (\n                  <>\n                    <FormControl className=\"mfl-max-width\">\n                      <Select\n                        onChange={e => onChange(e, \"first\")}\n                        input={<Input name=\"resourceType\" id=\"resourceType\" />}\n                        value={service.selectedServiceType}\n                      >\n                        {renderOptions(\n                          props.filteredServices(0),\n                          \"service_name\"\n                        )}\n                      </Select>\n                    </FormControl>\n                  </>\n                )}\n              </Grid>\n              <Grid item sm={12} md={12}>\n                {props.service.firstLevelService > 0 && (\n                  <>\n                    <FormControl className=\"mfl-max-width\">\n                      <Select\n                        onChange={e => onChange(e, \"second\")}\n                        input={<Input name=\"resourceType\" id=\"resourceType\" />}\n                        value={props.service.secondLevelService}\n                      >\n                        {renderOptions(\n                          props.filteredServices(\n                            props.service.firstLevelService\n                          ),\n                          \"service_name\"\n                        )}\n                      </Select>\n                    </FormControl>\n                  </>\n                )}\n              </Grid>\n              <Grid item sm={12} md={12}>\n                {props.service.secondLevelService > 0 && (\n                  <>\n                    <FormControl className=\"mfl-max-width\">\n                      <Select\n                        onChange={e => onChange(e, \"third\")}\n                        input={<Input name=\"resourceType\" id=\"resourceType\" />}\n                        value={props.service.thirdLevelService}\n                      >\n                        {renderOptions(\n                          props.filteredServices(\n                            props.service.secondLevelService\n                          ),\n                          \"service_name\"\n                        )}\n                      </Select>\n                    </FormControl>\n                  </>\n                )}\n              </Grid>\n              <Grid item sm={12} md={12}>\n                <Button\n                  onClick={addService}\n                  disabled={isSubmitting}\n                  theme=\"secondary\"\n                >\n                  Add Service\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid item sm={12} md={6}>\n            {renderSelectedServices()}\n          </Grid>\n        </Grid>\n      </FormWrapper>\n      <Grid container spacing={24}>\n        <Grid item sm={12} md={12}>\n          <FormButtons\n            handleSubmit={handleSubmit}\n            handleCancel={onCancel}\n            saveBtnText={fromAdd ? \"Next\" : \"Save\"}\n            isSubmitting={isSubmitting}\n          />\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\ntype Props = {\n  initialValues: any;\n  onSubmit: any;\n  networkError: Array<any>;\n  dependancies: any;\n  onCancel: Function;\n  fromAdd?: boolean;\n};\n\nconst FormWrapper = styled.div`\n  padding: 3rem;\n`;\n"]},"metadata":{},"sourceType":"module"}