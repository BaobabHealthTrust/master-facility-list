{"ast":null,"code":"import * as yup from \"yup\";\nconst passwordValidationMessage = \"Weak password, The password must be a combination of numbers, letters , and special characters\";\nexport const userSchema = yup.object().shape({\n  name: yup.string().typeError(\"First name is required\").min(3).required(\"First name is required\"),\n  username: yup.string().typeError(\"username is required\").min(6).required(\"username is required\"),\n  email: yup.string().typeError(\"enter a valid email address\").email(\"enter a valid email address\").required(\"email is required\"),\n  password: yup.string().typeError(\"atleast 8 characters long\").min(8, \"atleast 8 characters long\").matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/gim, passwordValidationMessage).required(\"password is required\"),\n  confirmPassword: yup.string().typeError(\"Passwords do not match\").oneOf([yup.ref(\"password\"), null], \"Passwords do not match\").matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/gim, passwordValidationMessage).required(\"Password confirm is required\")\n});\nexport const updateSchema = yup.object().shape({\n  name: yup.string().typeError(\"First name is required\").min(3).required(\"First name is required\"),\n  username: yup.string().typeError(\"username is required\").min(6).required(\"username is required\"),\n  email: yup.string().typeError(\"enter a valid email address\").email(\"enter a valid email address\").required(\"email is required\")\n});","map":{"version":3,"sources":["/Users/caspater/Projects/Work/mhfr/src/components/organisms/UsersForms/schema.tsx"],"names":["yup","passwordValidationMessage","userSchema","object","shape","name","string","typeError","min","required","username","email","password","matches","confirmPassword","oneOf","ref","updateSchema"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,MAAMC,yBAAyB,GAC7B,gGADF;AAGA,OAAO,MAAMC,UAAU,GAAGF,GAAG,CAACG,MAAJ,GAAaC,KAAb,CAAmB;AAC3CC,EAAAA,IAAI,EAAEL,GAAG,CACNM,MADG,GAEHC,SAFG,CAEO,wBAFP,EAGHC,GAHG,CAGC,CAHD,EAIHC,QAJG,CAIM,wBAJN,CADqC;AAM3CC,EAAAA,QAAQ,EAAEV,GAAG,CACVM,MADO,GAEPC,SAFO,CAEG,sBAFH,EAGPC,GAHO,CAGH,CAHG,EAIPC,QAJO,CAIE,sBAJF,CANiC;AAW3CE,EAAAA,KAAK,EAAEX,GAAG,CACPM,MADI,GAEJC,SAFI,CAEM,6BAFN,EAGJI,KAHI,CAGE,6BAHF,EAIJF,QAJI,CAIK,mBAJL,CAXoC;AAiB3CG,EAAAA,QAAQ,EAAEZ,GAAG,CACVM,MADO,GAEPC,SAFO,CAEG,2BAFH,EAGPC,GAHO,CAGH,CAHG,EAGA,2BAHA,EAIPK,OAJO,CAKN,mEALM,EAMNZ,yBANM,EAQPQ,QARO,CAQE,sBARF,CAjBiC;AA0B3CK,EAAAA,eAAe,EAAEd,GAAG,CACjBM,MADc,GAEdC,SAFc,CAEJ,wBAFI,EAGdQ,KAHc,CAGR,CAACf,GAAG,CAACgB,GAAJ,CAAQ,UAAR,CAAD,EAAsB,IAAtB,CAHQ,EAGqB,wBAHrB,EAIdH,OAJc,CAKb,mEALa,EAMbZ,yBANa,EAQdQ,QARc,CAQL,8BARK;AA1B0B,CAAnB,CAAnB;AAqCP,OAAO,MAAMQ,YAAY,GAAGjB,GAAG,CAACG,MAAJ,GAAaC,KAAb,CAAmB;AAC7CC,EAAAA,IAAI,EAAEL,GAAG,CACNM,MADG,GAEHC,SAFG,CAEO,wBAFP,EAGHC,GAHG,CAGC,CAHD,EAIHC,QAJG,CAIM,wBAJN,CADuC;AAM7CC,EAAAA,QAAQ,EAAEV,GAAG,CACVM,MADO,GAEPC,SAFO,CAEG,sBAFH,EAGPC,GAHO,CAGH,CAHG,EAIPC,QAJO,CAIE,sBAJF,CANmC;AAW7CE,EAAAA,KAAK,EAAEX,GAAG,CACPM,MADI,GAEJC,SAFI,CAEM,6BAFN,EAGJI,KAHI,CAGE,6BAHF,EAIJF,QAJI,CAIK,mBAJL;AAXsC,CAAnB,CAArB","sourcesContent":["import * as yup from \"yup\";\n\nconst passwordValidationMessage =\n  \"Weak password, The password must be a combination of numbers, letters , and special characters\";\n\nexport const userSchema = yup.object().shape({\n  name: yup\n    .string()\n    .typeError(\"First name is required\")\n    .min(3)\n    .required(\"First name is required\"),\n  username: yup\n    .string()\n    .typeError(\"username is required\")\n    .min(6)\n    .required(\"username is required\"),\n  email: yup\n    .string()\n    .typeError(\"enter a valid email address\")\n    .email(\"enter a valid email address\")\n    .required(\"email is required\"),\n\n  password: yup\n    .string()\n    .typeError(\"atleast 8 characters long\")\n    .min(8, \"atleast 8 characters long\")\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/gim,\n      passwordValidationMessage\n    )\n    .required(\"password is required\"),\n  confirmPassword: yup\n    .string()\n    .typeError(\"Passwords do not match\")\n    .oneOf([yup.ref(\"password\"), null], \"Passwords do not match\")\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\\$%\\^&\\*])(?=.{8,})/gim,\n      passwordValidationMessage\n    )\n    .required(\"Password confirm is required\")\n});\n\nexport const updateSchema = yup.object().shape({\n  name: yup\n    .string()\n    .typeError(\"First name is required\")\n    .min(3)\n    .required(\"First name is required\"),\n  username: yup\n    .string()\n    .typeError(\"username is required\")\n    .min(6)\n    .required(\"username is required\"),\n  email: yup\n    .string()\n    .typeError(\"enter a valid email address\")\n    .email(\"enter a valid email address\")\n    .required(\"email is required\")\n});\n"]},"metadata":{},"sourceType":"module"}